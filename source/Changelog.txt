06/07/2021 - Xuri
	Updated how UOX3 handles more, morex, morey and morez properties:
		DFN tags for these properties can now handle data in multiple formats. Example:
			MORE=1285, MORE=0 0 5 5, MORE=0x00 0x00 0x05 0x05, MORE=0x00000505
		JS command 'set more/morex/morey/morez now accepts any of the above formats
		JS command 'get will now display both the decimal value for these properties, as well as the hex one
		JS command 'tweak will now display hex value for these properties in a tooltip
	Fixed an issue with target-based spells (like Magic Lock/Unlock, Magic Trap/Untrap, Telekinesis) that used the inverse result of a distance check to determine if players could cast such a spell at an item
	Fixed an issue where players could keep spawn containers open on screen to access items respawning inside without having to unlock/untrap container again after a respawn
	Locked containers (and spawn containers) will now show [Locked] in the item tooltip
	Spawn containers will now be re-trapped when new items spawn, if they were trapped originally. To trap a container:
		MOREZ=0x01 0x32 0x00 0x00 // 0x01 marks container as trapped, 0x32 says "deal 50 damage" when trap is set off
	Fixed trapped spawn containers not dealing damage when trap is set off due to magic damage function in source requiring a valid attacker (now no longer does)
	Updated source and scripts to use cliloc id 1050045 for custom tooltips rather than 1114778, as 1050045 is available in all client versions that support tooltips
	Added new JS Function to force-trigger a trapped item, as if the player tried to open a trapped container:
		TriggerTrap( pChar, iTrap )
	Updated JS docs with some missing Functions/Methods

04/07/2021 - Xuri (0.99.4u)
	UOX3 now sends the appropriate packets (0x85 and/or 0x86) in response to client requests to delete a character from the char selection screen
	Fixed an issue with fetching create entries in JS - was incorrectly limited by number of registered spells!
	More code cleanup

04/07/2021 - Xuri
	Fixed an issue with ItemID skill where using the skill on a crafted item would not output a result if creator of item was unknown
	Command logs now also include any parameters used with a command
	Fixed an issue where messages used with CustomTarget JS function would not get truncated properly if longer than the allowed maximum length
	Fixed some instances of potential buffer overrun and/or out-of-bounds memory access
	Fixed some potential null pointer dereferences
	Fixed a couple instances of missing breaks in switch cases
	Added [[maybe_unused]] attributes in places where return values are intentionally unused
	Added [[fallthrough]] attributes in places where switch case fallthroughs are intentional
	Fixed some issues with converting account data from older (pre 0.99) versions of UOX3
	Misc minor code cleanup

02/07/2021 - Xuri
	Corpse parts carved from human corpses will now have weight, and decay - as they're added as script items instead of base items
	Fixed some memory leaks in CMultiObj::GetBuildTimestamp(), CMultiObj::GetTradeTimestamp(), CWorldMain::SaveNewWorld() and cEffects::tempeffect()
	Misc smaller code cleanup

30/06/2021 - Xuri
	Added new UOX.INI settings under [speedup] section to control global speed of mounted NPCs:
		NPCMOUNTEDWALKINGSPEED=0.3
		NPCMOUNTEDRUNNINGSPEED=0.12
		NPCMOUNTEDFLEEINGSPEED=0.2
	Added new NPC DFN tags to allow overriding global mounted movement speeds:
		FLEEINGSPEEDMOUNTED=#
		RUNNINGSPEEDMOUNTED=#
		WALKINGSPEEDMOUNTED=#

29/06/2021 - Xuri (0.99.4t)
	Exposed crafting entries to JS engine, along with associated properties from the crafting DFNs:
		New JS Object types
			CreateEntries	// Global JS object containing all item entries loaded from create DFNs
			CreateEntry		// A specific create entry retrieved from global object. Example:
				var createEntry = CreateEntries[7] // Fetches item entry #7 from create DFNs
		New CreateEntry JS Properties
			id			// itemID of item to craft
			name		// name of item entry from create DFNs
			addItem 	// section header of item to craft from item DFNs
			colour		// colour of crafted item
			sound		// sound played when crafting item
			minRank		// minimum rank value used by rank system to provide variable stats to crafted items
			maxRank		// maximum rank value used by rank system to provide variable stats to crafted items
			delay		// delay in milliseconds for crafting to finish
			spell		// spell ID primarily used when inscribing magic scrolls
			resources	// list of resources needed to craft item.
				resources[n][0] // amount of resource needed
				resources[n][1] // resource colour required
				resources[n][2] // list of IDs accepted as resource material
			skills		// list of skills requirements to craft item
				skills[n][0]	// skillNumber of skill required to craft item
				skills[n][1]	// minimum skill at which player will always fail to craft item
				skills[n][2]	// maximum skill at which player will always succeed to craft item
			avgMinSkill	// average minimum skill required to smelt item
			avgMaxSkill	// average maximum skill required to smelt item
	Fixed a bug with tracking menu that could cause UOX3 to crash when cancelling/closing the menu

27/06/2021 - Dragon Slayer
	Added [hairrestyledeed] item that lets (human) players restyle their hair
	Added script for handling hair restyle (js/item/hairrestyle.js) and added it to jse_fileassociations.scp with ID 5028
	Updated hair restyle script with some coding style changes, added system messages to dictionary files and added gump tooltips (Xuri)

27/06/2021 - Xuri
	Fixed an issue with JS Function DeleteFile(), which would stop calling script from working if no file was found for deletion. Could break demolishing of houses, amongst other things
	Fixed an issue with DoSEErrorMessage() function that prevented JS function error messages from being displayed in UOX3 console if message size was below 512
	Fixed a bug that allowed players to place items on the same slot of walls when using a client that doesn't automatically restrict this
	When dropping items, UOX3 will now look for a valid surface to drop them on, and move the item to said valid surface if applicable
	Fixed an issue with loading of MultiCollections.uop where max boundaries of each multi was not set on load, preventing features that relied on finding corners of building from working (like automatic ban location detection for houses)
	Added new function in mapstuff.cpp to check flags on dynamic items, and exposed it as a JS Function with same name and parameters:
		CheckDynamicFlag( SI16 x, SI16 y, SI08 oldz, UI08 worldNumber, UI16 instanceID, TileFlags toCheck );
	Fixed an issue where items were not always properly added to/removed from map regions when picked up or dropped
	Added new helper function in dist.cpp to find 3D distance between two points:
		getDist3D( point a, point b )
	Added JS Function - DistanceBetween() - to find distance between two sets of coordinates, or two objects:
		DistanceBetween( x1, y1, x2, y2 )
		DistanceBetween( x1, y1, z1, x2, y2, z2 )
		DistanceBetween( sourceObject, targObject )
		DistanceBetween( sourceObject, targObject, checkZ )
	Added Item JS Method - GetTileName() - to get name of an item directly from tiledata
	Added new UOX.INI setting that defines the lower limit for when a purchase will withdraw money from bank instead of backpack:
		BANKBUYTHRESHOLD=2000
	Split the UOX.INI setting CONSOLELOG into three parts, to enable/disable different forms of logging:
		CONSOLELOG=1/0 	// Toggles logging of console messages, warnings and errors
		NETWORKLOG=1/0 	// Toggles logging of network traffic
		SPEECHLOG=1/0 	// Toggles logging of player/staff speech

23/06/2021 - Dragon Slayer
	Added [interiordecorator] tool (dfndata/items/misc/uor_misc.dfn) that can be used to raise, lower or rotate locked down items in houses
	Added script for rotating furniture via interior decorator tool or via dropping item
	Merged furniture rotating functionality into existing smartturn script, and expanded on the selection of items. Supported furniture can now be turned by double-clicking the item (if no other double-click functionality exists), picking up and dropping the item, or via the interiordecorator tool (Xuri)
	Updated js/jse_objectassociations.scp with furniture IDs supported by the furniture_smartturn script, so rotating will work for any supported furniture without needing to add scripts to each individual furniture DFN (Xuri)
	Added system messages to dictionary files (Xuri)
	Added interior decorator tool to Architect shoplists (Xuri)

23/06/2021 - Xuri
	Fixed an issue with CChar::RemoveAllObjectsFromSight(), which failed to remove nearby multis from sight, leading to ghost images when changing worlds/instances
	Added check for other multis when sailing - boats will now collide with other boats!
	Added check for dynamic items when sailing - boats will now collide with blocking objects
	Added "wrapping" support for maps 0 and 1 when sailing, meaning a ship can sail around the world in both N/S and E/W directions.
	Added new [magic] section in uox.ini with the following settings:
		TRAVELSPELLSFROMBOATKEYS=1 		// Toggle being able to travel via Recall and Gate spells directly to a boat via its key
		TRAVELSPELLSWHILEOVERWEIGHT=0 	// Toggle being able to travel via Recall and Gate spells when overweight
		MARKRUNESINMULTIS=1 			// Toggle being able to mark runes while inside multis. If enabled, runes marked inside multis will be associated with the multi in question, rather than a specific set of coordinates. If multi no longer exists, travelling to it via Recall or Gate will be impossible
		TRAVELSPELLSBETWEENWORLD=0 		// Toggle being able to travel via Recall and Gate spells from one facet to another
		TRAVELSPELLSWHILEAGGRESSOR=0	// Toggle being able to travel via Recall and Gate spells when marked as an aggressor (if attacked an innocent first, or if criminal)
	Fixed an exception that would only rear its head when running UOX3 in debug mode, by adding new function void CBaseObject::RemoveFromRefreshQueue(), which when called from the end of the Cleanup() process for an object will ensure it's removed from the refreshQueue (thanks giwo!)
	Fixed several issues with the regional spawning system:
		NPCs would quite often get created, only to be deleted shortly after because the system failed to find a valid spawn location. This part of the system has now been rewritten to look for a valid spawn location before actually spawning the NPC, to avoid unnecessary creation/deletion of characters
		Spawn system would not continue looking for a valid spawn location past the first failure (when it was supposed to make 100 attempts before giving up)
		Spawn system would not look for valid water tiles for ocean-based/amphibian creatures if valid land tiles could not be found. As a result, amphibian creatures that could have spawned on either land or water would only ever spawn on land.
		DoesMapBlock() function checked for TF_BLOCKING tile flag before it checked if waterwalking was allowed and if tile had TF_WET flag. As a result, no purely ocean-based creatures would spawn at all because no valid spawn locations could ever be found

22/06/2021 - Xuri (0.99.4s)
	Updated Character JS Method .Follow() to allow optional null parameter to clear follow target for an NPC
	Added new Character JS Method .Dupe(), exposing code functionality to duplicate a character and returning the new character object to scripts. Example:
		var newChar = myChar.Dupe()
	Updated GM command 'dupe to work with characters as well as items
	The colour of blood effects for characters and creatures hit in combat can be defined in dfndata/race/races.dfn using the BLOODCOLOUR tag and a colour ID. If the value 0xffff is provided, the colour of the blood will be inherited from the character's colour, if any
	Moved splitting of NPCs in combat from hard code to JS (js/npc/ai/splitting_npcs.js). It relies on the onAttack JS event to trigger, but otherwise works identical to the previous hard-coded variant. The script has been assigned a default script ID of 3203
	Added SCRIPT=3203 tag to [slime]/[jwilson] NPCs (dfndata/npc/miscmonsters.dfn)
	Added new race for slime-related creatures (RACE 24 in dfndata/race/races.dfn), with a BLOODCOLOUR tag set to 0xffff to let blood effects inherit the colour of each individual slime
	Updated RACE tag for [slime]/[jwilson] NPCs to use the new slime-race (dfndata/npc/miscmonsters.dfn)
	Fixed an issue where UOX3 would attempt to update health bar of training dummies not marked as damageable (js/item/trainingdummy.js)
	Added packet-hook script (js/server/network/0x7f_uogatewayServerPoll.js) to handle responses to server polling by shard lists like UOGateway, ShardPortal, etc.
	Removed old and outdated UOG response code from network.cpp, along with UOXMONITOR response (an old tool no longer found in the wild)
	Extended packet overloading to include packets received on first connection, to allow custom responses to things like UOG server poll and other early incoming packets
	Adjusted code that spawns blood effects when taking damage to only happen for damage values higher than 1% of max health, or 1 (whichever is higher)
	Adjusted code that prevents stamina regen from taking place if a character is thirsty to allow generating up to 25% of max stamina, to prevent characters from being unable to move due to thirst!
	Added new settings in uox.ini to enable/disable the hard-coded hunger and thirst systems, with thirst system being disabled by default:
		HUNGERENABLED=1 // defaults to 1. Affects hunger of players, tamed pets, animal AI
		THIRSTENABLED=0 // defaults to 0. Affects thirst of players, tamed pets, animal AI
	Responses to UOG/CUO server poll requests are now enabled in uox.ini by default

20/06/2021 - Xuri
	Fixed an error introduced with previous commit that caused some issues with the handling of items upon player death/resurrection
	Fixed an error where items that had AR/resistances with values lower than 10 would lose those values after a restart (for instance wooden buckler)

17/06/2021 - Xuri
	Fixed a potential server crash issue with OnUnequipAttempt JS event
	Added additional parameter to onCombatDamageCalc JS event - hitLoc, which contains the hit location calculated by code for an attack. New syntax:
		onCombatDamageCalc( pAttacker, pDefender, fightSkill, hitLoc )
	Moved CalculateHitLoc() and DoHitMessage() out of CHandleCombat::calcDamage(), so these can still happen if JS scripts override damage calculations using onCombatDamageCalc event
	Hairs/Beards inside corpse containers now not movable, even if displayed in client for some reason

16/06/2021 - Xuri (0.99.4r)
	Updated default item decay timer from 300s to 1800s (30 minutes)
	Updated default corpse decay timer from 900s to 420s (7 minutes)
	Updated default blood decay timer for corpses from 450s to 210s (3.5 minutes)
	Added new UOX.INI setting that determines decay timer for NPC corpses (previously used regular decay timer):
		NPCCORPSEDECAYTIMER=420
	Updated onDecay JS event to support triggering in global script
	Added onDecay event to default global script (js/server/global.js), which detects when player corpses are about to decay, turns them into bones, and resets the decay timer back to full
	Fixed an issue that snuck in with regards to fetching server setting for BLOODEFFECTCHANCE in JS engine

15/06/2021 - Xuri
	Added cEffects::SpawnBloodEffect( UI08 worldNum, UI16 instanceID, UI16 bloodColour, BloodTypes bloodType ), which can be called upon to create blood splatter effects for things like death, bleeding, combat hits, etc.
	Added random blood effects that spawn when a character dies, and decays according to new ini setting
	Added new UOX.INI settings under [timers] to define how long blood effects take to decay:
		BLOODDECAYTIMER=3 			// Smaller blood effects spawned during combat, defaults to 3 seconds
		BLOODDECAYCORPSETIMER=450 	// Larger blood effects spawned upon death, defaults to half the duration of the default corpse decay timer
	Fixed an issue with Forensic Evaluation skill (js/skills/forensics.js) not giving correct info on age of a corpse, because it incorrectly tried to check a .tempTime property instead of .tempTimer
	Changed default value of MSGREDISPLAYTIME in [tracking] section of UOX.INI from 30 to 3, so tracking arrow will actually follow the target when it moves (every 3 seconds)
	Fixed an issue with the Tracking skill where attempting to left-click on the tracking arrow would cause client to freeze up
	Fixed an issue with the Tracking skill where right-clicking tracking arrow to dismiss it would not always work, especially if target had been killed/deleted
	Fixed an issue with the Tracking skill where the tracking arrow would not be automatically dismissed if the tracked target was killed/deleted
	Fixed an issue that prevented clients in 6.0.5 - 6.0.14.1 range from connecting even though CLIENTSUPPORT6050 was enabled in ini
	Fixed an issue where client 6.0.14.2 was being mis-classified as a T2A client, and not the first of the SA clients as it should be
	Changed how Race damage modifier is applied to damage dealt in combat - it's now a direct percentage bonus (or penalty) applied to the base damage dealt
	Added in missing default [COMBAT MODS] section to dfndata/race/races.dfn. Each MOD# entry in this section represents a percentage modifier applied to skill checks for members of a race that subscribes to that MOD entry via skill tags like [SKILLNAME]G=# (bonus) or [SKILLNAME]L=# (penalty). These modifiers are also applied to base damage in combat, before other damage modifiers.
		Example1: SWORDSMANSHIPG=3 would apply a 20% bonus to swordsmanship skill checks for race the tag was added to, as well as a 20% bonus to base damage dealt in combat
		Example2: MACEFIGHTINGL=3 would apply a 20% penalty to macefighting skill checks for race the tag was added to, as well as a 20% penalty to base damage dealt in combat

13/06/2021 - Xuri
	Some fixes to IP4Address code and output to console of which type of IP being listened (punt)

13/06/2021 - Xuri
	Updated UOX3 documentation to reflect recent changes to IP handling/config, addition of 'decorate command and world templates, updated instructions for building from source
	Added missing world template file (js/jsdata/worldtemplates/felucca_containers.jsdata)
	Fixed an issue with how UOX3 lists out IP addresses it's actively listening to (punt)
	
12/06/2021 - punt
	Following changes made to ensure compatable with some of my other projects
		Switched over to ConfigOS.h from Config.h
		UOX_PLATFORM to PLATFORM (and the corresponding platform types)
	Replaced NULL with nullptr
	
12/06/2021 - Xuri
	Some minor cleanup in a few DFN files. Affected files:
		dfndata/creatures/creatures.dfn
		dfndata/items/gear/weapons/aos_weapons.dfn
		dfndata/items/magic/reagents.dfn
		dfndata/items/misc/equippable-mounts.dfn
		dfndata/items/misc/gems.dfn
		dfndata/items/npcmenu.bulk.dfn
		dfndata/items/skills/misc/misc.dfn
		dfndata/npc/femalevendors.dfn
		dfndata/npc/mounts.dfn
		dfndata/npc/undead.dfn

12/06/2021 - Xuri
	Updated decorate command to support two additional object categories - containers and spawners - and the properties needed by these to function
	Fixed an issue with appending folder names to paths in File JS Method .Open() and JS File Function DeleteFile()
	Renamed default UOX3 server name (was too long) to My UOX3 Shard
	Rewrote server IP handling (new files: IP4Address.hpp/cpp) and did away with the need for the [play server list] section and SERVERLIST entries in uox.ini. UOX3 now automatically accepts and responds to connections on both local and LAN IPs, as well as an optional external/WAN ip defined in uox.ini tag EXTERNALIP, with server name defined by the existing SERVERNAME tag in the ini (punt)

11/06/2021 - Xuri (0.99.4q)
	Added entry for a new directory path in uox.ini:
		SCRIPTDATADIRECTORY=./js/jsdata/ - dedicated to generic data read/written by JS scripts, data not directly linked to live content, which should not live or die by the state of the SHAREDDIRECTORY. Existing scripts will continue to write/read files in the SHAREDDIRECTORY if no changes are made.
	Updated JS File Method .Open() to support an optional fourth argument (requires third argument):
		useScriptDataDir (boolean) - when this fourth argument is included as true, UOX3 will look for the file in the SCRIPTDATADIRECTORY instead of the SHAREDDIRECTORY. Third argument - folderName - is required for this fourth argument to be used. New syntaxes:
			.Open( fileName, fileMode )
			.Open( fileName, fileMode, folderName )
			.Open( fileName, fileMode, folderName, useScriptDataDir )
	Updated JS File Function DeleteFile() to support an optional third argument (requires second argument):
		useScriptDataDir (boolean) - when this third argument is included as true, UOX3 will look for the file in the SCRIPTDATADIRECTORY instead of the SHAREDDIRECTORY. Second argument - folderName - is required for this third argument to be used. New syntaxes:
			DeleteFile( fileName )
			DeleteFile( fileName, folderName )
			DeleteFile( fileName, folderName, useScriptDataDir )
	Added new admin command (js/commands/decorate.js) to allow saving/loading world templates. These templates are essentially text files (with .jsdata file extension) that contain the bare minimum amount of details needed to decorate an entire game world, a facet or even a specific area of a facet. The files can be bundled with UOX3 for a smoother first-time-user-experience, can be easily shared with other people as blueprints for world decoration, and they can be saved and loaded on the fly without impacting existing data on a shard. By default, the command will save/load items to/from different files per facet based on the following item categories: doors, signs, lights, moongates, teleporters, misc (everything else).
		Command syntax:
			'decorate save
				Save all items to the default templates, based on each item's objectCategory and facet
			'decorate save [objectCategory]
				Save all items of specified objectCategory, regardless of facet
			'decorate save [facetName]
				Save all items on specified facet, regardless of objectCategory
			'decorate save [customFileName]
				Save all items of all objectCategories on all facets to custom template file
			'decorate save [objectCategory] [facetName]
				Save all items of specified objectCategory in the specified facet
			'decorate save [customFileName] [facetName] x1 y1 x2 y2
				Save all items within specified coordinates on specified facet to customFileName
			'decorate load
				Load all items from the default templates, regardless of objectCategory and facet
			'decorate load [objectCategory]
				Load all items of specified objectCategory, regardless of facet
			'decorate load [facetName]
				Load all items on specified facet, regardless of objectCategory
			'decorate load [customFileName]
				Load all items from file named [customFileName]
			'decorate load [objectCategory] [facetName]
				Load all items of specified objectCategory in the specified facet
			'decorate copy [sourceFacet] [targetFacet]
				Copy all items from one facet to another
			'decorate clean
				Clean up duplicate decorations that might have been loaded/added by accident.
		Note that world templates are by default stored in and read from a subfolder named "worldtemplates" under the new SCRIPTDATADIRECTORY (which defaults to UOX3/js/jsdata/)
	Added welcome gump that is displayed automatically for characters on the admin account (account 0) on first login. This welcome gump gives new shard admins the option to either start with a blank and empty world, or to load the default UOX3 world - based on the default set of worldfile templates provided with UOX3, if any. It also provides a few tips to get started, as well as links to various documentation pages, forum and Discord server. The welcome gump can also be re-opened at a later stage using a new admin command: 'welcome
	Updated Item JS Method Dupe() to support passing NULL instead of a socket, for duplicating items without needing to place them in a player's backpack

11/06/2021 - Xuri
	Added some error-checking to JS function AreaItemFunction() to avoid potential server crash
	Fixed an issue introduced in 0.99.4m, where objects being added to/moved to specific worlds or instances were still visible to players in other worlds/instances
	Fixed issue with loading SCPTRIG tag with value 65535 in older worldfiles, now treats these as if the value was 0
	Updated JS Methods .AddCheckbox() and .AddRadio() to support specifying the gumpImageID to display when button is checked/selected.
		Updated syntaxes:
			.AddCheckbox( topHeight, topLeft, checkImage, defaultStatus, unk2 )
			.AddCheckbox( topHeight, topLeft, checkImageOff, checkImageOn, defaultStatus, unk2 )
			.AddRadio( topHeight, topLeft, radioImage, pressed, id )
			.AddRadio( topHeight, topLeft, radioImageOff, radioImageOn, pressed, id )
	Added new Socket JS Method to close a specific generic gump:
		.CloseGump( gumpID, buttonID ) // gumpID is normally equal to 0xffff + scripttrigger of script gump is created in, while buttonID is the buttonID response we want the client to send when gump closes
	Added new Gump JS Method to end a group of radio buttons started with AddGroup():
		.EndGroup()	// Ends previously started group element
	Re-enabled Gump JS Method MasterGump(), in case someone can use it for something
		.MasterGump( masterGumpID ) // Define master gump of gump?
	Added facet support for 'wipe and 'iwipe commands (js/commands/targeting/wipe.js). Updated syntax:
		'wipe/iwipe
			Brings up target cursors. Wipes all objects in area between target locations, on same facet as user
		'wipe/iwipe x1 y1 x2 y2
			Wipes all objects in specified area, on same facet as user
		'wipe [objType] [facet]
			Wipes all objects of specified type. If facet is specified, wipes only on that facet.
			objTypes: items, multis, boats, npcs, spawners or all
		'wipe all
			Wipes ALL objects, on ALL facets, regardless of object type
		'wipe all force
			Wipes ALL objects, on ALL facets, regardless of object type and whether wipeable flag is set
	Fixed an issue with getTileName() in uox3.cpp that could cause a server crash when fetching the names of certain items

11/06/2021 - Dragon Slayer
	Added thirst system that works similarly to existing hunger system, where characters (and optionally, pets) grow thirsty over time, and gradually draining their stamina (down to a minimum of 1) if too thirsty
	Added new settings to uox.ini under a new [thirst] section to control thirst system:
		THIRSTRATE=6000 	// The rate at which characters grow more thirsty
		THIRSTDRAINVAL=2 	// The amount of stamina drained per thirst cycle when too thirsty
		PETTHIRSTOFFLINE=0 	// Enable/disable whether pets grow more thirsty over time while owners are offline
	Added new JS event that triggers when a character's thirst level changes.
		onThirstChange( pChanging, newStatus )
			Return false or nothing to prevent hard code from running
			Return true to allow hard code to run like normal
	Added new JS properties for Characters related to thirst system (Xuri)
		.thirst 			// Get/Set current thirst level of character
		.thirstRate 		// Get character's thirst rate, based on racial properties or global settings
		.willthirst/ 		// Get/Set whether character will get thirsty
		.tamedThirstRate 	// Get/Set tamed pet's thirst rate
		.thirstWildChance 	// Get/Set tamed pet's chance at going wild if too thirsty
	Updated JS script for drinks (js/server/resource/pitchers.js) to reduce character thirst when consumed, with appropriate system messages displayed based on character's thirst level (Xuri)
	Updated JS commands get (js/commands/targeting/get.js), set (js/commands/targeting/set.js) and tweak (js/commands/targeting/tweak.js) to support getting/setting character hunger levels (Xuri)

04/06/2021 - Xuri (0.99.4p)
	Fixed an issue with return values for onDrop JS event where not all return values would work as intended
	Added -Wno-shift-negative-value flag to CXXFLAGS in Makefile to potentially suppress some JS-related warnings when compiling on Unix platforms (punt)

04/06/2021 - Xuri
	Reverted changes to jsapi.h, which were causing some unwanted behavior
	Fixed some errors reading in UOP files in UOPData.cpp, and made some tweaks to other related files (punt)

04/06/2021 - Xuri
	Fixed an issue that could cause player characters created in older versions of UOX3 to end up with backpacks without max item capacity set, thus being unable to add any items to their backpack
	More warnings cleanup, and some fixes to address size_t differences between Windows and Unix platforms (punt)

03/06/2021 - Xuri
	Cleaned up some warnings caused by 64 bit/32 bit difference between macOS and Windows (punt)

03/06/2021 - Xuri
	Removed RemoveFromSight() from CItem::Update() in cItem.cpp, to address flickering issues with animated items, and for smoother updates of items on boats when sailing.
	Added new flag in CBaseObject - damageable - which determines if an Item or Multi should be considered a damageable object.
	Added new DFN tag for Items and Multis to mark objects as damageable objects
		DAMAGEABLE=0/1 // If enabled, allows client to display healthbar for object, using object's hp/maxhp values as basis. Note that any changes to a damageable object's health will not be reflected in the client until a stat update has been sent.
	Added new JS Property for Items and Multis and Characters to get/set an object's damageable flag
		.isDamageable // 1 or 0
	Added new JS Method for Items, Multis and Characters to force an update of the object's health bar to nearby players:
		.UpdateStats( statType ) // statType can be 0 (Health, only one that works for items), 1 (Mana) or 2 (Stamina)
	Updated DFN entries for training dummies (dfndata/items/houseaddons/house_addons.dfn) to include DAMAGEABLE=1 and HP=100 tags, and also updated script for training dummies (js/item/trainingdummy.js) with some extra features for dummies marked as damageable:
		Show damage numbers over the training dummy when hit
		Update health of training dummy based on damage received when hit
		Restore health of training dummy to max after 4 seconds of inactivity
	Updated 'fullstats and 'heal commands (js/commands/targeting/stats.js) to support restoring the health of a damageable object
	Updated 'get (js/commands/targeting/get.js) and 'set (js/commands/targeting/set.js) commands to support getting and setting the damageable flag on objects
	Updated updateStats() in uox3.cpp to work with CBaseObject instead of CChar
	Updated statwindow() in CSocket.cpp to work with CBaseObject instead of CChar
	Updated CPUpdateStat in CPacketSend.cpp to work with CBaseObject instead of CChar, to support sending packet 0xA1 to client for Items/Multis
	Updated CPStatWindow in CPacketSend.cpp to work with CBaseObject instead of CChar, to support sending packet 0x11 to client for Items/Multis
	Fixed an issue with outgoing packet 0x11 where a character's current HP might sometimes incorrectly be displayed as zero
	Updated CPNewObjectInfo in CPacketSend.cpp to send object information packet 0xF3 to client with datatype set to 0x03 for Items/Multis marked as damageable objects, to enable the client's ability to display health-bars for these items.
	Fixed an issue with JS Method for Items - .Refresh() - which previously did nothing, but now instead sends an update of item to all sockets in range

01/06/2021 - Xuri
	Adjustments to source/CMakeList.txt in attempt to fix build issue with CMake
	Updated debug/release configurations for Win32 in VS solution to include required references to zlib

01/06/2021 - Xuri (0.99.4o)
	Added support for MultiCollections.uop. If present in the specified datafolder, this file will be preferred over the traditional multi.mul/idx files, and will enable access to the new multis contained within (punt)
	Added dependency for static library of zlib-1.2.11, of which a minimal version is included in a subfolder alongside spidermonkey in the root UOX3 project folder. This is needed for compression matters related to UOP files and certain UO network packets
	Added VS Solution (zlib.sln) to compile static-library of zlib-1.2.11 for Windows. Makefile for Linux/macOS also included.
	Updated CMakeList.txt to include zlib references
	Updated default DATADIRECTORY path in uox.ini to match current day default installation path of UO (thanks, dragonslayer!)

30/05/2021 - Xuri (0.99.4n)
	Fixed return value logic for onUseChecked/onUsedUnchecked JS events - was reversed by mistake!
	Initiated start of revamped mul/uop handling, with some new files added to project: (punt)
		MultiMul.cpp/hpp, IDXMul.cpp/hpp and UOPData.cpp/hpp
	Updated code for loading and seeking in multis (punt)
	Added new files to VS project and project filter
	Added new files to source/CMakeLists.txt

28/05/2021 - Xuri
	Unified duplicate tile/multi seeking code for HS/non-HS versions of tiledata & multis (punt)
	Updated MsgBoardMaintenance() to use standard filesystem directory listing (punt)

27/05/2021 - Xuri
	Replaced UOX_MIN and UOX_MAX with std::min and std::max (punt)
	Moved StringUtility functions into a new namespace: strutil (punt)

25/05/2021 - Xuri (0.99.4m)
	Fixed a long-standing (20+ years old) issue with objects not being sent/removed consistently when players login, teleport or move around, or when items are being removed, areas wiped, etc.
	Added new class RegionSerialList to store serial references to objects added to/removed from regions (both on worldfile load and when objects move in-game). This allows for faster lookup, insertion tests, etc. and results in worldfiles loading up to ~41% faster
	Fixed an issue where characters in different world instances could shove each-other when moving
	Fixed server crash related to using incorrect argument for REGSPAWN command
	Fixed an issue where characters would not get world changes updated properly in some older (5.x) client versions
	UOX3 will now attempt to resist being closed if a world-save is in progress, to avoid corruption of worldfile data
	Added TryParseJSVal() helper function in cScript.cpp, used to parse jsval values returned from script events. Provides results matching 0 (0, false), 1 (1, true) or any specific int value returned from script.
	JS events updated to use new TryParseJSVal helper function (no change in behaviour):
		onDecay, onResurrect, onCommand, onBuyFromVendor, onSellToVendor, onPickup, onCharDoubleClick, onSkillGump, onUseBandageMacro, onCombatStart, onCombatEnd, onDeathBlow, onBuy, onSell
	JS events with slight change of behaviour after update to use TryParseJSVal:
		onDrop, onDropItemOnItem, onDropItemOnNpc - previously, a blank or non-existent return value would be treated the same as a return true. This will now be treated as a return false. Update scripts accordingly!
	JS events updated to support return values from scripts:
		onCollide, onTalk, onSnooped, OnHungerChange
			Return false or nothing to prevent hard code from running
			Return true to allow hard code to run like normal
		onStolenFrom, onAISliver, onLightChange, onVirtueGumpPress, onQuestGump, onSpecialMove, onSwing, onClick, onHouseCommand, onSellToVendor, onSkillCheck, onSpellGain, onSpellLoss
			Return false to allow hard code and other scripts with event to run like normal
			Return true to prevent hard code and other scripts with event from running
		onSteal
			Return false or nothing to allow hard code and other scripts with event to run like normal
			Return true to prevent hard code and onStolenFrom event from running (theft failed?)
			Return 2 to prevent hard code, but allow onStolenFrom event to run (theft succeeded, but handled in script?)
		onLeaving, onEntrance, onEquip, onUnequip, onEnterEvadeState, onSoldToVendor, onBoughtFromVendor, onSpellSuccess, onSpellTarget, onFlagChange, onDeath
			Return false or nothing to allow other scripts with event to run like normal
			Return true to prevent other scripts with event from running
	Added new JS events that run prior to items being equipped/unequipped, with support for return values:
		onEquipAttempt( pEquipper, iEquipping )
		onUnequipAttempt( pEquipper, iUnequipping )
			Return false or nothing to reject attempt to equip/unequip item, and prevent hard-code or other scripts with event from running
			Return true to allow hard code to run like normal
	Added new JS event that runs prior to onSnooped event, for character doing the snooping:
		onSnoopAttempt( snooped, snooper )
			Return false or nothing to prevent hard code and other snooping-related events from running
			Return true to allow hard code and other snooping-related events to run like normal
	Updated onSnooped JS event to accept return values:
		Return true when success state is true to prevent other scripts with event from running
		Return true when success state is false to prevent hard code and other scripts with event from running
	Added second parameter to onCommand() JS event to match it up with the documented version. New syntax:
		onCommand( socket, cmdString )
	Updated onClick JS event to also run for characters with event attached (return 1 to prevent showing hard-coded name for whatever object is clicked)
	Updated onSteal JS event to include a third parameter, an object reference for the target of the theft
	Fixed an issue where the JS function TriggerEvent() didn't restore the original JSContext and JSObject of the calling script after calling an event in a separate script, causing timers to be associated with the wrong script when both TriggerEvent and StartTimer were used in same script
	Updated KillTimers JS method to support an optional argument specifying the timerID of the timer to be killed. If no arguments are provided, it will - as previously - kill all timers for the object
	Added support for assigning multiple JS scripts per object (item, multi, char, region).
		Any time a scriptID is added to an object, the list of such IDs for that object will be sorted from lowest to highest scriptID, which also determines the execution order for the scripts. Note that if the same JS event is present in several scripts assigned to an object, each of those events will trigger, unless the rules about return values for said event prevent this
	DFNs for Items, Multis, Characters and Regions can now contain multiple SCRIPT=scriptID tags per definition. Each such SCRIPT tag will be applied to the object in question, then sorted from lowest to highest scriptID by server.
	Added new JS property for Items, Multis, Characters and Regions:
		.scriptTriggers 		// If used to get property, will return array object with all script IDs assigned to object. If used to set property, will add script ID to existing list of script IDs for object.
	Modified JS property for Items, Multis, Characters and Regions, which for backwards compatibility functions similar to in older versions:
		.scripttrigger 			// If used to get property, will return last script ID in list of script IDs assigned to object. If used to set property, will clear list of script IDs and assign only the new ID
	Added new JS Methods for Items, Multis, Characters and Regions:
		.AddScriptTrigger( scriptID ) 	// Adds a new scriptID to list of scripts assigned to object
		.RemoveScriptTrigger( scriptID ) // Remove a specific scriptID from object (0 = remove all)
	Removed all traces of SETSCPTRIG and TWEAK commands from source. These commands are now entirely handled in JS.
	Stats and Tweak buttons in list of online characters ('WHOLIST) will now execute the CSTATS or TWEAK command respectively, with target automatically set to character being viewed in list
	Fixed an issue with TWEAK command where items equipped on a character's paperdoll could not be targeted
	Moved SETSCPTRIG command from code to JS (js/commands/targeting/scptrig.js), and supplemented it with some additional commands:
		GETSCPTRIG				// List out all scriptIDs assigned to object
		SETSCPTRIG scriptID 	// Clears list of scriptIDs for object, then assigns the specified scriptID
		ADDSCPTRIG scriptID 	// Adds specified scriptID to list of scriptsIDs assigned to object
		REMOVESCPTRIG scriptID 	// Removes specified scriptID from list of scriptIDs assigned to object (0 = remove all)
	Fixed issue where sub-commands would still execute despite cancelling target cursor when using AREACOMMAND, just without being limited by such pesky things as coordinates (js/commands/targeting/areacommand.js)
	Updated AREACOMMAND to support adding/removing script triggers (js/commands/targeting/areacommand.js)
	Updated CSTATS command to support showing all script triggers attached to an object (js/commands/targetin/gumps.js)
	Updated GET (js/commands/targeting/get.js) and SET (js/commands/targeting/set.js) commands to support adding/removing script triggers from objects
	Updated the following JS scripts to use AddScriptTrigger() method instead of .scripttrigger property:
		kindling script (js/item/kindling.js)
		key script (js/item/key.js)
		pitchers script (js/server/resource/pitchers.js)
		houseSign script (js/server/house/houseSign.js)
		banker script (js/npc/ai/banker.js)
	Fixed some missing/incorrect brackets in the following DFN files (thanks, punt!):
		dfndata/items/gear/armor/base_armors.dfn
		dfndata/items/gear/armor/leather_armor/ninja_leather.dfn
		dfndata/items/skills/misc/misc.dfn
		dfndata/items/building/walls/tent_walls.dfn
		dfndata/items/building/decs/stoneart.dfn
		dfndata/location/location.dfn
	Added decay=0 tag to bulletin boards
	Updated JS docs with updated return value details for events
	Updated UOX3 docs to latest version

07/05/2021 - Xuri (0.99.4l)
	Updated LeaveBoat() function to use ValidSpawnLocation() instead of ValidMultiLocation() for more reliable disembarking from boats
	Added support for the following boat commands (and their triggerword aliases):
		raise anchor 		// Raise anchor, allowing boat to move
		drop anchor 		// Drops anchor, preventing boat from moving
		forward one 		// Moves boat one tile forward
		backward one 		// Moves boat one tile backward
		left one 			// Moves boat one tile in port direction
		right one 			// Moves boat one tile in starboard direction
		forward left 		// Moves boat forward left diagonally
		forward right 		// Moves boat forward right diagonally
		backward left 		// Moves boat backward left diagonally
		backward right 		// Moves boat backward right diagonally
		forward left one 	// Moves boat one tile diagonally, forward left
		forward right one 	// Moves boat one tile diagonally, forward right
		backward left one 	// Moves boat one tile diagonally, backward left
		backward right one 	// Moves boat one tile diagonally, backward right
	Added new enum BoatMoveType to keep track of all the additional boat movement types, and changed moveType from UI08 to SI08, in order to use -1 as a representation of an "anchored" and immovable boat
	Boats now start out with anchor dropped when initially placed, and must also have anchor dropped before they can be packed up into model ships, while anchor must be raised in order for tiller man to accept orders to sail
	Added support for two new DFN tags in houses.dfn, primarily for the use of boats/boat holds:
		MAXITEMS=#			// Max items that can be stored in a boat's hold
		WEIGHTMAX=#			// Max weight that a boat's hold can... hold (40000 = 400.00 stones)
	Updated dfndata/house/house.dfn to include default MAXITEMS (125 items) and WEIGHTMAX (400 stones) values for boats
	Fixed an issue where large dragon ships would be spawned with incorrect names due to server assuming they're houses
	Fixed an issue where it was not possible to turn a boat around under certain circumstances
	Tiller men on boats will now be named "a tiller man" if the boat is unnamed, and "The tiller man of [ship name]" if the ship has been named
	Boats now cannot be dry-docked if there are items in the hold
	Boats now cannot be dry-docked if either of the planks are open
	Names of boats are now stored in the title property of ship models, and is used to reapply the boat's name when unpacking the boat, while the ship model itself is named after the boat with a [Dry Docked] tag slapped on at the end.

07/05/2021 - Xuri
	Replaced CDataList with the new GenericList class throughout UOX3, and removed CDataList from the project files
	Reverted an earlier change where scriptsections were supposed to be reapplied to items bought from NPC shopkeepers - didn't actually work!
	Fixed issue where total gold and armor rating of player was not getting sent for status window updates

04/05/2021 - giwo
	Fixed server crash related to JS timers/other tempeffects by replacing the use of CDataList (which uses std::deque) in tempEffects with GenericList (which uses std::list), which is more optimized for removing records in the middle of the array
	Updated Sort() methods in GenericList to use std::list member function sort instead of std::sort (Xuri)
	Applied some code style changes for consistency :art: (Xuri)

03/05/2021 - Xuri
	Fixed an issue where bulletin board posts submitted from client with lines of text longer than 255 bytes were stored with no null-terminator at end of the such lines, since they got cut off in wrong place

03/05/2021 - Xuri (0.99.4k)
	Added layer=1 to spellbooks in dfndata/items/magic/misc_magic.dfn to allow NPCs to equip them (dragon slayer)
	Fixed issue with wipe command (js/commands/targeting/wipe.js) not working because script was referencing wrong name for socket
	Randomized initial position of items added inside containers via DFN tag PACKITEM
	Fixed issue with get (js/commands/targeting/get.js) and set (js/commands/target/set.js) commands where wrong property name was used for getting/setting old npcwander type
	Fixed various issues with in-game bulletin boards; posts can now be made, read and replied to using both regular client and ClassicUO client
	Fixed issue with bulletin board post removal that could cause infinite loops
	Fixed issues with and re-enabled bulletin board maintenance. Should no longer cause infinite loops, nor corrupt bulletin board posts when removing posts marked for deletion! This also fixes NPC escort quests not appearing on bulletin boards after initial quests were accepted and related posts removed.
	Added new GM command in js/commands/msgmod.js:
		'msgmod on/off 		// If on, GMs who open a bulletin board while using ClassicUO client will be able to remove any individual message
	Added additional teleport locations in teleport.scp for Dragon Turtle Spawn area, Khaldun, Terathan Keep, Valley of Eodon, Minax Fortress, Stygian Abyss, Underworld
	Some minor fixes to regions.dfn - Name of Covetous dungeon, a set of coordinates for Ice Dungeon

28/04/2021 - Xuri
	Reorganized teleport.scp file with logical groupings by map and area for easier maintenance
	All teleport locations in teleport.scp without a source/target world specified will now work for both Felucca and Trammel facets
	Deleted ustring.cpp/ustring.h from repository and removed last few straggling references to these
	Teleport locations from teleport.scp are now sorted upon initial load, and no longer require being sorted in the file itself (punt)
	Modified handling of CONT and PACKITEM tags loaded from worldfiles to no longer corrupt pointers (punt)

27/04/2021 - Xuri (0.99.4j)
	Removed ustring.h and ustring.cpp and references to these from the project as they have now been completely phased out by the move to std::string and the use of StringUtility.cpp/hpp
	Finalized string handling modernization in cRaces.cpp, house.cpp, items.cpp, npcs.cpp, skills.cpp, ssection.cpp, ssection.h and targeting.cpp (punt)

27/04/2021 - Xuri
	Fixed some missing icons in dfndata/creatures/creatures.dfn
	Updated server status HTML template page (dfndata/html/online.htf) to match other templates
	Fixed an issue where using JS Method PopUpTarget with ID 12 could crash the server
	Additional string handling modernization in magic.cpp, JSEncapsulate.cpp, jail.cpp, house.cpp, fileio.cpp, network.cpp, msgboard.cpp, mapstuff.cpp, pcmanage.cpp, scriptc.cpp, SEFunctions.cpp, sound.cpp, speech.cpp (punt)

26/04/2021 - Xuri
	Increased default timer for worldsaves from 5 to 10 minutes
	Fixed an issue where the tile command could spawn items with incorrect ID because tempInt2 wasn't reset properly
	Additional string handling modernization in cAccountClass.cpp, cHTMLSystem.cpp, CResponse.cpp, cServerData.cpp, cServerData.h, cServerDefinitions.cpp, cSocket.cpp, cSpawnRegion.cpp, cSpawnRegion.h, cWeather.cpp, Dictionary.cpp, effect.cpp and uox3.cpp (punt)

26/04/2021 - Xuri
	Fixed an issue where 'get command attempts to retrieve incorrect property when isonline parameter is provided
	Fixed an issue where 'set weightmax # would fail because script used an incorrect property name
	Fixed an issue with check for allowed/banned equipment for races; if a list of allowed equipment existed, it would never check the banned list
	Additional string handling modernization in cHTMLSystem.cpp, cRaces.cpp, gumps.cpp, townregion.cpp and uox3.cpp (punt)

25/04/2021 - Xuri
	Additional work done to modernize string handling in CPacketReceive.cpp, CPacketReceive.h, CPacketSend.cpp, CPacketSend.h, cScript.cpp, gumps.cpp (punt)
	Additional work done to modernize string handling in gumps.cpp, commands.cpp, cmdtable.cpp, commands.h, CJSMapping.cpp, scriptc.cpp and scriptc.h (punt)

24/04/2021 - Xuri
	More UString instances replaced by std::string and associates (punt)

23/04/2021 - Xuri (0.99.4i)
	Fixed an error in tweak command (js/commands/targeting/tweak.js) when attempting to use it on characters with no backpacks
	Updated a bunch of casts to use UOX3-specific typedefs for consistency
	Startup performance is now faster by an additional 70% over the previous commit, primarily due to modernization of HandleLine() functions in cBaseobject.cpp, cChar.cpp, cItem.cpp and cMultiObj.cpp (punt)

23/04/2021 - Xuri (0.99.4h)
	Exposed a (read-only) JS property for characters to fetch their hunger rate. Uses race's hunger rate if defined, otherwise uses HUNGERRATE form uox.ini:
		.hungerRate 		// Seconds between becoming hungrier
	Updated 'get command to allow retrieving a character's hungerRate property
	Added some details to console during UOX3 startup about which IPs and Ports UOX3 is listening to
	Added new JS event that triggers when a player clicks on the Quest button in the paperdoll. Triggers from character script if present, or global script if not:
		onQuestGump( pUser )
	Added new JS event that triggers when player toggles a special move from a combat book. See packet 0xBF, subCmd 0x19 in packet guides for details on the special moves, whose IDs range from 0x00 to 0x1D:
		onSpecialMove( pUser, abilityID )
	Fixed invalid ID for items [0x0174] and [0x0175] in dfndata/items/building/walls/stone_walls.dfn
	Updated FileSize() function in regions.cpp to fetch file size using std::filesystem::file_size() instead of creating an input stream, opening a file and then trying to seek the last position in the file
	Added findNearbyObjects() function to findfuncs.cpp, to find all objects (characters and items) of CBaseObject class near a specified location
	Improved performance when initializing multis on startup; now checks for items near multis, instead of checking for multis near every single item!
	Improved performance when loading items and characters from worldfiles during startup; around 33% faster for release builds, around ~50% faster when running in debug mode through visual studio (punt)
	Updated createSection() in ssection.cpp to use std::string and StringUtility functions instead of UString, and added some error handling (punt)

19/04/2021 - Xuri (0.99.4g)
	Completed implementation of onDecay JS event, which was not actually hooked up to anything! Can now be used to interrupt decay for items. Returning false will prevent code from deleting the decaying item, while returning true will continue running the decay code as normal.
	Fixed an issue with .brkPeaceChance JS Character property, which erroneously called on the GetBrkPeaceChanceGain()/SetBrkPeaceChanceGain() functions instead of GetBrkPeaceChance()/SetBrkPeaceChance()
	Fixed issue with loading of UOP map files that was introduced in a previous commit while attempting to get rid of some warnings when compiling UOX3 on Windows!

17/04/2021 - Xuri
	Added new helper function to get amount of minutes that have passed since midnight 01/01/1970 UTC - GetMinutesSinceEpoch()
	Converted wTimeBan property of CAccountBlock from UI16 to UI32
	Added check during login for timeban account property. If a timeban is in place, player will be unable to login until after the ban is over.
	Added JS property for Account JS Object:
		.timeban 			// Time in minutes that user is banned
	Updated .get command to allow retrieving timeban value from account of player characters
	Updated .set command to allow setting timeban value on account of player characters. If set to higher than 0, player will also be marked as banned, and disconnected
	Added two new commands in js/commands/targeting/disconnect.js:
		'ban [durationInMinutes]	// Ban targeted player for specified duration in minutes, or for a default 24 hours if no duration is specified
		'unban 						// Unban targeted player
	Updated 'tweak command (js/commands/targeting/tweak.js) to support viewing and modifying .timeban account property
	Updated dictionary files with additional messages used in relation to banning/unbanning players

16/04/2021 - Xuri
	Fixed long-standing issue with UOX3 console not resetting terminal properly after shutdown on Linux, after updating cConsole.cpp/h to conform to standard unix terminal commands/settings for certain features (punt)
	Fixed an issue that could cause a crash on Windows when attempting to broadcast system messages from the UOX3 console (punt)
	Fixed an issue that prevented text input in UOX3 console for system broadcasts from being displayed on Linux and MacOS (punt)
	Added support for new JS Object - IUE_ACCOUNT - which can be accessed via character property .account. The following account properties have been exposed to the JS engine:
		.id 				// Account ID (Read-Only)
		.username 			// Account Username (Read-Only)
		.flags 				// Flags set on account (Read-Only)
		.comment 			// Comment/contact info
		.character1 		// Character in account slot 1 (Read-Only)
		.character2 		// Character in account slot 2 (Read-Only)
		.character3 		// Character in account slot 3 (Read-Only)
		.character4 		// Character in account slot 4 (Read-Only)
		.character5 		// Character in account slot 5 (Read-Only)
		.character6 		// Character in account slot 6 (Read-Only)
		.character7 		// Character in account slot 7 (Read-Only)
		.currentChar 		// Currently logged in character (if any) (Read-Only)
		.lastIP 			// Last IP used to connect to account (Read-Only)
		// Flag shortcuts
		.isBanned 			// Is account banned?
		.isSuspended 		// Is account suspended?
		.isPublic			// Is comment/contact info to be considered public info?
		.isOnline			// Is account online?
		.isSlot1Blocked 	// Is character slot 1 blocked?
		.isSlot2Blocked 	// Is character slot 2 blocked?
		.isSlot3Blocked 	// Is character slot 3 blocked?
		.isSlot4Blocked 	// Is character slot 4 blocked?
		.isSlot5Blocked 	// Is character slot 5 blocked?
		.isSlot6Blocked 	// Is character slot 6 blocked?
		.isSlot7Blocked 	// Is character slot 7 blocked?
		.unused9 			// Unused flag
		.unused10 			// Unused flag
		.isSeer 			// Is account marked as Seer account?
		.isCounselor 		// Is account marked as Counselor account?
		.isGM 				// Is account marked as GM account?
	Fixed 'addaccount command - can now once again be used to add a new user account to the server from in-game. See accounts.adm for info on available flags. Syntax:
		'addaccount [username] [password] [(optional)flags]
	Updated 'get command to allow retrieving certain account properties for targeted player characters:
		username, flags, comment, character1, character2, character3, character4, character5, character6, character7, lastIP, isBanned, isSuspended, isPublic, isOnline, isSlot1Blocked, isSlot2Blocked, isSlot3Blocked, isSlot4Blocked, isSlot5Blocked, isSlot6Blocked, isSlot7Blocked, unused9, unused10, isSeer, isCounselor and isGM
	Updated 'set command to allow setting certain account properties for targeted player characters:
		comment, password, isBanned, isSuspended, isPublic, isOnline, isSlot1Blocked, isSlot2Blocked, isSlot3Blocked, isSlot4Blocked, isSlot5Blocked, isSlot6Blocked, isSlot7Blocked, unused9, unused10, isSeer, isCounselor, isGM
	Updated 'tweak command to allow viewing and modifying of certain account properties for targeted player characters
		Note that any changes to account properties will not go into effect until a worldsave or manual save of accounts via console has taken place.
	Updated AI for AI_HEALER_G and AI_HEALER_E to check for multi-ownership and line of sight before resurrecting dead players

14/04/2021 - Xuri
	Fixed a casting issue that prevented SEFunctions.cpp from compiling on Linux
	Added additional Region/Townregion JS properties. These (and other properties) can be viewed and modified using the 'tweak command, but changes are not permanently saved and will only be valid as long as the server stays running:
		.id 				// Region ID
		.scripttrigger 		// Script-trigger associated with region
		.numGuards 			// Number of guards associated with town (if any) in region
		.taxes 				// Gold reserves of town (if any) in region
		.reserves 			// Resource reserves for town (if any) in region
		.appearance 		// Appearance - 0 = Spring, 1 = Summer, 2 = Autumn, 3 = Winter, 4 = Desolation, 5 = Unknown
		.music 				// Music assigned to region in regions.dfn
		.weather 			// Weather ID assigned to region in regions.dfn
		.owner 				// Name of owner of guards in the region
	A JS function was added previously, but not mentioned in the changelog:
		GetTownRegion( regionID ) // Takes one parameter, regionID, and returns a region object

13/04/2021 - Xuri (0.99.4f)
	Option to define how much memory JS engine should be allowed to allocate before last-ditch GC kicks in has been moved from engine.dat to a new UOX.INI setting under [system]. Note that too low values can lead to server instability, especially if doing a lot of JS engine reloads, so default value has been increased from 16 to 256 MB per JS Runtime:
		JSENGINESIZE=256 // gcMaxBytes limit in MB per JS Runtime. Must be between 16 and 4095
	Reduced stackchunksize value provided for JS_NewContext from 0x500000 to the recommended default of 8192
	Updated how players are paid for completing NPC escort quests; instead of hard-coded random amount between 0-600 gold, the reward is now based partly on the NPC escort's fame, and partly on the amount of gold the NPC is carrying. The formula for quest rewards thus look like this: rewardAmount = (( totalFame / 100 ) * 50 ) + ( totalGold * 0.25 )
	Fixed healthbars of nearby characters not showing correctly for players who have just logged in. Cause seems to have been UOX3 reading more bytes from network buffer than required when (not) handling packets 0xB5 and 0xFB. Added basic handling of these packets to avoid that problem.
	Fixed an issue where UOX3 would send full status updates (packet 0x11) for each character on the screen, rather than just sending the minimum required for each character. Client doesn't need to know the weight of an NPC, or how much gold an opponent player is carrying!
	Fixed an issue with tooltips for characters and/or items not always appearing, caused by UOX3 not responding correctly to certain tooltip requests (packet 0xD6)

08/04/2021 - Xuri (0.99.4e)
	Added support for packet 0xE2 (New Character Animation, used to play animations in client v7.0.0.0+) via cEffects::PlayNewCharacterAnimation( CChar *mChar, UI16 actionID, UI16 subActionID, UI08 subSubActionID )
	Added support for new animation packet in JS Character method DoAction() using a second parameter that specifies animation variation, which if present forces server to send new animation packet instead of old. This means the 'action/npcaction commands can now be used to play animations on gargoyles/humans in client v7.0.0.0+ using the following syntax: 'action [action subAction]
	Created new enums for character actions and sub-actions, and updated code to refer to these instead of using "magic" numbers
	Added new options in UOX.INI under [settings] section:
		FORCENEWANIMATIONPACKET=0/1 // If enabled (default), forces the use of the new animation packet for playing various character animations for both NPCs in general and for player characters connected with client v7.0.0.0+
	Updated various actions performed by players and NPCs to use new animation packet (combat, spellcasting, mining) if connected with client v7.0.0.0+ and ini setting to force new animation packet is enabled
	Added basic support for gargoyle flying ability. Can now use flying ability itself to enter/exit flying state, and the state change will also get sent to nearby players. Flying players are treated the same way as mounted players; polymorph spells will auto-dismounts mounted/flying player, same rules for stealth applies to flying as riding, etc.
	Exposed Character property to JS engine:
		.isFlying // returns true if character is flying
	Moved Orc and Ratman races from RACE 1 and 2 to RACE 22 and 23 in dfndata/race/races.dfn to make room for two new player races, that are applied to new player characters during character creation:
		[RACE 1] - Elf
		[RACE 2] - Gargoyle
	Updated orcs and ratmen in dfndata/npc/humanoids.dfn with race IDs 22 and 23 respectively
	Added items in dfndata/items/skills/tools/cooking.dfn to item menu under Skills > Tools > Cooking
	Fixed an issue where moving items around within a container at max item capacity was not allowed
	The GM command 'set can now modify a character's current mana using 'set mana #
	Added JS command to get specific object property values (using same property names as 'set command):
		'get [objectProperty]
	Exposed Item/Character properties to JS:
		.oldX // Previous X coordinate for object
		.oldY // Previous Y coordinate for object
		.oldZ // Previous Z coordinate for object
	Exposed Character properties to JS:
		.mana // Character's current amount of mana
	Updated version of Winsock requested by UOX3 from 2.0 to 2.2
	Exposed timer for updating NPC flags to [timers] section of UOX.INI:
		NPCFLAGUPDATETIMER=5 // Interval in seconds between each time NPC flags are updated. Default adjusted down from 30 to 5 seconds
	Fixed an issue where UOX3 was trying to output some debug/warning messages to console using the wrong console method
	Made some small tweaks to NPC pathfinding to make NPCs more likely to pick a new target location when their old one is blocked
	Added HP DFN tag to guard NPCs to prevent them from spawning with half health
	Removed -lstdc++fs from Makefile and replaced with special instructions for users of gcc below v9.x
	Fixed a buffer overrun issue with tiledata item names
	Eliminated a bunch of compilation warnings in VS2017
	Updated JS Method CreateDFNItem to allow creating items without referencing a socket/character. Syntax:
		var myItem = CreateDFNItem( null, null, itemSectionID, amount, "ITEM", false, worldNumber, instanceID );
	Added functional chessboard that operates on standard chess rules. Pieces cannot be removed from the board, snap to the chessboard grid when dropped, are subject to movement restrictions per chesspiece, will capture opponent pieces if landing on their square. Board can be reset by dragging king-piece off to the side of the board (js/item/gameboards.js and js/item/chesspiece.js)
	Added functional checkerboard, with pieces that cannot be removed, can only move in diagonals, can jump across opponent pieces to capture them. Board can be reset by either side moving one of their own pieces off to the side of the board (js/item/gameboards.js and js/item/checkerpiece.js)
	Using the 'go command without any additional parameters will now open the GM travel menu (js/commands/go.js)

26/03/2021 - Xuri
	Re-implemented DoStaticEffect() as a stand-alone JS function that takes a location as a target instead of an object
	Fixed an issue with potions where entire stacks of potions would get consumed instead of just one potion
	Added missing entries for normal and greater explosion potions to dfndata/items/magic/potions.dfn, and added them to the item menu
	Potions are now marked as stackable in dfndata/items/magic/potions.dfn
	Moved countdown and explosion handling of explosion potions from code to JS (js/item/potion.js)
	Added LoS and Z distance checking for explosion potions
	Added optional randomization of countdown timer for explosion potions. Can be enabled via a boolean at the top of the potions script
	Damage of explosion potions is now defined via DAMAGE/LODAMAGE/HIDAMAGE tags in Item DFNs, and the time before exploding is defined via the SPEED tag
	Added optional Alchemy skill bonus damage modifier for explosion potions, defaults to 1 additional damage per 5 skillpoints
	Added new UOX.INI settings under [combat] to control the bonus damage modifier in explosion potions:
		ALCHEMYBONUSENABLED=0/1	// enable/disable bonus damage, defaults to disabled
		ALCHEMYBONUSMODIFIER=5 	// bonusDamage = alchemySkill / alchemyBonusModifier
	Exposed speechType as an additional 7th optional parameter for the JS TextMessage function, and the other optional parameters (speechTarget, speechTargetSerial, speechFontType) can now be supplied as -1 if one just want to use the default values. Supported speechTypes:
		TALK			= 0,	// normal system message
	    PROMPT			= 1,	// Display as system prompt
	    EMOTE			= 2,	// : text
	    SAY				= 3,	// character speaking
	    OBJ				= 4,	// at object
	    NOTHING			= 5,	// does not display
	    SYSTEM			= 6,	// text labelling an item
	    NOSCROLL		= 7,	// status msg, does not scroll
	    WHISPER			= 8,	// only those close can here
	    YELL			= 9,	// can be heard 2 screens away

24/03/2021 - Xuri
	Custom tags can now be set for multis in dfndata/house/house.dfn via the DFN tags CUSTOMSTRINGTAG and CUSTOMINTTAG, which can be read later for a placed multi via JS Item method GetTag( tagName ). Syntax is identical to custom tags in Item/NPC definitions:
		CUSTOMSTRINGTAG=tagName stringValue
		CUSTOMINTTAG=tagName intValue
	Definitions for multis in dfndata/house/house.dfn now support the COLOUR and COLOURLIST tags, which will (if present) be applied to new multis that are added in-game. Colour for existing multis can be modified via the 'tweak command.

23/03/2021 - Xuri (0.99.4d)
	Added new option in UOX.INI under [settings] section:
		MAPDIFFSENABLED=0/1 // If enabled, server will attempt to load diff files, and send "Enable Map-diff files" packet to client to also load these. Disabled by default.
	Server no longer loads map/statics diff files by default, nor does it send packet to client to request loading these files, as only client versions below 7.0.8.2 will actively load these files. Can be re-enabled with new UOX.INI setting mentioned above!
	Fixed incorrect ID for gargish dagger in CHandleCombat::getWeaponType()
	Added missing weapon entries in CHandleCombat::getWeaponType(): bladed whip, barbed whip, spiked whip, gargish talwar
	Fixed an issue that would show the end part of some tiledata names as garbled text instead of cutting off the text(!) at 20 characters
	Fixed an issue with advanced character creation template when using ClassicUO client, which sends a profession value of 255 instead of 0 when no profession template has been selected.
	Fixed an issue where clones of NPCs that can split in combat didn't get the NPC flag correctly set
	Guild titles are now removed for players who leave their guilds
	Enabled closing some hard-coded gump menus using right-click (howto, guild, towns, wholist, addmenu, craftmenu, info)
	Fixed an issue where adding base items using 'add [itemID] would sometimes get false positive hits from harditems.dfn, depending on the length of the itemID
	Fixed an issue where items added using 'add [itemID] would not get names applied properly from harditems.dfn
	Item/NPC DFN tag GET can now inherit a random parent by adding additional values separated by spaces. Syntax:
		GET=parent1 parent2 parent3 (etc)
	Fixed an issue where NPC backpacks would not have the max item capacity set properly
	Added new properties for CItem objects (also exposed as JS Item Properties):
		maxRange // max distance a ranged weapon can fire at (replaces ARCHERRANGE ini setting)
		baseRange // base distance throwing weapons (when implemented) can be used at
	Added support for new Item DFN tag that replaces global UOX.INI setting ARCHERRANGE:
		MAXRANGE=# 				// Specifies max range of ranged weapon
	Added support for new Item/NPC DFN tags to support randomizing elemental resistances:
		RESISTFIRE=#/# #		// Set NPC's poison resistance; fixed or random value
		RESISTCOLD=#/# #		// Set NPC's poison resistance; fixed or random value
		RESISTLIGHTNING=#/# # 	// Set NPC's poison resistance; fixed or random value
		RESISTPOISON=#/# #		// Set NPC's poison resistance; fixed or random value
	Added support for two new DFN tags in dfndata/race/races.dfn that can be used to allow/ban lists of equipment for specific races
		ALLOWEQUIPLIST=#
		BANEQUIPLIST=#
	Added support for new section in dfndata/race/races.dfn - [EQUIPLIST #], which can be used to define lists of equipment that is whitelisted or banned for specific races.
	Fixed a bug that would report incorrect weight in tooltips for Item/NPC spawner objects
	ScriptSections are now reapplied for items bought by players from NPC vendors
	Fixed an issue where players could drop an item on the ground and other players would still see the item after it was picked up, because of a failed distance check vs old location coordinates (in pack) instead of vs current location on ground
	Fixed a bug with players being able to use last-target macro to target objects picked up and held by other players on their cursor
	Updated all references to "devinelock" to be "divinelock" instead - this includes the name of the JS Item property
	Fixed house commands triggering (useless) targeting cursors for players onboard boats
	Changed default statcap in UOX.INI from 325 to 225
	Fixed a out-of-range error for players attempting to combine ore inside their own backpack
	Fixed various issues with distance checks and container checks when using/target objects
	Added optional 4th "hue" parameter to AddGump JS method
	Added JS Function to get total amount of accounts on server - GetAccountCount()
	Added JS Function to get total amount of players online - GetPlayerCount()
	onSwing JS Event can now trigger in scripts attached to items, not just items attached to characters
	Added some JS Functions to expose some hard-coded constants to JS scripts:
		BASEITEMSERIAL() // Base item serial
		INVALIDSERIAL() // Invalid serial
		INVALIDID() // Invalid ID
		INVALIDCOLOUR() // Invalid colour
	Fixed an issue where JS character property .colour would modify origSkin property instead of colour
	Fixed an issue where JS character property .guildTitle returned the name of the character instead of the guild title
	Character JS property .poison can now also be used to set a character's poisoned level, not just read it
	Exposed Item property to JS engine:
		.ac // armour class for item (0-128). Primarily used for setting race-restrictions for equippable items, i.e. race X cannot equip items of armour class Y.
		.def // defensive value of item (Physical resistance post-AoS, AR in older UO)
		// NOTE: The following properties don't actually do anything yet, but can still be used in custom JS scripts if desired
		.resistCold // Cold resistance of item 0-1000, where 1000 equals 100.0%
		.resistHeat // Heat/Fire resistance of item 0-1000, where 1000 equals 100.0%
		.resistLight // Light resistance of item 0-1000, where 1000 equals 100.0%
		.resistLightning // Energy/Lightning resistance of item 0-1000, where 1000 equals 100.0%
		.resistPoison // Poison resistance of item 0-1000, where 1000 equals 100.0%
		.resistRain // Rain resistance of item 0-1000, where 1000 equals 100.0%
		.resistSnow // Snow resistance of item 0-1000, where 1000 equals 100.0%
		.damageHeat // Weapon deals Heat/Fire elemental damage (true/false)
		.damageCold // Weapon deals Cold elemental damage (true/false)
		.damageLight // Weapon deals Light elemental damage (true/false)
		.damageLightning // Weapon deals Lightning elemental damage (true/false)
		.damagePoison // Weapon deals Poison elemental damage (true/false)
		.damageRain // Weapon deals Rain/Water elemental damage (true/false)
		.damageSnow // Weapon deals Snow/Ice elemental damage (true/false)
	Added new UOX.INI setting under [server] to enable/disable shard response to ConnectUO server polling (disabled by default)
	Sub-commands are no longer included when registering packets to be overloaded via RegisterPacket function, as that part was never fully implemented. Packet-hook scripts can be setup for specific packet IDs, but any sub-command checking will need to be done in the script itself
	JS Packet Method GetDWord() now uses JS_NewNumberValue instead of INT_TO_JSVAL to read from the socket buffer, to better handle large numbers, which could previously be returned with wrong values.
	JS Function CalcItemFromSer() now uses a JS_GetStringBytes() and str_value() combo instead of JSVAL_TO_INT() to read the data provided in the function argument. This allows JS scripts to provide item serials to the function directly without needing to split it into four parts first (though that still works)
	Fixed issue where JS properties for multis didn't always return correct values
	The 'set command can now be used to set the armour class of items ('set ac #)
	Reimplemented 'tweak command in JS engine (js/commands/targeting/tweak.js) - can be used to view and modify properties of characters, character skills, items, multis and regions (target ground)
	Added placeholder packet-hook script (js/server/network/0xf1_connectUoServerPoll.js) to handle responses to ConnectUO server polling. By default this script does nothing, but serves as a placeholder for drop-in replacement scripts generated specifically for each shard by the ConnectUO service.
	Updated some commands to support an alternate STATIC keyword (can also be ommitted) to add base items:
		'add static itemID
		'tile static itemID
	Updated some commands with support for randomization. Provided itemID will be randomized based on provided rndValue:
		/js/commands/targeting/add.js:
			'add itemID rndValue
		cmdtable.cpp and targeting.cpp:
			'tile itemID rndValue
			'tile itemID x1 x2 y1 y2 z rndValue
	Updated js/commands/custom/repeatingcmds.js to support 'm delete as an alias for 'rremove
	Added 'props as an alias for the 'tweak command
	Added 'teleport as an alias for the 'tele command (js/commands/targeting/tele.js)
	Added 'shavehair and 'shavebeard as aliases for 'kill hair and 'kill beard (js/commands/targeting/kill.js)
	Added 'noinvul and 'mortal aliases for the 'invul false command (js/commands/custom/misc-cmds.js)
	Added 'immortal and 'invul (without parameter) as aliases for the 'invul true command
	Added 'bringtopack as an alias of 'movetobag command (js/commands/targeting/movetobag.js)
	Updated check for cancelling of target cursor in various JS scripts
	Minor updates to various JS scripts
	Fixed issue where some item definitions in dfndata/harditems/harditems.dfn and dfndata/items/building/lighting.dfn used comma instead of space as delimiter for the VALUE tag, which thus never got applied
	Updated all NPC definitions to let NPCs spawn facing in random directions

19/11/2020 - Xuri (0.99.4c)
	Exposed Item properties to JS Engine:
		.dexterity // dexterity required to equip item
		.intelligence // intelligence required to equip item
	Fixed issue where changing worldnumber of an item via tweak command would not remove the item from sight of nearby players in the original location
	Fixed issue where characters teleporting to a new world would sometimes not be removed from sight of nearby players in the original location
	Fixed issue where being released from jail cells to a location in a different world would not send map change packet
	Fixed issue where changing worldnumber of a player character via tweak command would not send map change packet
	Fixed issue where teleporting GM/Counselor to a player's location when responding to a help request would not send map change packet
	Fixed issue where recalling off a recall rune in a different world would not send map change packet
	Fixed issue where using travel menu or 'go place # command would not send map change packet when going to a location in a different world
	When marking recall runes, they will now get a hue reflecting the facet they were marked in (UOX3/js/commands/targeting/magic.js)
	Tooltips for recall runes will now show the name of the facet they were marked in, with facet names being pulled from entries 1975 to 1980 in the dictionary files

16/11/2020 - Xuri
	Fixed an issue with the 'tweak command that would set an item's movable property instead of type if used on non-spawnerobjects
	Fixed an issue with the 'tweak command that would trigger the wrong gump dialog when attempting to set an item's name, name2 and creator properties
	Fixed an issue with the 'tweak command where clicking ok in gump dialog with no value entered would reset chosen property to default value

15/11/2020 - Xuri
	Fixed a compiler issue with GCC versions below 9.x in various Linux distros, by including iomanip library in UOPInterface.cpp and adding -lstdc++fs to the Makefile

15/11/2020 - Xuri (0.99.4b)
	Fixed an issue with NPC trainers where they would list incorrectly the available skills players could train
	Fixed an issue where house key could not be used to open locked doors if key was not contained in root of player's backpack (UOX3/js/item/doors.js)
	When NPCs in wanderTypes WT_BOX, WT_CIRCLE or WT_FREE are blocked too many times from moving by other characters, they will now pause for 60 seconds before attempting to move again
	Exposed .oldWanderType NPC property to JS engine, and updated 'set command to also update this property when manually changing NPC wanderType
	Reduced max attempts at calculating path for NPCs in wanderTypes WT_BOX, WT_CIRCLE or WT_FREE to 25 steps, unless they are evading and attempting to move back into their original wander box/circle
	NPCs who enter "evasion" state because they are unable to find a valid path to an attacker will now have their health reset to maximum, to prevent an exploit to take down any NPCs without risk of taking any damage in return
	JS Methods WalkTo() and RunTo() now actually make use of the provided maxSteps parameter when advanced pathfinding is enabled; previously it would default to 500 steps.
	Added new JS event that triggers when an NPC enters evasion state in combat due to being unable to reach their target
		onEnterEvadeState( mNPC, enemyChar ) // enemyChar would be the character they are unable to reach
	Added a new command - 'cure - that can cure a targeted character of any poisons (UOX3/js/commands/targeting/stats.js)
	NPCs of same race will no longer attack one another if hit by each other's AoE spells
	Fixed an issue with NPC pathfinding in combat that prevented ranged NPCs from closing in on their targets when losing LoS
	Spellcasting NPCs that cannot pathfind all the way to their target in combat will now attempt to pathfind to an area near the target instead
	Fixed an issue that prevented tiller-men from being correctly associated with their boats after a server restart
	Fixed an issue with combat where ranged characters could shoot bows further than the allowed max range for archery specified in uox.ini

14/11/2020 - Xuri (0.99.4a)
	Improved JS NPC methods WalkTo()/RunTo() so path is recalculated when blocked by other characters after original calculation took place. Only applies while advanced pathfinding is enabled in uox.ini.
	Added new JS event that triggers when pathfinding comes to an end after using WalkTo/RunTo JS methods:
		onPathfindEnd( mNPC, pathfindResult ) // pathfindResult returns result of pathfinding (-1 = failure, 0 = partial success, 1 = success)
	Disallowed invulnerable players/admins from attacking other characters, with a complimentary system message explaining why they can't attack
	Fixed a bug where NPC's original npvWander mode could get overwritten if multiple pathfinding actions overlapped

13/11/2020 - Xuri
	Fixed an edge case with 'time command that would not display time correctly (UOX3/js/commands/time.js)
	Updated UseDoor() JS function - now called UseItem() instead, and now supports both socket and character as first argument, to allow NPC use.

08/11/2020 - Xuri (0.99.4)
	Updated version number and release changelog

08/11/2020 - Xuri (0.99.4[RC5])
	Fixed an issue with books where server could get stuck in an infinite loop if number of lines per page was higher than 8. Now capped at 8 lines per page.
	Renamed item type enum IT_READABLEBOOK to IT_BOOK, since it's the item type used by both readable and writeable books.
	Changed ANIMALATTACKCHANCE to use a scale of 1 to 1000 instead of 1 to 100, for additional granularity in setting the chance for animals to get attacked by monsters. An INI value of 15 now translates as 1.5% chance (per NPC AI cycle!) instead of the previous 15%
	Removed new GetEnvironment() function and expanded on the use of the existing OS_STR define in Config.h
	Updated fireworks wand (IT_FIREWORKSWAND) so effects no longer play permanently in ClassicUO client
	Fixed an issue with converting a house from public to private while there were player vendors in the house
	Ported player vendor deeds and placement of player vendors to JS (UOX3/js/server/house/playerVendorDeed.js) and added checks to make sure player is in a house they own, that can hold more player vendors, and that they are trying to add the vendor in a location that's not blocking any doors.
	Partially ported guildstone deed functionality to JS (UOX3/js/item/guildstone.js) and added various additional checks to make sure player is in a house they own, they're not already in a guild, no other guildstones exist in the house and they're not trying to place it in a location that blocks any doors. Main guild creation code is still hardcoded, though.
	Removed some unused item types that have been marked as candidates for deletion for over 15 years (IT_CHAOSGATEOPENER, IT_CHAOSGATE, IT_GUILLOTINEANIM, IT_TRAININGDUMMYANIM)!
	Updated UOX3 documentation with complete list of item types, and item layers, in addition to other small additions.
	Fixed an issue with advanced pathfinding where NPCs in some cases would stop 1 tile before reaching the target location
	Fixed an issue where no crafting resources would ever be lost if failing to craft an item that only required 1 of a given crafting resource
	Fixed an issue with pathfinding that could cause NPCs to queue up in long rows when attempting to reach the same target in combat when advanced pathfinding was disabled
	Added functionality to allow guild masters to move guildstones by transforming these into portable stones that can be used to place the guildstones in new locations
	Updated timestamp for packet logs to include milliseconds for greater granularity
	Added missing guildstone.js and playerVendorDeed.js
	Another attempt at fixing a crash on shutdowns caused by encountering fatal errors
	Updated JS Documentation

05/11/2020 - Xuri (0.99.4[RC4])
	Fixed a server crash caused by container tooltip updates being attempted sent to invalid sockets in PlaceItem() function of items.cpp

04/11/2020 - Xuri (0.99.4[RC3])
	Fixed an issue with tradetimestamp for houses
	Fixed an issue with 'teleport and 'telestuff commands that could cause character to end up outside of map when using ClassicUO client
	Updated JS command set to support setting language for player characters directly instead of getting it from UO client - though it will still attempt to do this if selected language is ZERO. Useful for testing multiple languages, and also opens up for possibility of letting players/GMs choose a language manually!
	Updated a bunch of .js files to use the proper .language socket property instead of the erroneous .Language!

04/11/2020 - Xuri (0.99.4[RC2])
	Fixed some a couple of issues with compiling on Linux.
	Committed missing js files for houses to repository!

04/11/2020 - Xuri (0.99.4[RC])
	Updated JS SysMessage function to accept up to 10 extra, optional arguments, which can be used with dictionary messages that require additional parameters like %s or %i
	Added new type of house privilege in cMultiObj.cpp to keep track of friends of the multi - HOUSEPRIV_FRIEND - which is stored during worldsaves as one or more Friend=<player serial> tags in house.wsc
	Added new type of house privilege in cMultiObj.cpp to keep track of guests of the multi - HOUSEPRIV_GUEST - which is stored during worldsaves as one or more Guest=<player serial> tags in house.wsc
	When items are created for houses upon house placement, a reference to the multi's serial is now stored in the house sign's MORE property to allow easier tracking of which house a particular sign belongs to
	Added tracking of new, persistent properties for houses via cMultiObj.cpp/h:
		lockdowns, secure containers, vendors, guests, friends, owners, ban location, public status, number of visits, timestamps
	Added a multitude of  new methods in cMultiObj.cpp/h to assist in improving the functionality of houses
	Added new tags for houses in house.dfn (default values applied if tag not specified):
		MAXSECURECONTAINERS=4 - Max amount of secure containers allowed in a multi
		MAXLOCKDOWNS=256 - Max amount of lockdowns allowed in a multi
		MAXVENDORS=10 - Max amount of vendors allowed in a multi
		MAXBANS=50 - Max amount of bans in a multi's ban list
		MAXFRIENDS=50 - Max amount of friends in a multi's friend list
		MAXGUESTS=50 - Max amount of guests in a multi's guest list
		MAXOWNERS=8 - Max amount of owners and co-owners in a multi's owner list
		MAXTRASHCONTAINERS=1 - Max amount of trash containers allowed in multi
		SCRIPT=<scriptID> - Assign a JS script-ID directly to a multi
		FRONTDOOR - indicates that a door is the front door of a house. Cannot be locked in public houses!
		INTERIORDOOR - indicates that a door is an interior door of a house. Can be locked in public houses.
		BANX - Location X offset for multi's ban location, if not used, will try to use SE corner of multi instead
		BANY - Location Y offset for multi's ban location, if not used, will try to use SE corner of multi instead
	Added JS Event:
		onHouseCommand( tSock, multiObj, cmdID ) - For handling spoken house commands via JS scripts attached to multi.
	Updated JS Events:
		onEntrance() - can now trigger both for multi being entered and/or object entering
		onLeaving() - can now trigger both for multi being left and/or object entering
		onSpeech() - can now also trigger for items (in addition to chars) with event & script attached, if UOX.INI setting ITEMSDETECTSPEECH is enabled
	Added JS Multi methods:
		.IsBoat() - Returns whether the item (or multi) is a boat
		.IsOwner( playerToCheck ) - Returns whether a player is the owner of a multi
		.IsOnOwnerList( playerToCheck ) - Returns whether a player is on the (co-)owner list of a multi
		.IsOnFriendList( playerToCheck ) - Returns whether a player is on the friend list of a multi
		.IsOnGuestList( playerToCheck ) - Returns whether a player is on the guest list of a multi
		.IsOnBanList( playerToCheck ) - Returns whether a player is on the ban list of a multi
		.AddToFriendList( playertoAdd ) - Adds player to the friend list of a multi
		.RemoveFromFriendList( playertoRemove ) - Removes player from the friend list of a multi
		.AddToGuestList( playertoAdd ) - Adds player to the guest list of a multi
		.RemoveFromGuestList( playertoRemove ) - Removes player from the guest list of a multi
		.ClearOwnerList() - Clears all entries from a multi's (co-)owner list
		.ClearFriendList() - Clears all entries from a multi's friend list
		.ClearGuestList() - Clears all entries from a multi's guest list
		.ClearBanList() - Clears all entries from a multi's ban list
		.SecureContainer( itemToSecure ) - Secures a container in a multi
		.UnsecureContainer( itemToUnsecure ) - Unsecures a container in a multi
		.IsSecureContainer( itemToCheck ) - Checks if specified item is a secure container in a multi
		.LockDownItem( itemToLockDown) - Locks down an item in a multi
		.ReleaseItem( itemToRelease ) - Releases a locked down item in a multi
		.KillKeys() - Deletes ALL keys associated with a multi
		.AddTrashCont( itemToAdd ) - Add trash container to multi's list of trash containers
		.RemoveTrashCont( itemToRemove ) - Remove trash container from multi's list of trash containers
	Added JS Item (Multi only) properties:
		.lockdowns - Get the number of lockdowns in a multi
		.maxLockdowns - Get/Set the max number of lockdowns allowed in a multi
		.secureContainers - Get the number of secure containers in a multi
		.maxSecureContainers - Get/Set the max number of secure containers allowed in a multi
		.trashContainers - Get the number of trash containers in a multi
		.maxTrashContainers - Get/Set the max number of trash containers allowed in a multi
		.friends - Get the number of friends in a multi's friend list
		.maxFriends - Get/Set the max number of friends allowed in a multi's friend list
		.guests - Get the number of guests in a multi's guest list
		.maxGuests - Get/Set the max number of guests allowed in a multi's guest list
		.owners - Get the number of owners in a multi's owner list
		.maxOwners - Get/Set the max number of owners allowed in a multi's owner list
		.bans - Get the number of banned players in a multi's ban list
		.maxBans - Get/Set the max number of banned players allowed in a multi's ban list
		.vendors - Get the number of player vendors in a multi
		.maxVendors - Get the max number of player vendors allowed in a multi
		.deed - Get the item sectionID for deed used to place multi
		.isPublic - Get/Set the private/public state of a multi
		.buildTimestamp - Get the timestamp for when the house was originally placed
		.tradeTimestamp - Get the timestamp for when the house was last traded to another player
		.banX - Get/Set the ban location X offset for the multi
		.banY - Get/Set the ban location Y offset for the multi
	Added JS Character properties:
		.multi = Get/Set the multi object the character is in
		.accountNum = Get the account number the character belongs to
		.housesOwned = Get a count of houses owned by the character
		.housesCoOwned = Get a count of houses co-owned by the character
	Updated JS cBaseObject Methods .FirstItem(), .NextItem() and .FinishedItems() to also support iterating through items in multis
	Updated JS multi Methods .FirstChar(), .NextChar() and .FinishedChars() to support an additional parameter to specify what kind of characters to loop through:
		"default" or no parameter - all characters inside the multi
		"owner" - players on multi's owner list
		"friend" - players on multi's friend list
		"guest" - players on multi's guest list
		"banned" - players on multi's ban list
	Added new INI tags to a new section of uox.ini called [houses]
		DECAYTIMERINHOUSE=3600 // Decay timer in seconds for non-locked down items inside houses
		PROTECTPRIVATEHOUSES=1 // Toggles whether private houses will automatically boot unauthorized visitors (1) or not (0)
		TRACKHOUSESPERACCOUNT=1 // Toggles whether to track (and restrict) house ownership per account (1) or per character (0)
		MAXHOUSESOWNABLE=1 // Specifies the max amount of houses a player can own per account/char, depending on how house ownership is tracked
		MAXHOUSESCOOWNABLE=10 // Specifies the max amount of houses a player can co-own per character
		CANOWNANDCOOWNHOUSES=1 // Toggles whether players can own and co-own houses at the same time
		COOWNHOUSESONSAMEACCOUNT=1 // Toggles whether characters on same account as house owner will be treated as co-owners
	Added new INI tags in [settings] section of uox.ini:
		ITEMSDETECTSPEECH=0 // If enabled, server will search for nearby items with onSpeech JS event running whenever a character speaks. Disabled by default.
		MAXPLAYERPACKITEMS=125 // Defines max item capacity for player (and NPC) backpacks. Defaults to 125.
	Moved most of the existing house functionality to JS and expanded upon it to reach feature parity with houses in regular UO around Publish 15/16, with various extras thrown in for good measure and all functionality being customizable:
		js/server/house/house.js (15000) - handles detection of house commands and characters entering/leaving houses
		js/server/house/houseSign.js (15001) - contains and handles all house-related gumps/menus and what is shown when players interact with house sign
		js/server/house/houseCommands.js (15002) - handles functionality of house commands and other functionality such as transfer of ownership, demolishing house, etc.
		js/server/house/houseDeed.js (15003) - handles initial rules that allow/disallow placement of additional houses for players
		All house-related menus now fully handled through JS
		All house commands and other functionality now fully handled through JS
		Removed redundant hard-coded house functionality
		Implemented Co-owners, friends, guests for houses, with access rules in place for entry, lockdowns, house commands, etc.
		Implemented Private and Public houses
		Implemented Secure Containers and Trash Barrels
		Definable max lockdowns, secure containers, player vendors, bans, friends, guests, owners, trash containers and more - per house type
		JS scripts can now be attached directly to houses
		Doors in houses can be marked as front doors or interior doors, and will be treated differently with regards to private and public houses
		Added new item to dfndata/items/containers/misc.dfn - [trashbarrel]
		Added new JS script (js/items/trashbarrel.js) with trash barrel functionality for houses. Trash barrels that are marked as secure containers are only accessible by owners, co-owners and friends of the house. Various options available at top of script.
		Updated js/items/axe.js to support chopping up trash barrels and house add-ons in houses owned by the player
		Fixed an issue with house doors being left behind after demolishing houses while their doors were open
		Fixed an issue where GMs could be banned from player houses
		Added Line of Sight checks to speech, to give players some privacy in their own homes
		Updated house placement code to more accurately check for other multis, dynamic and static objects when placing houses; now requires free space around each house that cannot be blocked by other houses or items that can block player movement, and disallows placement of houses on roads
		Updated house placement code to move characters blocking house placement to SE corner of the house
		Updated house placement code to disallow placing houses in guarded regions, or in dungeons
		Added new DFN tag for regions to enable/disable player houses in specific regions: HOUSING=0/1
		Added new region (247) that covers path to Valley of Eodon in Felucca
		Added new region (248) that covers Valley of Eodon in Ter-Mur, with player housing disabled
		Added new region (249) that covers entire T2A lands, with player housing disabled
		Updated SPACEX and SPACEY values for all houses in dfndata/house/house.dfn to match updated house placement code
		Added new JS property to Regions that can be used to determine or change state of player housing in a region: .canPlaceHouse()
		Updated rules for usage of dye tubs to dye locked down items; now only house owners or co-owners may dye locked down items
		Updated rules for usage of the following locked down items in a house, which are now only usable by house owners and co-owners
			Dyes, Guildstone Deeds, Recall Runes (renaming), Rename Deeds, Townstone Deeds, House Deeds, Boat Models, Player Vendor Deeds, Ore, Hair Dye
		Updated rules for usage of the following locked down items in a house, which are now only usable by house owners, co-owners	and friends:
			Keys, Dye Tubs, Magic Scrolls, Fireworks Wands, Magic Wands, Smithing Tools, Mining Tools, Fishing Poles
		Updated item lockdown rules to allow locking down (and releasing) items in a container as long as the container is locked down, and to only allow releasing a locked down container if it's empty of locked down items
		Updated item lockdown rules to only allow locking down movement-blocking items further than 2 tiles away from doors
		Updated rules for releasing items in houses - now the house owner can release any locked down items, co-owners can release items locked down by themselves or by friends, while friends can release only items locked down by themselves
		Added some feedback to player about why their attempted house placement failed
		Items added by GMs directly into multis will now decay based on the house-specific decay timer instead of the regular one
		Fixed an issue that could cause items to almost instantly decay after being released from lockdown in a house
		Placing house add-ons now properly takes into account SPACEX and SPACEY values when checking if they can fit in selected area of houses
		Re-added SPACEX and SPACEY values for Pentagram and Loom house add-ons
		House add-ons can now be converted back into house add-on deeds by chopping them with an axe
		Added new item type - IT_HOUSEADDON (201) - used by house add-ons placed in player houses
		Fixed a bug where keys would stop working after being added to a keyring, and would turn into blank keys upon release from the keyring
		Added visitor count for public player houses, which keeps track of how many visits a public house has received, with each player counted max 1 time every 24 hours
		Fixed an issue with FindPlayersInOldVisrange() where it didn't take into account that players could see buildings further away than the standard update range. This could cause players to see ghost images of buildings if they were at the "right" distance when the building was being demolished
		Added NODECAY tag to all signs and doors in dfndata/house/house.dfn
		Added FRONTDOOR or INTERIORDOOR (as appropriate) to all doors in dfndata/house/house.dfn
		Added BANX and BANY to specify ban location for some houses in dfndata/house/house.dfn instead of relying on finding SE corner automatically
		Implemented strongboxes (js/server/house/strongbox.js) for co-owners of a house, which can be placed with the house command "i wish to place a strongbox". Max capacity is 25 items
	Updated 'REMOVE command to take an optional parameter - itemID. If supplied, the command will remove all items with this itemID from a targeted container
	Fixed a bug when checking if dynamic items were blocking valid spawn locations for NPCs, some function arguments were in the wrong order!
	Improved code that finds valid spawn locations for items and NPCs spawned via spawn regions. As server gradually builds up lists of valid spawn locations per region over time, it will start using these lists more often, rather than always look for brand new spawn locations.
	Fixed a bug with CMulHandler::CheckStaticFlag() that prevented NPCs from spawning inside buildings with no static floors!
	Fixed an issue with repeating commands that prevented GMs from being able to cancel them when using the ClassicUO client
	Exposed character property .accountNum to JS engine
	Extended CDataList class to include a Clear() method for clearing lists
	Updated JS File method .Open() to support an optional, third argument - subFolderName - that defines in which sub-folder of UOX3/shared/ to store/look for a file. If no third argument is supplied, UOX3 will default to using the shared folder itself.
	Updated JS File method .Length() to return a value of -1 for files that don't exist
	Added new code function, exposed to JS engine with same parameters, which simply checks if a given tile ID has a specific flag
		bool CheckTileFlag( UI16 itemID, TILEFLAG flagToCheck )
	Added JS function used to find the root container of an item (if any)
		FindRootContainer( itemSerial )
		FindRootContainer( item )
	Added new JS function that allows deleting files from UOX3/shared/ folder or subfolders of shared folder. If no subFolderName is provided, looks for file directly in shared folder itself. Restrictions on file- and folder-names apply.
		bool DeleteFile( fileName, subFolderName )
	Added new JS functions for checking if a specific client or server feature is enabled. See documentation for full list of client/server features.
		GetClientFeature( bitNum ) // Returns true if specified client feature is enabled on server
		GetServerFeature( bitNum ) // Returns true if specified server feature is enabled on server
	Added new JS function for returning the value of almost any server setting from UOX.INI
		GetServerSetting( settingNameInDoubleQuotes )
	Updated JS function DoesDynamicBlock() with two new parameters - checkOnlyMultis and checkOnlyNonMultis
	Updated JS function DoesMapBlock() with two new parameters - checkMultiPlacement and checkForRoad
	Fixed an issue where a LoS check would prevent players from accessing containers in their own backpack
	Added new functions in findfuncs.cpp to make it easier to find items near another object or location:
		findNearbyItems( object, distance )
		findNearbyItems( x, y, worldNumber, instanceID, distance )
	Added new Item property - maxItems - used by containers to determine their max item capacity
	Added new Item property - totalItemCount - used to get total item count in a container (including sub-containers)
	Added check for max item capacity when creating new items that are added to a character's backpack - items will be created below character's feet if backpack is full!
	Added new DFN tag for items, used by containers to determine item capacity for a given container:
		MAXITEMS=# // 125 is the default for all containers if not set
	Added new JS Item properties:
		.maxItems // gets/sets item capacity for a given container
		.totalItemCount // gets total item count in a container, including sub-containers
	Updated item tooltips for containers to show accurate total item count, as well as to display max item capacity
	Fixed a bug where picking up items from a non-locked down pile of items on the floor inside a multi could cause the remaining pile to be seen as no longer inside the multi, disallowing locking it back down and causing it to decay based on regular decay timer instead of house-specific one
	Updated JS command set to allow setting poison-level on items ('set poison #) and hunger-level on characters ('set hunger #)
	Fixed an issue with js/item/food.js that prevented poisoned food from poisoning characters when eaten
	Fixed an issue with js/skill/poisoning.js that prevented players from poisoning food!
	Updated various JS scripts and hardcoded targeting functions to disallow the targeting of locked down resources using skills and tools
	Updated JS Method TextMessage() to support three extra, optional parameters. Note that if one optional parameter is included, all preceding optional parameters are also required!
		speechTarget - What kind of target is this message intended for?
			0 - Only visible for sender and receiver of message
			1 - Visible to all players in range
			2 - Visible to all NPCs and players in range
			3 - Visible to all PCs everywhere + NPCs in range
			4 - Visible to all PCs everywhere (broadcast)
			5 - Only visible for the receiver of the message
		speechTargetSerial - The serial of the receiver of the message, used if speechTarget is 0 or 5
		speechFontType - The type of font to display the text in. Defaults to normal.
		    0 - Bold
		    1 - Normal with shadow
		    2 - Bold with shadow
		    3 - Normal
		    4 - Gothic
		    5 - Italic
		    6 - Small, dark
		    7 - Colourful
		    8 - Runic (only works with CAPS)
		    9 - Small, light
	Added timestamp to worldsaves in console, to make it easier to see when a particular world-save was done
	Added info about compiler/environment displayed at the top of the UOX3 console during startup
	Updated dictionary files with new messages primarily related to housing

19/10/2020 - Xuri
	Fixed an issue where non-GM characters could not open their own backpacks or take items from other containers or corpses due to some flawed comparisons of worldnumber/instanceID between character and items

14/10/2020 - Xuri
	Fixed an issue with validation of DFN tags for items and NPCs being loaded from scripts
	Fixed UOX3 not writing out names of item/NPC DFN sections with invalid data in tags
	Gave NPCs [f_murderer-archmage] and [m_murderer-archmage] some dexterity

05/10/2020 - Xuri
	Updated JS item properties MORE, MOREX, MOREY, MOREZ and SERIAL, and character property SERIAL, to pass values to JS scripts using JS_NewNumberValue() instead of INT_TO_JSVAL if the property value cannot fit inside JSVAL (checked with INT_FITS_IN_JSVAL)
	Added support in CResponse.cpp for client trigger word for securing containers in houses - TW_HOUSESECURE
	Updated CMulHandler::CheckStaticFlag() to match with statics that cover/extend across the specified Z coordinate, not just ones that have the same base Z level
	Updated CMulHandler::DoesMapBlock() to not deem map tiles as blocking if they are more than 16 Z (height of a character) higher than the specified Z coordinate to check
	Exposed method for finding corners of a multi to JS engine:
		.GetMultiCorner( cornerID ) - Gets coordinates for specified corner of multi (0 = NW, 1 = NE, 2 = SW, 3 = SE)
	Exposed various functions related to map, statics and multis to JS engine:
		CalcMultiFromSer( serial ) - Find a multi from a provided serial
		GetMapElevation( x, y, z, world) - Returns the map elevation at specified coordinates
		IsInBuilding( x, y, z, world, instance, checkHeight ) - Returns true if the specified location is inside a static building (underneath static items), or if player is inside a multi. If the checkHeight argument is true, player is only deemed inside a multi if there are multi-items above the player's head. If player is in a courtyard/on a rooftop, they will be deemed to be NOT in the building. checkHeight is not used for the static part of the function.
		CheckStaticFlag( x, y, z, world, tileFlagID ) - Checks to see if any statics at given coordinates has specified tile flag
		DoesStaticBlock( x, y, z, world, checkWater ) - Checks if statics at/above given location blocks characters
		DoesDynamicBlock( x, y, z, world, instance, checkWater, waterWalk ) - Checks if dynamics at/above given location blocks characters
		DoesMapBlock( x, y, z, world, checkWater, waterWalk ) - Checks if map tile at/above given location blocks characters

05/10/2020 - Xuri
	Updated warning messages printed in UOX3 when attempting to inherit an invalid/non-existent item or character script entry using the GET tag, to also include the name of the script entry being inherited
	Added new tag for ore types in skills.dfn that determines default chance of finding a particular ore (can be overridden via OREPREFS tag in regions.dfn):
		ORECHANCE - takes a value from 0 to 1000, where 1000 equals 100.0%
	Added default ORECHANCE values for each ore type in skills.dfn, based on estimated chance of finding these ore types around the era of Publish 15/16 in Official UO
	OREPREFS tag in regions.dfn now uses [sectionName] of ore type from skills.dfn instead of actual name of the ore
	OREPREFS tag in regions.dfn now uses comma as separator instead of space. New syntax: OREPREFS=[oreType,oreChance]
	Added chance of getting different ore sizes when mining
	Added functionality to combine and transform larger ores into smaller ores by double-clicking some ore and targeting other ore instead of a forge
	Added functionality to return different amount of ingots when smelting ore, based on the size of ore being melted
	Fixed a bug introduced in 0.99.3 that would set invalid values for certain properties on newly created items and NPCs if the tag for that property in the DFNs accepted random values, but only supplied one value. Example: Amount=1, vs Amount=10 20. As part of the fix for this, added sanity checking for all item and character DFN tags that accept two values.
	Fixed weapon damage not appearing in status gump
	Fixed a spidermonkey compilation issue with xcode 12.0.1/Apple clang v 12.0.0 (clang-1200.0.32.2) (punt)
	Added missing layer tag to fishing pole items in DFNs (dragon slayer)
	Added missing item definitions for wooden kite shields (0x1b78 and 0x1b79) based on coloured ingots
	Added house addon deeds for bear rugs (dragon slayer)
	Updated dictionary files with various new strings related to mining

16/09/2020 - Xuri (0.99.3a)
	Undid dictionary rename from ENG to ENU and FRE to FRA; these are not actual language codes, but groups of language codes - ENU covers all English language codes, FRA covers all French ones.
	Refined build notes
	Updated Debug Information Format for Debug x64 platform in VS project properties to Program Database for Edit and Continue
	Minor fix for a half-broken system (automatic adding of items to add-menu) that needs to be revamped or removed
	Commented out some thread-locking code that was causing UOX3 to crash under certain circumstances
	Fixed a few cases of threads sleeping for microseconds instead of milliseconds
	Replaced all calls to UOXSleep with direct call to std::this_thread::sleep_for(), and removed UOXSleep function from funcdecl.h
	Fixed an issue with "Gold" ore/ingot type, which was mislabelled as "Golden" in the ORE_LIST section of skills.dfn
	Fixed an issue where crafting skills might consume the wrong resource if additional resources of the same ID but different color were present in player's backpack
	Improved AmbientFootsteps feature so footstep sounds are played more in tune with character movement
	AmbientFootsteps now also play for NPC movement
	Changed how code handles randomizing between MINTIME and MAXTIME values from region spawners; now multiplies values by 60 (to get seconds) before randomizing, instead of after, to make use of full range of seconds between the values (which are in minutes)
	Adjusted default global NPC movement speeds in [speedup} section of uox.ini to use less extreme values
	Added a DEBUGMOVEMULTIPLIER define in cChar.cpp used to multiply NPC movement delays by the specified value (1.75 by default) when running UOX3 in debug mode, due to reduced server performance in debug mode
	Documentation updates:
		Added section on DFN tags for Character, Item, Region, SpawnRegion and Weather DFNs.
		Added Feature documentation for Mining and customizable ores
		Added More details in feature documentation for Spawn Regions
		Updated feature documentation for Dictionaries
		Added more details in UOX3 history section

10/09/2020 - Xuri (0.99.3)
	Updated CMakeSettings.json to include options for 64-bit Debug/Release builds
	Updated build notes in documentation and readme
	Added version info and other details to uox3.rc
	Minor updates to JS docs and UOX3DFNTags
	Renamed FRE and ENG dictionary file extensions to FRA and ENU

09/09/2020 - Xuri (0.99.3-RC3)
	Updated VS Solutions/Projects for UOX3 and SpiderMonkey to support compiling 64-bit version of UOX3 for Windows 8/10
	Fixed an issue in cConsole.cpp that prevented compiling 64bit version of UOX3 for Windows

08/09/2020 - Xuri (0.99.3-RC2)
	Fixed grammar mistake in automake.sh that prevented compiling SpiderMonkey on MacOS (Xuri)
	Updated readme with extended compiling details in spoiler tags (Xuri)
	Undid static cast in jsapi.h (Xuri)
	Fixed issue with two different versions of cPlayerAction.cpp with different case in name causing issues (Xuri)
	The UOX3/shared/ directory will now be created automatically on startup if it doesn't already exist (punt)
	Updated README.md and UOX3 documentation with improved instructions for installing necessary build tools on Linux and how to copy files to working directory after compiling. (Xuri)
	Moved automake.sh from source directory to project root, and made it copy binary to project root directory after compiling (Xuri)

07/09/2020 - Xuri (0.99.3-RC1)
	Added new Makefile that handles compiling UOX3 and Spidermonkey on both Linux and MacOS (punt)
	Added VS solution (SpiderMonkey.sln) and VC++ project files for compiling SpiderMonkey on Windows (Xuri)
	Updated SpiderMonkey from v1.6.0 to v1.7.0
	Added optimization flag -O2 for release build in CMakeLists.txt in project root (Xuri)
	Added StringUtility file with general common string manipulation functions (punt)
	Updated RandomNum function to use a "seedless" random number generator from C++11 instead of the old C rand() function. (punt)
	Overall code cleanup to remove/replace platform-dependent code (punt)
	Replaced potentially unsafe usage of C string stuff like sprintf, vsprintf, vsnprintf, strncat, strcpy and strlen throughout the code with calls to a format() function containing only a single, safe use of vsnprintf, ensuring there's a single place of failure if there's anything to fix and and making it easy to potentially replace this with std::format from C++20 when the time comes. (punt)
	Replaced usage of char in many places with std::string (punt)
	Started process of replacing UString usage with functions provided through StringUtility instead (punt)
	Replaced platform specific fileIO handling in Windows/Linux with cross-platform C++17 standard std::filesystem (punt)
	Replaced platform specific time handling by using cross-platform chrono library (punt)
	Removed UOX namespace to reduce complexity (punt)
	Elimitated template code approach to singletons for more modern c++ constructs, removing dependices in the process (punt)
	Removed ODBC support; it hasn't been touched since the initial implementation in 2008, and there is a lack of someone to maintain the code. (punt)
	Removed some platform specific files like uoxlinux.h, which is no longer required (punt)
	Removed legacy crash protection code, and removed support for cluox (punt)
	Removed legacy "support" for Borland compiler (punt)
	Removed legacy VC++ 6 Workspace/Project files, VS2005 Solution/Project files, as these are no longer supported (Xuri)
	Removed legacy BUILD folder with outdated compilation instructions (Xuri)
	Removed old Changelog file (merged into Changelog.txt) (Xuri)
	Fixed a pointer bug for items in multis on world load (punt)
	Fixed a dictionary related issue that caused segmentation faults on Linux/MacOS (punt)
	Fixed an issue with callbacks to JS scripts that caused segmentation faults on Linux/MacOS (punt)
	Paths in uox.ini should now load properly on all platforms regardless of whether those paths use slashes or backslashes, and whether or not they end in a slash/backslash. (punt)
	Moved to c++17 style of threading, and got rid of threadsafeobject.cpp/h (punt)
	Replaced parsing of UOX.INI tags with a system that's more easily maintainable (punt)
	Added some new commands to js/commands/custom/misc-cmd.js (Xuri)
		cont		// Targeted item will be made a container, set to nondecay and movable 2
		endfight	// Targeted character (and character being fought) will stop fighting
		getmulti	// Get multiObject for targeted item
		finditem	// Find item at layer X
		movespeed	// Set movement speed of target player (0x0 Normal, 0x1 Mounted, 0x2 Slow (walk only), 0x3 Hybrid ("jog"?), 0x4 Frozen)
	Added new HTML based documentation in docs folder, and removed many old legacy docs that are either incorporated into this document already or no longer relevant for the current UOX3 version (Xuri)

26/08/2020 - Xuri
	Misc code cleanup to reduce amount of warnings and increase cross-platform compatibility
	Removed Platform.h from project, select portions moved to Config.h

24/08/2020 - Xuri (0.99.2p)
	Improvements to handling of UOP format; now takes a cleaner approach, loads files faster (punt)
	Fixed a issue in JS/COMMANDS/TARGETING/add.js that would display 'undefined' in system message when adding raw/base items
	Updated default jail time in JS/COMMANDS/TARGETING/jail.js (and in code) from 100000 seconds to 86400 seconds (24 hours)
	All references in code and scripts to "midi" changed to "music", to reflect fact that modern clients don't actually even have midi files. This change covers both GM commands, DFN tags in regions.dfn and JS methods/properties.
	Added new socket property for storing temporary int in JS - tempInt2
	Added new socket property for storing temporary object in JS - tempObj2
	Expanded XGO command in JS/COMMANDS/TARGETING/x.js to support optional world and instance parameters
	Fixed an issue that prevented characters from vanishing from the the sight of players when teleporting to a different instance
	Added support for ClassicUO client's WorldMap tracking packet (0xf0) for guildmembers/partymembers. This is the same packet as Razor uses for feature negotiation, so merged the handling of those two packets together into CPIKrriosClientSpecial, which can also be extended to handle other uses of this packet.
	Added new UOX.INI setting  whether shard should respond to ClassicUO client's WorldMap tracking packets for guildmembers/partymembers
		CLASSICUOMAPTRACKER=0

21/08/2020 - Xuri (0.99.2o)
	Added support (UOPInterface.cpp/hpp) for loading map files in UOP format, allowing UOX3 to use
		map files from clients up to at least v7.0.86.2 without requiring files to be converted to
		mul format first. Loading of UOP files is slower than for equivalent mul files, but after
		startup, the performance of lookups remains the same for both (punt)
	Updated TWEAK, INFO in code and ISTATS, CSTATS in gumps.js to display 4-digit hex-ids for IDs
		consistently in the format of 0x####
	Fixed issue that would disconnect ClassicUO users if they used WorldMap feature in the client,
		via CPIKrriosClientSpecial() handler in CPacketReceive.cpp/h, which will handle all things
		packet 0xF0. As of yet it doesn't respond correctly to the WorldMap-related version of the
		packet, but at least it no longer disconnects this client from the server.

15/08/2020 - Xuri
	Updated healing.js to disallow usage of healing skill if target is in a house/multi not owned by either healer or healee
	Fixed broken starting locations in UOX.INI
	Fixed an issue with CPSendGumpMenu::AddText() that caused guildstones and townstones to crash server when used
	Fixed an issue with CTownRegion::DisplayTownMenu() that prevented players from joining a town when interacting with a townstone for the first time

14/08/2020 - Xuri (0.99.2n)
	Replaced platform specific ways of looking up and loading DFN files in cServerDefinitions.cpp with a common, cross-platform method using std::filesystem. This also fixes an issue with loading of map0.mul on Linux when maps.4xclients.old is present in dfndata/maps/ directory (thanks, punt!)

13/08/2020 - Xuri
	Misc changes to address errors and warnings when compiling on 64bit Linux
		%li changed to %i
		%lu changed to %u
		Some (SERIAL) changed to (UI64)
		Some size_t changed to UI32

12/08/2020 - Xuri
	Embraced the usage of R32, R64, SI16, UI16, SI32, UI32, SI64 and UI64 typedef aliases as replacement for built-in types throughout the sourcecode:
		typedef float				R32;
		typedef double				R64;
		typedef signed char			SI08;
		typedef unsigned char		UI08;
		typedef signed short int	SI16;
		typedef unsigned short int	UI16;
		typedef signed int			SI32;
		typedef unsigned int		UI32;
		typedef signed long long	SI64;
		typedef unsigned long long	UI64;
	As part of this process, UI32 was redefined from unsigned long int to unsigned int, and SI32 from signed long int to signed int to ensure the size of variables using these remain the same (32bit) across both Windows, Linux and MacOS for both 32bit and 64bit platforms
	Replaced instances of toLong() with toInt(), and toULong() to toUInt()
	Replaced instances of "long" and "int" with SI32 where possible
	Replaced instances of "unsigned long" and "unsigned int" with UI32 where possible
	Replaced instances of "float" with R32 where possible
	Fixed an issue with void CSpawnRegion::SetNPCList() and void CSpawnRegion::SetItemList() that could cause compilation to fail on Linux

11/08/2020 - Xuri
	Added an FX playing for successful uses of the parrying skill
	Successfully parrying an attack will send a sysmessage to the player informing them of their feat, if DISPLAYHITMSG is enabled in UOX.INI
	Updated dictionary files with new entry about blocking attacks using parrying skill
	Fixed placing a house addon teleporting player to the location of the addon
	Added support for TELEPORT tag to regions.dfn. If set to 0, use of the Teleport spell is not allowed in a given region. Defaults to 1 if not specified.
	Exposed canTeleport JS property for regions
	Updated regions.dfn to disable usage of Teleport spell within level 3 of the Wisp dungeon
	Updated regions.dfn to enable usage of RECALL spell in city/dungeon of Wind (so players can recall out of there)
	Added missing UOX.INI settings for feature negotation, as mentioned in previous commit!

11/08/2020 - Xuri
	Added support for feature negotiation with Razor, AssistUO and other assistant tools that support this feature via new UOX.INI settings:
		ASSISTANTNEGOTIATION=0 		// If enabled (1), sends a request (packet 0xF0) to negotiate features with assistant tools upon login. Defaults to (0)
		KICKONASSISTANTSILENCE=0 	// If enabled (1), disconnects clients that don't respond (with packet 0xF0) to request via assistant tool within 30 seconds. Defaults to (0)
	Added new section at bottom of UOX.INI to allow shard admins to control which assistant features get disabled:
		[disabled assistant features]
		{
		AF_FILTERWEATHER=0 		// Weather Filter
		AF_FILTERLIGHT=0 		// Light Filter
		AF_SMARTTARGET=0 		// Smart Last Target
		AF_RANGEDTARGET=0 		// Range Check Last Target
		AF_AUTOOPENDOORS=0 		// Automatically Open Doors
		AF_DEQUIPONCAST=0 		// Unequip Weapon on spell cast
		AF_AUTOPOTIONEQUIP=0 	// Un/Re-equip weapon on potion use
		AF_POISONEDCHECKS=0 	// Block heal If poisoned/Macro IIf Poisoned condition/Heal or Cure self
		AF_LOOPEDMACROS=0 		// Disallow Looping macros, For loops, and macros that call other macros
		AF_USEONCEAGENT=0 		// The use once agent
		AF_RESTOCKAGENT=0 		// The restock agent
		AF_SELLAGENT=0 			// The sell agent
		AF_BUYAGENT=0 			// The buy agent
		AF_POTIONHOTKEYS=0 		// All potion hotkeys
		AF_RANDOMTARGETS=0 		// All random target hotkeys (Not target next, last target, target self)
		AF_CLOSESTTARGETS=0 	// All closest target hotkeys
		AF_OVERHEADHEALTH=0 	// Health and Mana/Stam messages shown over player's heads
		AF_AUTOLOOTAGENT=0 		// (AssistUO only) The autoloot agent
		AF_BONECUTTERAGENT=0 	// (AssistUO only) The bone cutter agent
		AF_JSCRIPTMACROS=0 		// (AssistUO only) Javascript macro engine
		AF_AUTOREMOUNT=0 		// (AssistUO only) Auto remount after dismount
		AF_ALL=0 				// All features
		}

08/08/2020 - Xuri (0.99.2m)
	Misc code and documentation cleanup:
		Updated and standardized function comment blocks throughout entire codebase
		Grouped getters and setters together in pairs and documented them as one
		Removed empty and/or non-useful information from comment blocks
		Removed unused function from cItem.cpp/h - IncID() - formerly used to change IDs for doors
	Added new feature - Instances
		Objects (characters, items, multis, spawnregions) can now make use of a 5th parameter to determine their location in the game world. In addition to the traditional X, Y, Z and WORLDNUMBER parameters, a new one has been added - INSTANCEID - that allows objects to exist at the same coordinates in the same world, but in different "dimensions". Code has been updated in multiple places to support this, and a default instanceID of 0 is assumed if nothing else is specified.
	Added support for new DFN tag in town regions, spawn regions and locations - INSTANCEID (defaults to 0 if not present)
	Added support for another start location parameter after worldNum in UOX.INI representing instanceID (defaults to 0 if not present)
	Updated TWEAK menu to include WorldNumber and instanceID
	Fixed BaseWeight option in TWEAK menu
	Updated CBase_Teleport - now takes an optional 5th parameter instanceID
	Updated SE_SpawnNPC now takes an optional 5th parameter - instanceID
	Updated SE_FindMulti now takes an optional 5th parameter - instanceID
	Updated SE_GetItem now takes an optional 5th parameter - instanceID
	Updated SE_FindItem now takes an optional 6th parameter - instanceID
	Added new JS property for Items, Characters, Regions: .instanceID
	Added JS property for Regions: .members - returns comma-separated list of town member serials
	Updated JS scripts making use of the above-mentioned JS Methods/Functions
	Updated dictionaries with new tweak menu entry texts
	Exposed SpawnRegions to JS engine, and updated JS docs with details:
		SpawnRegion JS Functions
			IterateOverSpawnRegions()
			GetSpawnRegion( spawnRegNum )
			GetSpawnRegionCount()
		SpawnRegion JS Properties
			name
			regionNum
			itemList
			npcList
			item
			npc
			maxItems
			maxNpcs
			itemCount
			npcCount
			onlyOutside
			prefZ
			x1
			y1
			x2
			y2
			world
			instanceID
			minTime
			maxTime
			call

05/08/2020 - Xuri (0.99.2l)
	Updated CGump_AddToolTip() gump method - now accepts up to 10 optional cliloc arguments to go with specified cliloc. Can also be used to display custom tooltip text if used with a cliloc like 1114778. Cliloc arguments and custom tooltips only work in client version 7.0.16.0 or above.
	Updated CPSendGumpMenu::AddCommand() to use the safer vsnprintf instead of vsprintf, and increased msg buffer size from 512 to 1024
	Updated CPIUpdateRangeChange::Handle() to include additional client definitions: CV_HS2D and CV_HS3D
	Added new pack types in PackTypes enum:
		PT_GAME_BACKGAMMON, PT_GAME_CHESS, PT_MAILBOX1, PT_MAILBOX2, PT_MAILBOX3, PT_MAILBOX4, PT_MAILBOX5, PT_MAILBOX6, PT_MAILBOX7, PT_MAILBOX8, PT_MAILBOX9, PT_WALLSAFE, PT_SAFE
	Updated getPackType() with additional container definitions for the following pack types:
		PT_RBASKET - winnoning basket (0x1882)
		PT_GCHEST - gargoyle chests (0x4025, 0x4026), metal chests (0xA304, 0xA305), rusty metal chests (0xA306, 0xA307), gold chests (0xA308, 0xA309), barnacle metal chests (0xA30A, 0xA30B)
		PT_GAME_BACKGAMMON - backgammon boards (0x0E1C, 0x0FAD)
		PT_GAME_CHESS - chess board (0x0FA6)
		PT_MAILBOX1 - dolphin mailbox (0xA202, 0xA203, 0xA204, 0xA205)
		PT_MAILBOX2 - squirrel mailbox (0xA206, 0xA207, 0xA208, 0xA209)
		PT_MAILBOX3 - barrel mailbox (0xA1F5, 0xA1F6, 0xA1F7, 0xA1F8)
		PT_MAILBOX4 - light mailbox (0xA268, 0xA269, 0xA26A, 0xA26B, 0xA26C, 0xA26D, 0xA26E, 0xA26F)
		PT_MAILBOX5 - sitting kitten mailbox (0xA3EB, 0xA3EC, 0xA3ED, 0xA3EE)
		PT_MAILBOX6 - standing kitten mailbox (0xA3EF, 0xA3F0, 0xA3F1, 0xA3F2)
		PT_MAILBOX7 - scarecrow mailbox (0xA3F3, 0xA3F4, 0xA3F5, 0xA3F6)
		PT_MAILBOX8 - lion mailbox (0xA3F7, 0xA3F8, 0xA3F9, 0xA3FA)
		PT_MAILBOX9 - square gray mailbox (0x4141, 0x4142, 0x4143, 0x4144)
		PT_WALLSAFE - wall safe (0x8B8F, 0x8B90)
		PT_SAFE - safe (0x9C18, 0x9C19)
	Updated CItem::IsShieldType() to include shield IDs from SA expansion
	Added IL_TALISMAN (0x09) and IL_FACE (0x0F) to ItemLayers enum to allow equipping talismans and faces in clients that support this
	Updated getWeaponType() (in both code and JS) with additional weapon definitions:
		ONEHND_LG_SWORDS - anquique sword 1 (0xA33B, 0xA33C), antique sword 2 (0xA33D, 0xA33E), antique sword 3 (0xA33F, 0xA340), skull sword (0xA341, 0xA342), gargoyle skull sword (0xA345, 0xA346)
		LG_MACES - skull staff (0xA343, 0xA344), gargoyle skull staff (0xA347, 0xA348)
	Updates keys.js with some distance checks
	Misc updates to JS Docs

06/07/2020 - Xuri (0.99.2k)
	Added new JS Gump Methods:
		AddPicInPic( x, y, gumpID, width, height, spriteX, spriteY ) // Add sprite image in dialogs, requires client v7.0.80.0 or above
		AddImageProperty( serial ) // Add properties(?) of a specific item
	Fixed a server crash related to world saves, where items being cleaned up were not being removed properly from the 	MapRegions they were in, resulting in a crash when attempting to save non-existent items out to the worldfiles.
	Fixed an issue that could cause GMs to become permanently squelched
	Fixed an issue where the newStatus parameter for the onFlagChange JS event was overwritten with oldStatus, and oldStatus parameter was never set
	Updated onDeath JS Event to include a second parameter - iCorpse:
		onDeath( pDeath, iCorpse ) // iCorpse is a reference to the newly created corpse of pDead
	Disabled detailed logging of spells loaded from spells.dfn on startup - was causing unnecessary slowdown
	Removed void Wiping( CSocket *s ) from cmdtable.cpp - unused and unreferenced function without a definition
	Removed handling of IT_KEY doubleclicking in code, as this is now handled in JS
	Removed bool isDoorBlocked( CItem *door ) from cPlayerAction.cpp - unused and unreferenced function without a definition
	Removed void CorpseTarget( CSocket *s ) from targeting.cpp - now handled in JS
	Removed broken cannon loading and spelldamage code - this should be done in JS instead
	Items that initiate a target cursor on use are now stored in tempObj property of player's socket, and distance to these items are checked again after player targets something
	House and boat deeds must now be in the player's inventory in order to successfully place a house or boat
	Fixed superfluous arugment passed to switchGobletID function in js/server/resource/pitchers.js
	Removed some duplicate/unused local variables in js/commands/custom/misc-cmd.js
	Removed an unused local variable in js/commands/targeting/dupe.js
	Fixed an issue with setting item type through the SET command
	Fixed an issue where the number of arrows or bolts in player's inventory was potentially miscalculated in js/item/archerybutte.js
	Fixed issue where pickpocket-dummy item visuals potentially didn't get updated properly in js/item/pickpocketdip.js
	Fixed an unreachable return statement in js/npc/ai/stablemaster.js
	Fixed incorrect ID for gargish maul in js/server/data/weapontypes.js
	Added some missing variable declarations in js/commands/custom/repeatingcmds.js, js/commands/delid.js, js/commands/targeting/hide.js, js/item/food.js, js/item/key.js, js/npc/ai/stablemaster.js

16/06/2020 - Xuri
	Updated AddButton and AddPageButton JS Methods (and Docs) to include an optional argument for ID of button when pressed. If the extra argument is not provided, the methods behave like before, using buttonImage + 1 for the pressed button:
		void AddButton( topHeight, topLeft, buttonImage, (buttonPressedImage) unk1, unk2, unk3 )
		void AddPageButton( topHeight, topLeft, buttonImage, (buttonPressedImage), pageNum )

13/06/2020 - Xuri
	Fixed an issue where hair and beard values for characters created prior to 0.99.2j were never stored properly, by updating these values upon login

02/06/2020 - Xuri (0.99.2j)
	Added additional ClientVersion enum values to start implementing support for clients above 7.0.24.0. Ini settings disabled by default.
	Updated packet 0x78 to always send item colour for clients above 7.0.33.1, which also fixes rendering of items on paperdoll for these clients
	Client requests sent by the Bandage Self macro (packet 0xBF, subcommand 0x2C) can now be handled in the JS engine via the onUseBandageMacro( socket, targetChar, bandageItem ) JS event (JS Docs updated with details).
	Removed a restriction on speech that prevented onSpeech JS event from triggering based on speech from dead player characters
	Fixed hairs and beards not being restored properly on player characters after dying and being resurrected (and then relogging)

26/04/2020 - Xuri
	Updated vcx project files
	Added UOX3 CMake build system for Windows (tuanhtrng)
	Updated repository readme to include build instructions for CMake

20/04/2020 - Xuri
	Preparation for dragging UOX3 kicking and screaming into the 64bit Century (punt)
	Filepaths to spidermonkey in MSVC project are now relative to source folder
	Default language standard in MSVC project set to stdcpp17
	Added a check for compiler to fix 64bit Linux compiling (punt)
	Cleaned up some warnings (punt)

18/04/2020 - Xuri
	Added c++17 flag to configure.ac

17/04/2020 - Tuan H Truong
	CPU neutral fix
	Die parser rewritten and fuzzed, replaced with cxx17 features

12/04/2020 - Xuri (0.99.2i)
	Fixed an Z-movement issue where NPCs could fall through upper-story floors of buildings and start walking at ground level instead
	Movement speed of pets and other NPCs following the player out of combat increased by 1.5 to make it easier for them to keep up
	Pets will now teleport to keep up with their owners if pathfinding fails
	NPCs with EVIL flag set, who highlight in red, will no longer highlight in grey if they are flagged as a criminal
	Criminal timer (and murder count decay) now keeps ticking even while a player is dead
	Fixed a spelling error in console.cpp
	Made Earthquake spell resistable
	Restored some code in magic.cpp that caused errors when casting spells

07/04/2020 - Xuri
	Fixed an issue that prevented VALUE tags from being loaded properly from worldfiles, which broke persistent NPC vendors on server restart

24/11/2019 - Xuri (0.99.2h)
	CustomTags (DFN and JS) now supports negative int values
	Fixed an issue introduced with starting locations that would dump new characters in the middle of the ocean
	Added new uox.ini flag for choosing a random starting location for new players (from list in uox.ini)
		RANDOMSTARTINGLOCATION=0	// 0 to disable (default), 1 to enable

23/09/2018 - Xuri (0.99.2g)
	Corrected name of spell JS property AGRESSIVESPELL to AGGRESSIVESPELL
	Updated clumsy.js and level1targ.js with corrected names for aggressiveSpell and canCastAggressive JS properties, and added checks for isSafeZone region JS property
	Commented out hardcoded versions of spells that have been ported to JS

22/09/2018 - Xuri (0.99.2f)
	Some more code cleanup
	Documented temp effect cases in code
	Added SETAMMOEFFECT, SETAMMOTYPE, GETAMMOEFFECT, GETAMMOTYPE, REGIONINFO and XREGIONINFO commands to misc-cmd.js
	Additional function parameters passed as const references
	Changed RuntimeLibrary in Debug configuration in VS project file from MultiThreadedDebugDLL to MultiThreadedDebug to fix issues with unreadable characters in strings while debugging
	Fixed potential issue with checking for number of arguments in CFile_Pos()
	Merged fix for a crash issue related to the 'HOWTO command from Kitiara/UOX3
	Fixed pUser/pSock reference error in misc-cmd.js for command_BROWSE (Kitiara)
	Moved Create Food spell out to JavaScript

21/09/2018 - Xuri
	Fixed support-messages from players not being stored and displayed in GM/Counselor queues
	Added more descriptive error messages in code and JavaScript when trying to set spawner-related object properties on non-spawner objects

20/09/2018 - Xuri
	Fixed possible null pointer dereference
	Converted some C-style pointer casting to C++ style
	Added override specifier to some virtual methods that override base class virtual methods
	Some function parameters are now passed as const references as they're not being modified in the called function

19/09/2018 - Xuri
	Resolved an issue with uninitialized struct members
	Removed some redundant conditional checks
	Made the boolean part of JS function RegisterSkill( <skillnum>, <bool> ) actually work; can now be used to disable/enable JS-implemented skills
	Fixed a bug with cHTMLTemplate::Process() where the same expression was used for both branches of a ternary operator
	Various minor cleanups; removed some unused variables, addressed some potential portability issues

18/09/2018 - Xuri
	Fixed an issue with potentially undefined behaviour, where sprintf was being used with a single variable as both parameter and destination.

17/09/2018 - Xuri (0.99.2e)
	Disabled SAFESEH linker option for debug build to enable "Edit and Continue" mode in Visual Studio
	Disabled loading of PRIV tag from regions.wsc, as it is currently unused (meant for townstones) and prevents loading certain updates to regions.dfn file
	Added support for SAFEZONE tag to regions.dfn. No hostile actions are allowed within zones where this tag is set to 1
	Added combat, spellcasting, stealing and snooping checks for safe zone
	Added safe zone check to damage portion of explosion potion
	Exposed isSafeZone JS property for characters
	Updated potion.js, provocation.js and enticement.js to check for safe zones
	Updated spells in spells.dfn to include aggressive and resistable flags
	Updated dictionaries with safezone message

13/09/2018 - Xuri (0.99.2d)
	Updated version number to 0.99.2d

12/09/2018 - Xuri
	Fixed a server crash when start locations in uox.ini is empty; defaults to hardcoded location (Sweet Dreams Inn, Britain) if no start locations found

07/09/2018 - Xuri
	Fixed tooltips on containers not updating when adding/removing items

12/09/2015 - Xuri
	Added new UOX.INI setting for defining the amount of stamina lost when using the fishing skill
		FISHINGSTAMINALOSS=2	// The amount of stamina lost when using the fishing skill

10/11/2013 - Xuri (0.99.2c)
	Fixed some issues in CHandleCombat::CastSpell() and level1targ.js that stopped NPCs from casting Heal on themselves
	Added new UOX.INI settings to make hardcoded damage to armor and weapons in combat more customizable:
		WEAPONDAMAGECHANCE=17 	// Chance of weapons taking damage when attacking
		WEAPONDAMAGEMIN=0		// Minimum amount of damage a weapon takes if damaged in combat
		WEAPONDAMAGEMAX=1		// Maximum amount of damage a weapon takes if damaged in combat
		ARMORDAMAGECHANCE=25	// Chance of armor taking damage when defending
		ARMORDAMAGEMIN=0		// Minimum amount of damage armor can take if damaged in combat
		ARMORDAMAGEMAX=1		// Maximum amount of damage armor can take if damaged in combat
	Added new UOX.INI settings for adjusting combat-speed on a global scale:
		GLOBALATTACKSPEED=1 	// for adjusting speed of melee and ranged attacks globally for all chars
		NPCSPELLCASTSPEED=1 	// for adjusting the overall speed of spellcasts for NPCs (base spellcast speed determined by SPADELAY tag in NPC dfns)
	Increased the chance of NPCs attempting to cast spells instead of doing regular attacks in combat-rounds

14/11/2012 - Xuri (0.99.2b+)
	Fixed issue where DISPLAYDAMAGENUMBERS and ATTACKSPEEDFROMSTAMINA settings in UOX.INI were overwriting the DISPLAYHITMSG setting instead of their own respective settings
	Fixed a server crash in CMulHandler::CheckStaticFlag() which could crash the server when using a client-version below 7.0.9.0
	Fixed a potential server crash in cSkills::FishTarget(), which would possibly crash the server when using a client-version below 7.0.9.0

04/11/2012 - Xuri (0.99.2b)
	Fixed issue introduced in previous version where any character-specific tags starting with the letter 'B' would not be loaded correctly from the worldfiles.

03/11/2012 - Xuri (0.99.2)
	Added support for optional amount-values behind LOOT DFN-tag, and expanded PACKITEM DFN-tag to support amount for non-stackable items as well.
		Updated supported syntax goes as follows, with optional parameters shown in paranthesis:
			LOOT=lootlist
			LOOT=lootlist,amount
			LOOT=lootlist,minamount maxamount
			PACKITEM=itemid
			PACKITEM=itemid,amount
			PACKITEM=itemid,minamount maxamount
			PACKITEM=listobject
			PACKITEM=listobject,amount
			PACKITEM=listobject,minamount maxamount
	Fixed a bug in js/skill/healing.js that would stop players from being able to use skills after trying to cure poisoned characters with bandages
	Updated timers for curing and healing in js/skill/healing.js - should now take longer to heal/cure oneself with bandages than to do the same with others
	Added support for randomization in the AMOUNT DFN tag for items.
		Updated supported syntax:
			AMOUNT=amount
			AMOUNT=minamount maxamount
	Fixed an issue with corpses not having a maximum weight capacity defined; it is now set to 500 stones.
	Fixed an issue with hairs and beards not being set correctly on corpses
	UOX3 will no longer attempt to spawn items from lootlist/itemlist-entries titled "blank". These entries can be used to add some randomization.
	Fixed some incorrect values for WEIGHT-tags in dfndata/items/gear/armor/base_armor.dfn
	Fixed an issue with containers and weight, with the help of a new semi-permanent "baseWeight" property which is based on the initial weight of a spawned item.
	Added support for viewing (ISTATS-menu) and tweaking (TWEAK-menu) the new baseWeight item property
	Added new property for JS Item objects: baseWeight - should rarely if ever need to change, primarily used to fetch base weight of containers
	Added new JS command: 'FIXCONTWEIGHT - will iterate through all in-game containers and update their baseWeight (forced), weight (if empty and not already set) and weightMax (if not already set) properties
	Updated the 'INFO command with more detailed data about flags on the targeted tile
	Potentially fixed a segmentation fault in Linux by replacing JS_NewString with JS_NewStringCopyN in JSBool CBase_GetTag()
	Potentially fixed an issue with the Stone Walls/Stone Walls 2-sections of the add-menu, which could cause lengthy stalls when opened across network connections
	The MINECHECK uox.ini setting now defaults to 1 (mountains/caves/rocks only)

25/10/2012 - Xuri
	OnCollide JS event can now be triggered from character scripts. NOTE: If both item and character have scripts attached, item script takes precedence.
	Fixed an issue where some LineofSight-checks (for double-clicking items, for instance) would erroneously fail to succeed
	Lumberjacking will now check if user is in range of target both at start and end of the chopping-process (previously start only)
	Fixed an incorrectly named variable in js/server/resources/bananas.js (dragon slayer)
	Added missing NPC entries: gazerlarva (dragon slayer)
	Updated dfndata/regions/regions.dfn to disallow Mark/Recall/Gate-spells in Felucca dungeons, and added some missing brackets (dragon slayer)
	Added support for randomizing the direction an NPC will face in when spawned. To do so, use "RND" as the specified direction in their DFNs.
	A pet being ordered to attack its owner (player), or another pet under the same ownership, should no longer result in criminal charges against the player in question.
	Fixed an issue where locked down items could get removed from the multi when bouncing back on pickup-attempts
	Fixed an issue where NPCs would never leave combat with targets that were unreachable on a different floor of a building than them.
	Items with visibility value of 3 (Permanent Hidden/GM Hidden) will now not show up to players in containers
	Members of the same party should no longer become criminals from attacking one another
	Expanded the maximum amount of available regions in regions.dfn from 255 to 65535
	Minor cleanup done in various parts of the source
	Corrected weight of iron ingots in dfndata/items/skills/resources/smithing.dfn - they should now weigh 1 stone (weight=100) each.

31/03/2012 - Xuri
	Fixed an AND vs OR issue in CMulHandler::DoesStaticBlock() that caused an if-statement to behave incorrectly
	Updated LineOfSight() function with a new boolean parameter that allows LoS-checks based from the Z-level at a character's feet instead of at his head
	Added LineOfSight-checks for players (does not affect GMs) picking up/dropping items from/onto the ground, to stop an exploit with CircleOfTransparency
	When dropping an item into an invalid location, and the player is out of range of the original location where the item was picked up, it will now be dropped on the ground
	Players should now be able to use boat-planks and house-signs even while dead
	Fixed an issue introduced with the updated LoS-checks in the previous commit

24/03/2012 - Xuri
	Added several new JS Gump Methods:
		AddGumpColor( left, top, gumpID, hue ) // Adds a gump-image to the gumpstream, with a hue
		AddPictureColor( left, top, artID, hue ) // Adds a tile-picture to the gumpstream, with a hue
		AddToolTip( clilocID ) // Adds a tooltip to the previous gump-element that was added.
		AddTextEntryLimited( left, top, width, height, hue, relay, initialTextIndex, actualText, size ) // Add a text-entry gump with restriction on entry-length
		AddButtonTileArt( tL, tR, gumpIDnorm, gumpIDpush, buttonType, pageNum, buttonID, tileID, hue, tileX, tileY ) // Add a tile-picture as a part of a gump-button.
		AddXMFHTMLTok( left, top, width, height, border, scrollbar, hue, clilocnumber, clilocArgs... ); //
	Added missing script=5021 tag to the bedroll in DFNDATA/ITEMS/GEAR/provisions.dfn
	Added some script-crash protection in JS/ITEM/bedroll.js

21/03/2012 - Xuri (0.99.1)
	Futureproofed map-loading/reading code to support both UOP-wrapped and regular maps on a map-per-map basis. May not never need to, but still.
	Added new DFN-tag for creatures - "HUMAN". This now replaces the hard-coded list of "human" body IDs that is checked when playing animations, sounds, etc.
	Added "HUMAN" DFN-tag to DFNDATA/CREATURES/creatures.dfn for all male/female player bodies, the GM body and all Savage human bodies
	Added NEWBIE-tag to items in DFNDATA/ITEMS/GMMENU/gm_skins.dfn (dragon slayer)
	Added MOUNTID=0x3EC6 to CREATURE 0x2cb (Boura) in DFNDATA/CREATURES/creatures.dfn (dragon slayer)
	Added an equippable boura mount-item (for NPCs) to DFNDATA/ITEMS/MISC/equippable-mounts.dfn
	Added some more missing regions to DFNDATA/REGIONS/regions.dfn (dragon slayer)
	Added support for specifying the amount of items to add (only works for stackable items) to a container using the PACKITEM tag. Syntax: PACKITEM=itemid,amount
	Added new item to DFNDATA/ITEMS/MAGIC/reagents.dfn: bagofreagents - a bag containing 30 of each basic reagent.
	Added bagofreagents-item to Magic->Reagents portion of Add-menu in DFNDATA/ITEMS/ItemMenu.bulk.dfn
	Replaced PACKITEM-lines specifically for reagents for magery in newbie.dfn with PACKITEM=bagofreagents
	Updated JS/ITEM/axe.js to use CreateDFNItem instead of CreateBlankItem to create new logs
	Submitted some updates to some DFN/JS-files that had somehow not been committed to the CVS properly

20/03/2012 - Xuri
	Fixed weight showing up incorrectly in item-tooltips for stacks of items
	Fixed a weight-related issue by clearing the CSocket variable pSpot (pickupspot) after dropping items
	Fixed a weight-related issue by clearing the CSocket variable pSpot (pickupspot) after bouncing back items on non-valid item-pickup attempts
	Added new function void PickupBounce() in cPlayerAction.cpp to avoid having to repeat some shared code all over CPIGetItem::Handle()
	Added CSocket::SetCursorItem() and CSocket:GetCursorItem() to be used for storing temporary pointers to items held by players on the mouse-cursor
	Fixed an issue where items picked up off the ground and held on the mouse-cursor while disconnecting/being disconnected would make said items vanish permanently
	Fixed MaxWeight-value in status-gump for clients v5+ - will now reflect the actual MaxWeight calculated based on UOX.INI setting WEIGHTPERSTR
	Fixed issue where UOX3 would always try to read from mapfiles as if they were v7.0.24+ UOP-wrapped mapfiles, even in earlier clients with non-UOP-wrapped mapfiles

19/03/2012 - Xuri (0.99)
	Fixed various errors in JS/MAGIC/level1targ.js
	Added support (but no functionality) for Spellweaving, Imbuing, Mysticism and Throwing skills in code and skills.dfn)
	Updated kindling.js and added bedroll.js (original by dragon slayer, rewritten by Xuri) to support secure logouts from camping
	Updated dictionary-files with new system messages related to the camping-skill
	Added container-gump support for container items like bones and various SE/SA-related containers
	Corrected sound-effect played when dropping items into baskets of various kinds
	Made cut-up-leather and furs pileable in DFNDATA/ITEMS/SKILLS/RESOURCES/leatherworking.dfn (dragon slayer)
	Added additional lootlists for tinkerparts, instruments, tools, vegetables, clothing, reagents and potions in DFNDATA/ITEMS/lootlists.dfn (dragon slayer)
	Updated JS/ITEM/food.js so bowls, plates, etc will be left behind instead of eaten along with the food (dragon slayer)
	Added empty wooden bowls to DFNDATA/ITEMS/BUILDING/DECS/kitchen.dfn
	Updated DFNDATA/MAPS/tiles.dfn with proper height-override values for rope ladders - should be 22 not 10
	Fixed a bug where NPCs would continue following and attacking characters that turned invisible/hidden
	Players who turn invisible will now stop swinging at nearby targets in combat
	Fixed a bug where players could equip both one-hander and two-hander weapons at the same time
	Fixed a bug where newly created characters could end with two conflicting weapons equipped at the same time
	Added additional deed/boat-model IDs to "modelmulti"-list in DFNDATA/ITEMS/itemtypes.dfn to make these usable as house/boat-deeds
	Added fix to properly set the mounted-state for NPCs that spawn with a mount-item pre-equipped
	Fixed issue where there was no distance-check on Field-spells. They now use CombatMaxSpellRange setting from UOX.INI like other spells
	Fixed issue where the wrong GFX would be displayed for Field-spells aligned north/south
	Fixed issue where NPCs without fencing or swordsmanship would not be allowed to poison anyone in combat. Tough luck, spiders!
	Fixed issue with some NPCs using invalid values for POISONSTRENGTH. The valid range of poisons goes from 1 (weak) to 4 (deadly).
	Added three new sections to DFNDATA/NEWBIE/newbie.dfn - [DEFAULT ELF MALE], [DEFAULT ELF FEMALE] and [DEFAULT ALL]
	Added item and character-direction to ISTATS and CSTATS commands in JS/COMMANDS/TARGETING/gumps.js
	Fixed an issue where containers with specific MORE values were interpreted as being trapped. Trapped containers now use MOREZ instead of MORE.
	Fixed some issues with boat-movement (drifting/turning left/right, in particular) being blocked in cases where it shouldn't be
	Fixed an issue where boat-commands to drift left/right could be spammed to move boat at high speeds. Now limited to normal boat speed multiplied by 1.5
	Fixed an issue where static water tiles would block placement of boats
	Fixed Tillerman-location on large ships turned southwards
	Fixed an issue with JS/NPC/AI/stablemaster.js where, in specific circumstances, claiming stabled pets by name didn't work
	Nearby pets will now teleport along with their owner into/onto houses/boats when those are placed
	Fixed some cases in JS/MAGIC/clumsy.js where it tried to send sysmessages through sockets, to NPCs - who have no such thing
	Added torches to ProvisionerShopping shoplist in DFNDATA/ITEMS/shoplist.dfn
	Moved TurnTorward() method in JS/ITEM/axe.js to after the area resource-check, so player only turns if there is chopping to be done
	Reduced chance of creature-sounds playing slightly. The more creatures, the higher the chance a sound will play.
	Parts of movement code rewritten to solve Z-related issues (xantier)
	Fixed various other issues with the walking-code
	Removed hacky workaround for bug with NPC pathfinding leading to queues of NPCs all lined up, replaced by proper pathfinding
	Made some tweaks to various parts of the NPC pathfinding code
		Reduced default maxSteps variable in advanced pathfinding routine from 1000 steps to 500 steps for performance reasons
			The maxSteps variable will also increase/decrease depending on the type of movement the pathfinding is for
		Added a safeguard against NPCs repeatedly failing at advanced pathfinding and slowing down the server as a result. Now resets their NPCWANDERMODE on critical failures.
		Added an internal counter for NPCs called "failPath", which increases whenever the NPC is blocked from moving when server thinks it has a valid path.
			Once it reaches a certain threshold, NPC can push past a blocking character, or alternatively stop whatever it's doing (fleeing, following, etc).
		Advanced Pathfinding will now take into account characters blocking the way when generating valid paths - no more queued up NPCs in long lines!
		Enabled pathfinding in water for water-walking creatures
		NPCs that fail to pathfind while fleeing will abort fleeing and re-engage their opponent in combat
		NPCs that fail to pathfind while in combat will abort combat and enter a state of "evasion" for a short time, during which
			...Other characters wont block their movement
			...They can't be attacked
			...They won't attack anyone
			...They'll try to move back to their bounding box, if they have one
	Added some randomization in how NPCs pick their targets in combat, so not all NPCs pick the same target at the same time
	MAX_VISRANGE and DEFSOCK_RANGE increased from 15 to 18 to better deal with item-updates in higher-resolution clients
	JS events OnDeathBlow and OnDispel can now be used to override death and/or dispelling of summoned creatures (and magical fields), by returning false from the script
		Note that for OnDeathBlow overriding code means that things like fame/karma-calculations and criminal/murderer-flags and timers need to be manually set in the script
	Improvements to LineOfSight-code:
		LoS no longer checks against a hardcoded list of items, but instead uses tiledata-flags (missing flags can be overriden through tiles.dfn)
		LoS-checks will no longer be done for NPCs against targets that have visible status VT_PERMHIDDEN or VT_GHOSTHIDDED
		LoS-checks should now work more consistently - no more NPCs aggroing players through walls! (Eolirin)
			Note that this also has a benefit for server performance, as less aggroing NPCs mean less unneccesary attempts at NPC pathfinding!
	Fixed incorrect offset on upstairs door in 2-story villa in DFNDATA/HOUSE/house.dfn
	Added house-deed for Farmer's Cabin, and added this to the house-deeds itemmenu (DFNDATA\HOUSE\house.dfn and DFNDATA\ITEMS\ItemMenu.bulk.dfn)
	Added support for INVISIBLE tag for house-items in DFNDATA\HOUSE\house.dfn. Allows adding invisible items to houses.
	Added invisible wooden floor tile in second floor of 2 Story Log Cabin house to fix moving up rope ladder (DFNDATA\HOUSE\house.dfn)
	Fixed sign-placement for 2 Story Log Cabin house (DFNDATA\HOUSE\house.dfn)
	Updated methods for detecting client-versions for incoming connections, and how these are stored on the socket object
	Added support for Stygian Abyss clients (classic version only, from v6.0.14.2 to 7.0.8.2)
	Added support for High Seas clients (classic version only, from v7.0.9.0 to 7.0.15.1?)
	Added support for creation of SA-specific Gargoyle-characters if client and server support this through CLIENTFEATURES and SERVERFEATURES bits
		NOTE: Gargoyle-specific features and/or special-cases are not yet implemented! Highly experimental.
	Added support for the SA-specific map (map5.mul - Termur) to DFNDATA/MAPS/maps.dfn
	Added support for extended itemIDs (0x3FFF to 0xFFFF) used in SA and HS clients. Maximum supported depends on size of tiledata run on the server.
	Added support for reading new versions of tiledata.mul and multi.mul. No settings needed, version-handling taken care of automatically.
	Added support for New Object Information packet (0xF3) via CPNewObjectInfo packet class.
		This replaces packet 0x1A in client-versions 7.0+, and enables displaying items and multis with IDs extending beyond 0x3FFF
	Added support for packet 0xD7, SubCommand 0x28 - Guild button on paperdoll, which gives access to guild-functions if character belongs to a guild.
		Can be enabled/disabled through UOX.INI setting PAPERDOLLGUILDBUTTON=0/1. Defaults to 0.
	Updated packet 0x88 to properly show combat-status of character in paperdoll
	Updated packet 0xBA (Tracking Arrow) for HS clients - from 6 bytes to 10 bytes, to include target serial.
	Updated packet 0x99 (Multi Placement) for HS clients - from 26 to 30 bytes, to include multi hues.
	Added new NPCAI for passive NPCs who can be attacked, but will never attack back: AI_PASSIVE = 7
	Updated Wall of Stone-spell to no longer place walls on the same tiles as where characters are standing
	Added brute-force updating of character's total weight when main backpack is opened, as a quick-fix for broken character weights
	Updated packet 0xA9 (Character List/Starting Locations) with UO:SA and UO:HS-specific handling.
	Updated packet 0x24 (Draw Container, from 7 to 9 bytes) to support Container Type-flag in UO:HS clients, to ensure that containers, spellbooks and vendors continue working.
	Changed the upper limit for the amount of stamina that can contribute to faster attack-speeds (for NPCs only) from 100 to 300
		This increases their maximum theoretical attack-speed from attacking every 1.5 seconds to roughly every 0.75 seconds
	Fixed incorrect Meditation skill-entry for lich NPCs (DFNDATA\NPC\undead.dfn) - was set to max 9500 (950.0), should have been 950 (95.0)
	Earthquake-spells will no longer affect mounted targets, animation-wise
	Added new UOX.INI option to determine whether attack-speed bonuses are gained from Stamina (default) or Dexterity: ATTACKSPEEDFROMSTAMINA=1/0
	Added new UOX.INI option to control the displaying of damage-numbers in combat (previously used DISPLAYHITMSG for numbers too): DISPLAYDAMAGENUMBERS=1/0
	Implemented better support for Yell (1.5 * normal speech distance) and Whisper (1 tile distance for players, 3 for GMs)
	Whispering will no longer take hidden players out of hiding
	Normal players can no longer see regular speech from permanently hidden GMs or Counselors
	Normal players can see whispers from permanently hidden GMs or Counselors, if they're within distance (3 tiles)
	Added a new section to UOX.INI - [clientsupport] - along with the following settings to determine approved client-versions for the server:
		CLIENTSUPPORT4000=0/1
		CLIENTSUPPORT5000=0/1
		CLIENTSUPPORT6000=0/1
		CLIENTSUPPORT6050=0/1
		CLIENTSUPPORT7000=0/1
		CLIENTSUPPORT7090=0/1
		CLIENTSUPPORT70160=0/1
		CLIENTSUPPORT70240=0/1
		NOTE: Each of these settings represent a range of clients, not just the individual versions mentioned. This means that CLIENTSUPPORT4000, for instance,
		 will allow or disallow connections from clients 4.0.0 to 4.0.11f. Also note that while it is possible to enable support for all clients at the same time,
		 it highly recommended to restrict support for client versions that match up to what the server is running.
	Fixed various issues with the skill-gump (crashes) and skill-locks (not working/showing weird gumps instead of arrows/lock)
	Added new UOX.INI option: EXTENDEDSTARTINGSTATS=0/1
		If enabled, makes new characters start with 90 statpoints (selectable in clients 7.0.16.0+ only, lower versions only get 90 if using templates) instead of 80.
	Added new UOX.INI option: EXTENDEDSTARTINGSKILLS=0/1
		If enabled, allows for four starting skills (selectable in clients 7.0.16.0+ only, lower versions only get 4th skill if using templates) instead of three
	Added (very) experimental support for UO:Enhanced clients v4.0.23.1+
	Did some minor code-cleanup stuff, including but not limited to:
		Reduced scope of some local variables to where they are actually needed/used
		Changed some const std::strings function parameters to references instead of values
		Changed some "stuff.size() == 0"-checks to "stuff.empty()"
		Changed some "stuff.size() != 0"-checks to "!stuff.empty()"
		Removed some variables that were initialized but never used
	Increased world-loading speeds by ~35-40%, and saving by ~30-35% (your mileage may vary, this was tested on Windows 7, on an SSD)
	Included <climits> in mapstuff.h and <stdlib.h> in cDice.cpp to fix a compiling issue in Linux
	Updated some JS Console Methods in JS/COMMANDS/consoletest.js
	Made the WIPEABLE bit a member of cBaseObj instead of cItem, so it can be used by both items, spawners, characters and multis - though only works for items and spawners atm
	Updated the 'WIPE command to not delete non-wipeable items and spawners
	Fixed a crash-bug in JS/COMMANDS/gumps.js where the 'ISTATS command could crash the server if used on a spawner-object with no spawnsection set
	Fixed read-only books (setup through DFNDATA/MISC/books.dfn) by updating the MORE dfn-tags in DFNDATA/ITEMS/MISC/books.dfn
	Implemented support for automatically renaming books when the book titles are updated by players
	Fixed broken Bulletin Boards - should no longer freeze the client, and can actually be used for posting messages again
	Disabled MsgBoardMaintenance() in CWorldMain::CheckAutoTimers() until someone can figure out why they break bulletin boards
	Added a new NPCLIST (escorts) to DFNDATA/NPC/npclists.dfn, and an NPC escort spawner to DFNDATA/ITEMS/GMMENU/spawners.dfn (dragon slayer)
	Added Ter'Mur Map Area (REGION 250) to DFNDATA/REGIONS/regions.dfn
	Added code to shut down UOX3 (instead of crashing later on) if it fails to load any regions from region DFN scripts
	Changed all references to MAP in DFNDATA/REGIONS/regions.dfn to WORLD (which unlike MAP is actually read by UOX3 in this file)
	Fixed an issue in JS/SKILL/TAILORING/scissors.js where the script was referencing socket, but should have referenced pSock (dragon slayer)
	Updated JS/teleport.scp with teleport-locations for new maps (dragon slayer)
	Updated JS/teleport.scp with fixes for a whole bunch of old locations, and added some missing ones
	Added layers to DFNDATA/ITEMS/MISC/jewelry.dfn (dragon slayer)
	Added ML-era weapons to JS/SERVER/DATA/weapontypes.js (dragon slayer)
	Added code-support for SA-era weapons, and added them to JS/SERVER/DATA/weapontypes.js and JS/jse_objectassociations.scp
	Updated House-gump in DFNDATA/MISC/gumps.dfn (dragon slayer/Blue Dragon)
	Updated JS/ITEM/sword.js to use CreateDFNItem instead of CreateBlankItem for raw fish steaks and kindling (dragon slayer)
	Added cutting hides into leather through JS/SKILL/TAILORING/scissors.js (dragon slayer)
	Added MAPUOPWRAP tag to DFNDATA/MAPS/maps.dfn - only used by clients 7.0.24+
	Added support for reading map#LegacyMUL.uop files (regular map#.mul files with a uop header) in clients 7.0.24+
	Fixed an issue where an NPC knowing too many skills could crash UOX3 if when listing them in response to a player
	Players can now train skills from NPCs using the "train <skill>" phrases.
	Corrected coordinates for REGION 75 (Destard)
	Disabled detection of keypress "0" in JS/CONSOLE/console.js so UOX3 will actually reload all scripts when pressing 0
	Moved reloading of JS/teleport.scp from the already slow DFN-reload (console option 7) to the much faster Regions-reload (console option 4)
	Fixed an issue where some creatures with ANTIBLINK tag set in UOX3/DFNDATA/CREATURES/creatures.dfn would play get-hit animations as attack-animations
	Added numerous creatures to DFNDATA/CREATURES/creatures.dfn, though some only have placeholder icons and sounds.
	Updated various UOX3 documentation (installation, configuration, server-settings, JavaScript docs)

14/12/2011 - Xuri (0.98-4.0i)
	Fixed an issue causing errors when compiling in VS 2008 Express and newer (giwo)
	Added some exception-handling to cScript::DoCallback() in cScript.cpp (spdddmn)
	Added NPCWANDER-type 5 (WT_FROZEN) - which will stop NPCs from moving. Useful for reapers and corpsers and such.
	Added support for six new JS events:
		onBuy( socket, objVendor ) - triggers for vendor before tradegump is opened. Can be used to restrict vendor access.
		onSell( socket, objVendor ) - triggers for vendor before tradegump is opened. Can be used to restrict vendor access.
		onBuyFromVendor(socket, objVendor, objBought ) - triggers for item while item is being bought from an NPC vendor; return false in script to block sale, defaults to true
		onBoughtFromVendor( socket, objVendor, objBought ) - triggers on item after purchase has gone through and item has reached the player's backpack
		onSellToVendor( socket, objVendor, objSold ) - triggers for item while item is being sold to an NPC vendor; return false in script to block sale, defaults to true
		onSoldToVendor( socket, objVendor, objSold ) - triggers on item after sale has gone through and item has reached the vendor's boughtpack
	Included CJSMapping.h and cScript.h in vendor.cpp to support new JS events
	Added onBoughtFromVendor JS events to pet-statue scripts in JS/NPC/PETS/ to automagically turn statues into live pets immediately after being bought
	Added a NULL-check in CJSEngine::AquireObject() in CJSEngine.cpp (spdddmn)
	Added an extra check to CPISellItem to make sure the character trying to sell items still owns those items when accepting trade
	(Added a temporary workaround for NPC pathfinding with long queues of NPCs trying to reach the same target)
	Added new DFN tags for ranged weapons, defining ammunition id required (color optional) and missile-effect id played (color/rendermode optional):
		AMMO=id (color)
		AMMOFX=id (color rendermode)
	Added AMMO and AMMOFX tags to ranged weapons in archery.dfn, aos_weapons.dfn, se_weapons.dfn and baseitem.dfn
	Added support for Fukiya blowguns as an Archery weapon in code
	Added new item DFN tag (and JS item property) to define maximum amount of stones (weight) a container can hold (replaces hardcoded value):
		WEIGHTMAX=# (defaults to 40000 - or 400.00 stones - for all containers)
	Added container-capactity information to item tooltip
	Added "Locked Down" text to item tooltips for locked down items. Refresh seems funky though.
	Fixed an issue where tooltips would display the current weight of and amount of items being spawned by container-spawners
	Fixed a server crash caused by the Item Identification-skill when used on items of type 15 - IT_MAGICWAND
	Fixed item-tooltip that describes remaining charges on an item of type 15 - IT_MAGICWAND.
	Fixed an issue with the JS Method Open for File Objects where it wouldn't allow opening files for appending or writing, only reading
	Fixed name in addmenu for item 0x0F64 (unused torch)
	Fixed TrainerShopping list in DFNDATA/ITEMS/shoplist.dfn - now refers to actual animal-statue items in DFNs
	Fixed DIR values for various wall sconces (DFNDATA/ITEMS/lighting.dfn) and heating stands (DFNDATA/SKILLS/TOOLS/alchemy.dfn)
	Fixed some incorrect scriptIDs for lightsources in jse_fileassociations.scp and jse_objectassociations.scp
	Fixed broken smithing of agapite items due to duplicate item-numbers between agapite and gold crafting DFNs (DFNDATA/CREATE/smithing_agapite.dfn)
	Fixed 'SETRACE command, no longer tries to use non-existing method to set character's race (JS/COMMANDS/setrace.js)
	Fixed some confusion with how vendor buy/sell backpacks were handled internally in code
	Fixed an issue where onCreate JS scripts would not run for duped items
	Updated dictionary-files with some more messages, including a missing systemmessage used to inform of remaining amount of lockdowns in houses
	Changed MAX_NAME to a 128 byte limit to support long item names.
	Changed JS scripts for lights to save DIR to MOREX when turning light off, and load DIR from MOREX when turning on. Sets default DIR if no MOREX value can be found.
	Changed some items spawned through code to use CreateScriptItem (DFN based) instead of CreateItem (Tiledata-based):
		Leftover arrows and crossbow-bolts that appear on ground during combat
		All cases where gold coins are spawned (newbie gold, random fishing, gravedigging, result of trading, NPC escort reward, etc)
		Ingots created from smelting items
		Resurrection robes (DFN entry added to DFNDATA/ITEMS/GEAR/CLOTHING/clothing.dfn for potential tweaking)
	The empty bottles that appear after using a potion will now be DFN based (JS/ITEM/potion.js)
	Fixed an error in JS/ITEM/diceandcup.js (dragon slayer)
	Made spawners of type IT_AREASPAWNER (69) use the MORE value ('set more 0x0000XXYY) to determine offset area to spawn in
	Corrected hit sounds for bows and crossbows, were using dart sound
	Changed miss-sound for bows and crossbows to make them different from melee weapon misses
	Randomized impact-sounds for melee weapons
	Randomized get-hit sounds for male and female human characters
	Revamped spell-damage and magic-resist systems:
		Added new function in magic.cpp to calculate spell-damage after magic-resist and eval-int vs resist-check:
			SI16 CalcSpellDamageMod( CChar *caster, CChar *target, SI16 baseDamage, bool spellResisted )
		Updated cMagic::CheckResist() with magic resistance formulas based on pre-AoS information
		Added BASEDMG tag to a number of spells in DFNDATA/SPELLS/spells.dfn.
			For damage-spells, it's the maximum potential basedamage done before bonuses (or penalties) based on target resist, caster eval int and item resistances.
			For healing spells, it's the maximum potential basehealing done before potential bonuses
		Damage-spells updated to use new methods for calculating damage and magic resistances, both of which should now be close to pre-AoS implementation
		Changed Chain Lightning and Meteor Swarm spells to split the total damage done between all targets
		Mind Blast changes:
			Mind Blast will now never exceed 60% of target max-health, nor above 120% of BASEDMG
			If target's Int stat makes out a larger percentage of his/her total stats (Sum of Str, Dex, Int) than the caster's, spell backfires onto caster
		Debuff-spells like Clumsy, Feeblemind, Weaken and Curse can no longer be fully resisted. Resisting will halve the effect-duration instead.
		Spells will now only do double damaga against non-human NPCs (monsters and animals)
		Exposed CombatExplodeDelay to UOX.INI, and changed the default delay between targeting and damage for the Explosion spell from 0 to 2 seconds
		Updated JS/MAGIC/level1targ.js with new magic damage and resist system, and added noNeedReags check on caster to potentially skip reagent checks
		Fixed (visual-only) issue where damage-numbers would display over head of caster twice if caster was also target
		Added JS Spell property "name" - can be used to get the name of a spell as defined in the dictionary-files (entries 593-662)

2/7/2010 - Xuri (0.98-4.0h)
	Added new UOX.INI settings:
		GLOBALITEMDECAY - Toggles on/off item decay on a global scale. Note that it does not remove the decay-status from items, it just
						resets the decay-timer when it reaches 0
		SCRIPTITEMSDECAYABLE - Toggles whether DFN-items will decay by default or not. Can be overriden by DECAY tag in item-DFNs
		BASEITEMSDECAYABLE - Toggles whether base-items will decay by default or not. Can be overriden by DECAY tag in harditems.dfn
		ITEMDECAYINHOUSES - Toggles default decay of non-locked down items inside multis (houses and boats)
	Removed lines from add.js that set decayable as true or false (except for spawners), default decay now handled by ini-settings
	Made skulls dropped as loot by Bonemages movable
	Fixed several issues with spawners.dfn, including incorrect names and spawnobject-entries (Puck)
	Added default ID to base_spawner item in DFNDATA/ITEMS/GMMENU/spawners.dfn to make it spawnable without invalid gfx
	Fixed an incorrect ID for Iron Ore in DFNDATA/HARDITEMS/harditems.dfn and DFNDATA/ITEMS/SKILL/RESOURCES/mining.dfn
	Fixed a bug that stopped UOX3 from reading and applying DIR values from item-DFNs correctly
	Added DIR values to all lightsources in DFNDATA/ITEMS/BUILDING/lighting.dfn
	Added DIR values to all .js files in JS/SERVER/LIGHT/ folder, enabling players to turn on/off lightsources

2/3/2010 - Xuri
	The duping command (dupe.js) should now be able to dupe spawner-objects properly
	Added missing Tinker Tools and Fletching Tools to jse_objectassociations.scp (Puck)
	Fixed an incorrect name-entry in namelists.dfn (Puck)

2/1/2010 - Xuri (0.98-4.0g)
	Fixed an issue with open doors in player houses that could cause them to decay if they were open during decay-check
	Fixed an issue with locked down items decaying (despite being inside houses)
	A system message should now be displayed when locking down items, showing how many lockdowns remain
	Added JS Item property: multi - A read-only Object-reference to the multi a specific item is inside
	Items of objType OT_SPAWNER with amount set higher than 1 should no longer be duped when picked up off the ground
	Added movable=2 and weight=50000 to Base_spawner-definition to make it impossible for players to steal them

2/1/2010 - Xuri (0.98-4.0f)
	Added script for Dice and Cup-item, which lets players use said item to...(drumroll, please)...roll dice!
	Fixed an issue where NPCs could spawn at Z -128
	Fixed an issue with regional spawns and type 69 spawners which would cause NPCs to be spawned in blocked locations
	Fixed an issue with type 62 spawners which would cause NPCs to spawn at Z 0 (Shudderz)

1/31/2010 - Xuri (0.98-4.0e)
	Added DEF values to standard clothing, footwear and headwear
	Minor fix to JS/COMMANDS/TARGETING/add.js which ensures that the script won't break under some very specific circumstances
	System-message rapporting how many ingots player gets when smelting player-made items should now rapport correct amount
	Made GetScriptItemSettings look for "x" instead of "0x" in harditems.dfn, fixes some stacking issues with ingots
	Corrected IDs for gold coins and kindling in harditems.dfn by removing leading 0s in the IDs
	Crafting system can now handle MAXRANK values up to 255

1/30/2010 - Xuri
	Fixed an issue with sword.js which stopped you from carving shafts/kindling from a single wooden log
	Re-ordered IDs listed under METAL in DFNDATA/CREATE/resources.dfn to make UOX3 give same ingot-types when smelting
		player-crafted items as when smelting raw ore.
	Moved buckler-entry in smithing.dfn from item 1 to item 367 as it doesn't seem possible to craft item number 1
	Added missing pickpocket-dummy entries to jse_objectassociations.scp
	Added decayable = false to freeze command in misc-cmd.js
	Did some minor updates to the JavaScript Documentation
	Did some tweaks to some tailoring js-files to make spinning wheels stop breaking if global onCreateDFN script is present
	Removed erroneous DEF values from leather.dfn, studded_leather.dfn and bone.dfn - should use values from base_armor.dfn

1/29/2010 - Xuri
	Fixed an issue that caused NPC shopkeepers to get overloaded by the weight of items in their shop-layers
	Fixed an incorrect entry in namelists.dfn

1/28/2010 - Xuri (0.98-4.0d)
	Fixed a servercrash that occured when server tried to regrown wool on shorn sheep that were dead

1/24/2010 - Xuri
	Added definition of 0x1EB9 as a Tinker Tool in jse_objectassociations.scp
	Added system messages confirming when items have been locked down or released in a house
	Fixed a bug where targeting a non-valid object would crash UOX3 when trying to release locked down items

11/08/2009 - Xuri
	Added support for LOOT and PACKITEM dfn tags in item-defintions, for pre-adding items to containers (Shudderz)

5/11/2009 - Xuri
	Fixed client/server synch-issue with boats by changing prSend( 1 ) to prSend( 0 ) in boat movement code (Jediman)
	Added stablemaster JS-script and assigned it to the animal-trainer vendors (Xuri)
 		Available commands: claim (list|pet-name), stable
	Added missing Meteor Storm Scroll to DFNDATA/ITEMS/MAGIC/scrolls.dfn (Ghostwolf)
	Added a new DFN (DFNDATA\NPC\lbrraces.dfn) with Meer and Juka NPCs  (Ghostwolf)
	Added Meer and Juka races to races.dfn (Ghostwolf)
	Added Meer and Juka NPCs to GM-menu under Humanoid NPCs (Xuri)
	Fixed messed up smithing gump (Ghostwolf)
	Added Jhelom fighting pit to regions.dfn and renumbered the regions (Ghostwolf)
	Added other regions included dungeons, guard outpost, etc (Ghostwolf)
	Added regions in Trammel, Ilshenar, Malas and the Map of Tokuno Note (Ghostwolf)
	Updated instalog-section with Trammel and Ilshenar inns (Ghostwolf)
	Changed Bucc's Den regions to not guarded (Ghostwolf)
	Added two new NPCs - [shade] and [armeddaemon] to DFNDATA/NPC/undead.dfn and DFNDATA/NPC/daemons.dfn(Ghostwolf)
	Tweaked ID of existing [daemon] to that of the unarmed one (Xuri)
	Added Shade and Armed Daemon entries to GM menu (Xuri)
	Added support for bamboo flute in musicianship/enticement/peacemaking JS-scripts (dragon slayer)
	Added entries for bamboo flutes in DFNDATA/ITEMS/SKILLS/MISC/music_instruments.dfn (Xuri)
	Added bamboo flute to GM-menu under music instruments, and entries in jse_objectassociations.dfn (Xuri)
	Added new JS-script for bolas - JS/ITEM/bola.js (dragon slayer)
	Added entry for bola in a new DFN file: DFNDATA/ITEMS/GEAR/WEAPONS/missile_weapons.dfn (Xuri)
	Added entry for bola in jse_objectassociations.dfn (Xuri)

3/22/2009 - Xuri (0.98-4.0c)
	Fixed travelling by recall spell or magic gate between worlds
	Fixed Jailing and Releasing players in worlds other than world 0
	Fixed issue with the 'ADD command that would put items in your backpack instead of target's backpack
	Removed a TriggerEvent from go.js that should not have been there
	Corrected scripttrigger for newly created bankchecks in banker.js
	Fixed teleport entries from Serpent's Hold to Fire dungeon (Ghostwolf)
	Added new midilist section (23) for dungeon music (Ghostwolf)
	Added MIDILIST=23 entry in region 29 (dungeons)

2/01/2009 - Xuri
	Updated trainingdummy.js and pickpocketdip.js with code that will auto-fix them should their timers ever break
	Pets are removed from petlist when their stabled flag is set to true, and added again when set to false
	Players will no longer have to shove through characters that are permanently hidden

1/19/2009 - Xuri
	Automatic worldsaves can now be disabled by setting SAVESTIMER in UOX.INI to 0
	Added blank scrolls and empty books to ScribeShopping SHOPLIST
	Added new vendor NPCs using ScribeShopping shoplist: m_scribe and f_scribe
	Added new scribe-spawner item, and added it to GM-menu
	Sorted male and female NPCs and vendors alphabetically in the NPCs-menu
	Fixed some issues in shoplist.dfn
	Fixed an error in tailoring.js where invalid socket and character objects were referenced
	Removed a debug-message from taming.js
	Pen and Ink-items will now work similar to using the inscription skill directly

1/19/2009 - giwo (0.98-4.0b)
	Fixed an issue causing smelted iron ore to combine with colored ore already in a players pack.
	Fixed a bug making it impossible to accept or deny a recruit into a guild.
	Added functionality to automatically turn on the Guild title display of all members when a guild aligns with Chaos/Order.
	Added onDropItemOnItem( iDropped, cDropper, iDroppedOn ) JS Event to handle dropping an item on another item.
	Added onVirtueGumpPress( pUser, cTarg, buttonNum ) JS Event to handle clicking the Virtue gump icon (and subsequent menus).

1/18/2009 - giwo
	Moved the magic scroll handling from cPlayerAction.cpp out to JavaScript (items/magicscroll.js)
	Fixed a bug with the JS Method Char.CastSpell() where it never returned a value to the calling script.

1/18/2009 - giwo (0.98-4.0a)
	Fixed a crash caused by clicking on the Virtue Gump icon in the paperdoll
	Added some checking before sending a status window to ensure the character is visible and in range
	Added some checks to prevent one from inviting themselves to a party

1/17/2009 - giwo
	Fixed the handling for the UOX ini tags OVERLOADPACKETS and DARKLEVEL

1/17/2009 - giwo
	Possible fix for clients > 6.0.5.0.

1/16/2009 - giwo (0.98-3.7v)
	Implemented 0xBD CPClientVersion packet to request the version from the client.

12/16/2008 - Xuri
	Fixed a bug that prevented players from picking up/moving items in their own backpacks

Oct 12, 2008 - Maarc

	Bug fix on GetColumn JS implementation
	Error checking on statement indexes in GetColumn() in ODBCManager

Oct 12, 2008 - Maarc

	#ifdef'd ODBCManager implementation.  You will need to enable through Config.h, and add 2 files to project.
	Accounts load and save from a database, falling back to read/write if connection doesn't exist
	Both logins are logged into SQL database
	ODBCManager exposed to JS Engine - note, columns MUST be fetched in ascending numeric starting from 0
	Long strings printed to the console will now wrap in a friendly fashion
	Unknown INI file tags will now print out at startup

7/27/2008 - Xuri
	Entry for ScriptID added to 'CSTATS, 'ISTATS and 'TWEAK menu
	Fixed an erroneous example in JavaScript Docs
	Fixed an update-issue with race-gates
	Increased MAX_Z_LEVITATE from 10 to 15 to better deal with moving on uneven terrain (like in T2A)
	It should now be possible to walk through secret entrances made up of walk-through-able grass/mountain tiles

7/16/2008 - Xuri
	TWEAK now works for any admin character, no matter their commandlevel (gumps.cpp)
	The onPickup JS-event should now work
	Updated onPickup JS Event in Javascript Documentation

7/03/2008 - Xuri
	Animal taming no longer checks for the "ANIMAL"-tag in creatures.dfn
	Converted WeightPerStr from UI08 to R32, so it can support decimal values
	The onFall JS event will now work if characters fall further than 20 Z tiles (CChar.cpp)
	Updated onFall JS Event in Javascript Documentation

7/02/2008 - Xuri
	Changed the system message being displayed when fatigued due to being overloaded
	Added system message for when character becomes overloaded after picking up item
	The math for calculating max carrying capactity for players matches OSI values more closely
	Default WeightPerStr changed from 5 to 3.5, to closer match the values used by OSI
	Updated dictionary files with two new system messages
	Added a check to the 'POLY command to prevent characters from polymorphing into an invalid, client-crashing id (0x20)

6/22/2008 - giwo
	Modified books.dfn to use the standard TAG=DATA format. Each line in a PAGE section is now preceded with LINE=
	Modified motdtips.dfn to use the standard TAG=DATA format. Each line in a TIP or MOTD section is now preceded with LINE=
	Modified the JSMethod CBase_GetTag to avoid a possible crash.
	Removed the following variables from CWorldMain cmem, imem, nextCharSerial, nextItemSerial as this functionality is handled by the ObjectFactory

6/22/2008 - giwo (0.98-3.7t)
	Added error handling to prevent a crash if GetByte/GetWord/GetDWord were passed an invalid offset
	Changed the tweakItem and tweakChar handlers to use command level rather than the "IsGM" flag.
	Defaulted the starting serial to 0x1 rather than 0x0, as some UO packets don't recognize 0x0 as a valid serial.

6/22/2008 - Xuri
	Fixed hex-id of turnips in foods2.dfn, these turnips should now be stackable
	Fixed hex-id of studded sleeves in studded_leather.dfn, previously used hex-id for gloves
	Tweaked the region surrounding Buccaneer's Den so it extends around all buildings in the town
	Removed entry 104 (rawfish.js) from jse_fileassociations.scp as it was no longer in use
	Archerybuttes work again, and should have a "machine-gun"-issue fixed
	Scripts that used onUse() now use onUseChecked()
	Updated UOX3_changelog.txt in the Docs-folder to include updates up to 0.98.3-7


6/21/2008 - giwo
	Fixed an infinite loop crash caused by a DFN entry calling itself with GET
	Added JS Character Propery "poisonStrength" to set the strength of the poison a character will inflict on his foe during combat.
	Implemented supermoleet's fix for the black screen after logging in to a different world

6/21/2008 - giwo (0.98-3.7s)
	Modified UString to function without crashing under VS2008
	Fixed a bug in CItem::RemoveFromSight() causing items inside containers on the ground not to properly notify nearby players when removed.
	Fixed a bug in CPIDropItem() when the compiler does not automatically instantiate booleans to false

6/21/2008 - giwo
	Fixed several issues with tracking.
	Fixed a crash caused by passing an invalid object to the JS Method TurnToward

6/20/2008 - giwo (0.98-3.7r)
	Added support for Visual Studio 2008
	Fixed an issue causing a player to be poisoned when a JS call to SetPoisoned(0,0) was made.


02/16/2008 - Xuri
	Made magical shortbows and elven composite bows fire arrows instead of crossbolts

10/27/2007 - grimson
	Split onUse into onUseChecked and onUseUnChecked.

10/09/2007 - Xuri
	Fixed some errors in jail.js that could mess up jailing/releasing characters
	Added new function (getCombatSkill) to weapontypes.js for returning skill used by equipped weapon as a string

9/08/2007 - grimson
	Properly initialize the wander area when the wandermode of an NPC changes.
	Use stamina instead of dexterity when calculating the attack delay to match
	up with the old OSI combat calculations.

9/07/2007 - grimson
	Force the wandermode of NPCs spawned by spawnregions to 3 (box), so they can travel
	the whole spawnregion.
	Properly initialize the wander area when the location of an NPC changes.
	Use the old OSI way of calculating hit chances.

8/26/2007 - grimson
	Added new JS property for items: "speed" this can be used to get and set the speed
	of weapons.
	Added new setting to spawn.dfn: "ONLYOUTSIDE" set this to one so that items and chars
	will only spawn outside of buildings in that area.
	Modified the spawn code for spawnregions so that NPCs with wandermode 3 (box) and 4 (circle)
	keep within the spawnarea boundaries.
	Send NPCs that left their wander area for some reasons back there.

8/12/2007 - grimson
	Use an enum for racial relations, should help with reading the code.
	Fix a bug where racial allys would attack each other.

7/28/2007 - grimson
	Added a new setting to the uox.ini: BASICTOOLTIPSONLY. If this is set to 1 the
	tooltips will only contain basic information, like the name and the weight of
	an item.

7/23/2007 - giwo (0.98-3.7q)
	Added support for updated UOKR packets.

7/17/2007 - Xuri
	Added new JS script for moonstones, used to create gates between felucca & trammel
	Added new JS script for spyglasses, used to see the phases of the moons
	Added new DFN item: [moonstone], uses new moonstone JS script
	Removed duplicate spyglass entries in item-DFNs, and added script tag for new spyglass JS script
	Drinking healing potions will no longer also give the user night-sight
	Cure-potions should be working again (stranf)
	Drinking a poison-potion will now poison one's character
	A timer now stops players from using multiple potions rapidly

6/12/2007 - giwo (0.98-3.7p)
	Added the JavaScript CSocket methods FirstTriggerWord(), NextTriggerWord(), FinishedTriggerWords() to allow handling trigger words sent from the client during speech.

6/10/2007 - grimson
	Fix reading of the new SPEED DFN tags for NPCs.

6/10/2007 - grimson
	Allow faster attacks on fleeing NPCs, so they won't be chased without an end.
	Allow following NPCs to run if their target went to far away, so they can catch
	up on it.

6/10/2007 - grimson
	Modified cMovement::NpcMovement() and cMovement::HandleNPCWander() so that NPCs
	only run while they still have stamina left.
	Added two new settings to the uox.ini, NPCRUNNINGSPEED and NPCFLEEINGSPEED, they
	work the same way as NPCMOVEMENTSPEED.
	Added three new DFN tags for NPCs. WALKINGSPEED, RUNNINGSPEED and FLEEINGSPEED
	they also work the same way as the uox.ini settings, and will override those if
	present.

6/08/2007 - Xuri
	Fixed multiple JS-scripts that would not work correctly with negative Z values (Used GetSByte instead of GetByte)
	Fixed a few "You can't think of a way to use that item"-messages appearing when using certain JS-based items
	Removed rawfish.js and the script entries for it, no longer used.

5/26/2007 - giwo (0.98-3.7o)
	Fixed a couple crashes caused by targeting non-PC's in the PartySystem.

5/25/2007 - giwo (0.98-3.7n)
	Added JavaScript function "Moon( moonNum, newVal )" which will get and set the server moon values.
	Modified JavaScript Item.decaytime and Item.tempTimer to calculate the new value as a future time in seconds (unless a 0 is passed).
	Fixed door.js allowing a locked door without an associated key to always be openable.

5/20/2007 - Xuri
	Added teleport locations for Malas and Tokuno to moongate.js, and added configuration values at top of script

5/19/2007 - Xuri
	Items with wipable status set to 0 should no longer be removed when using the 'WIPE command
	Added support in doors.js for linked double-doors that will both open at the same time
	Added new command - 'LINKDOORS - used to link doubledoors together, and 'UNLINKDOORS to unlink them
	Added new script (bankers.js) that replaces hardcoded banker-AI and adds CHECK and DEPOSIT # / <target> commands
	Added new script (bankcheck.js) that handles the functionality of bank-checks
	Assigned script 3201 to bankers, and removed NPCAI=8
	Changed mapdefinitions (maps.dfn) for Trammel to map1.mul, statics1.mul and staidx1.mul

5/18/2007 - grimson
	Make sure we check for scripts envoked by type or id before we use the global script.

4/09/2007 - grimson
	Remove some not needed code and slow fleeing NPCs a bit down, so that other chars
	can still catch up with them.

4/09/2007 - grimson (0.98-3.7m)
	Added a new setting to the uox.ini, LOOTINGISCRIME. If you set it to 0 looting
	corpses	of innocent chars is not taken as a crime.
	Fixed and changed parts of the walking code. If NPCs have the RUNS tag set they
	will really run when they attack, instead of just showing the running animation.
	Tamed chars will now run, if the char they follow is running, this should reduce
	the warping effect of them a bit.

4/08/2007 - grimson
	Fixed a bug where we dropped the hair and beard items, from corpses, on the ground.

3/31/2007 - grimson
	Added elven hair styles to the dfns.

3/30/2007 - grimson
	Corpses should now display the hair and beard of the char they where created from.
	Modified CItem::SetCont() so that it checks against the item layer instead of fixed
	IDs to see if an item is hair or a beard.

3/30/2007 - grimson
	Fixed the position of the coprse item when the char died falling forward.

3/30/2007 - grimson
	Fixed cMagic::CheckBook(), it was calculating wrong numbers for the spells.
	Let chars randomly fall forward or backward when they die.
	The DISPLAYHITMSG setting from the uox.ini now also controls the damage display.

3/26/2007 - grimson
	Use an enum for the states of the skill locks, makes reading the code a bit easier.
	Fixed cSkills::HandleSkillChange(), the re-ordering of the atrophy created doubles
	and dropped entrys.
	Rewrote cSkills::AdvanceStats() so that the statlocks are actually used.

3/24/2007 - grimson
	Fix the onCreate JS script functions, they used the same event id. So if one didn't
	exist the other was also marked as not existing.
	Changed CPICreateCharacter::Handle(), if the start location for the new PC isn't send
	by the client it now uses the first start location from the uox.ini instead of the fixed
	location in britain.

3/3/2007 - giwo (0.98-3.7l)
	Allowed customization of supported client features via uox.ini
		CLIENTFEATURES
		SERVERFEATURES
		Note that these are bit-settings similar to the way STARTPRIV works.
		One will need knowledge of how to set individual bits in a value,
		or an editor to customize these features.
	Removed CLIENTSUPPORT from the uox.ini

2/21/2007 - giwo
	Committed some linux build error fixes on behalf of Cavalier

2/11/2007 - grimson
	Small rewrite of the weather system. Calculate snow, rain and storm intensitys only every
	server hour and use their values for the amount of weather effects on the screen.

2/11/2007 - grimson
	Fix the format of the pingIP field in the CPGameServerList::AddServer() function. Now the
	client shows, after a moment, latency and packet loss information for the servers. It still
	doesn't work all the time.

2/10/2007 - grimson
	Added a new target type to the speech system, SPTRG_ONLYRECEIVER which sends the message
	only to the receiver and doesn't display it on the sender.
	Use the new target type in CSocket::objMessage() and CSocket::ShowCharName() to display
	the player name and serial only to the char requesting the information.

2/10/2007 - grimson
	Update the CPWalkOK Packet (0x22), the second byte contains the notoriety value (flag
	color) and make use of it.

2/08/2007 - grimson
	Fix a bug where items, that have a script but no onPickup event, get always bounced.
	Allow party members to remove themselfes from the party, even if they aren't the leader.

2/01/2007 - grimson
	Remove remains of the time command from command.dfn.

1/28/2007 - giwo (0.98-3.7k)
	Fixed an issue with TriggerEvent() that can cause a script to stop functioning if the triggered event did not return true
	Moved dynamic parts of [worldlight] section from uox.ini to their own output file in the /shared/ directory
	Exported telltime function along with the clock item and 'time command handling to JS.

1/25/2007 - giwo (0.98-3.7j)
	Fixed an issue causing it to be "snooping" to open a pack in a trade window.
	Added support for the OnPickup() JS Hook, note a return value of false will bounce the item.

1/25/2007 - giwo (0.98-3.7i)
	Fixed a compiler warning with the Party System
	Fixed an issue causing weight not to be added when grabbing items from a bank box.
	Moved BankBox creation to Player creation, addressing a situation where the first
		time a player opened his bank it would close immediately or crash the client.
	Added FindRootContainer() to simplify finding the top-most item containing other items.

10/29/2006 - grimson
	Fixed %tstamp output in the HTML templates.

10/14/2006 - grimson
	Added more details to the weapon tooltips.

9/28/2006 - grimson
	Change cMagic::SelectSpell() to first check for reagents and then for skill.

9/27/2006 - grimson
	Fixed the spawning of NPCs in CSpawnRegion::RegionSpawnChar() so that they are put
	into the correct world.
	Updated UOX3_Official.dsp to contain the files from the party system.

21st September, 2006 - Maarc

	Added commentary to some of the party classes headers
	Updated AddMember() and RemoveMember() to return a bool as to it's success
	Updated Leader() change code so that the leader is always first on the list
	Added isNPC property to the Party class to help us with how our code will go
	CChar now has an InParty() method, which is currently unused - will be used for fast lookups of party presence later.  This is NOT to be saved, as it disappears on server shutdown.
	Exposed the new party classes to the JS Engine
		var partyObject = CreateParty( leader );	// Returns NULL if the party failed to be made

		Party Class
			Methods
				bool Remove( memberToRemove );
				bool Add( memberToAdd );		// If it's a PC, then it will send an INVITE ONLY  It is up to the PC to accept/decline
				obj  GetMember( index );		// Returns a character object for the member at that index
			Properties
				leader					// Character object that is the leader, can return null - EDITABLE
				memberCount				// Returns the number of characters in the group - READONLY
				isNPC					// Returns true if it's an NPC party, false if not - EDITABLE

		Character Class
			Properties
				party					// Returns a party object that is the party associated, or null - READONLY (use party management for this!)
				partyLootable				// Boolean that dictates whether the character is lootable by the party - EDITABLE - Note that if you are not in a party, this does nothing!

20th September, 2006 - Maarc

	Added CPIAOSCommand packet including logging
	Changed CPISubcommands::Receive so that it doesn't log multiple times
	Updated party packet details
	Added basic party implementation.  Adding, removal and kicking works, speech does not
	Added sent packets CPPartyMemberList, CPPartyMemberRemove and CPPartyInvitation
	Updated dragging contents out of packs so that pet friends should be able to do so
	Added CPPartyTell packet
	Promoted Party::SendPacket to public method
	Added speech (individual and group) to party methods

9/10/2006 - Xuri
	Found and fixed a total of 19 missing semicolons in 15 different JavaScripts
	Modified sword.js and axe.js so bladed weapons can be used as magic weapons (of TYPE 15)
	Minor modifications to several JavaScript files

8/29/2006 - Xuri
	Fixed several issues with the UseResource JS Method (maarc)
	UseResource JS Method can now be used with both items (containers) and characters (maarc)

8/12/2006 - giwo (0.98-3.7g [3.8 BETA])
	Changed item limit in create dfn down to 4,999 to fix a bug in gump handling.

8/12/2006 - Xuri
	Modified the order of the arguments in the RESOURCE tag in create-DFNs to fit the following:
		RESOURCE=ID AMOUNT COLOUR (AMOUNT and COLOUR are optional)
	Added smithing DFNs for coloured ingots (Armor and shields only, no weapons).
	Added a commented out MOUNTID for the polar bear in creatures.dfn. Uncomment for ridable polar bears.
	Corrected SPACEX/SPACEY (clear space necessary to place the house) values for all houses.
	Updated skills.dfn with changes mentioned by giwo about FOREIGN and MINAMOUNT tags.

8/11/2006 - giwo (0.98-3.7f [3.8 BETA])
	Fixed a crash when attempting to place a house item outside a house.
	Fixed the location check when placing house items to allow them to be placed inside houses.
	Added a check on house items to only allow them to be placed in your house (Or anywhere by GM's).
	Bumped up the limit on items in create.dfn from 999 to 32,766.
	Removed FOREIGN and MINAMOUNT tags from ore entries in skills.dfn as they were superfluous
	Fixed CHANCEFORBIGORE tag handling from regions.dfn to give a % chance out of 100 to get a pile of 5 rather than 1 ore.

7/24/2006 - giwo (0.98-3.7e [3.8 BETA])
	Fixed an issue making it impossible to place items on tables.
	Fixed an issue with the uox.ini entry for log resource respawn area.
	Simplified many entries in uox.ini, making them easier to read.

7/19/2006 - Xuri
	Made onResurrect trigger before a resurrection instead of after, added option to override hard code by returning false
	Updated JavaScript Documentation to 0.44, and added missing commands to command list
	Added "ARMOUR" as an alternate spelling used along with the 'SET command

7/18/2006 - giwo (0.98-3.7d [3.8 BETA])
	Fixed a possible issue with TextEntry in JS gumps.
	Fixed an issue with the following JS events:
		OnSnooped
		OnSpellGain
		OnSpellLoss
		OnCommand
		OnPacketReceive
	Fixed several MingW32 compiler warnings.
	Fixed a Flagging issue with Racial enemies.
	Added uox.ini flag to disable/enable the A* Pathfinding routine: ADVANCEDPATHFINDING=0/1
	Fixed an issue causing errors when compiling under *nix.
	Fixed an issue causing monsters to constantly attempt to pathfind to a target they can't reach.

7/17/2006 - Xuri
	Added new command (rndtile.js) that allows tiling random items of a specific hue at a specific height
		Syntax: 'RNDTILE <startID> <endID> <hue> <Z>(optional) <movable true/false>(optional)

7/15/2006 - giwo (0.98-3.7c [3.8 BETA])
	Added a flag to CChar::PushDirection() allowing us to push to the front or back of the pathToFollow list.
	Changed CChar::mNPC::pathToFollow to a deque for more robust functionality.
	Fixed an issue with the A* Pathfinding routine causing creatures to path in reverse.
	Added some debugging information to A* Pathfinding (when running in Debug mode).

7/10/2006 - giwo (0.98-3.7b [3.8 BETA])
	Fixed an issue with CPFightOccurring packet which would cause the client to lockup.
	Made use of the CPFightOccurring packet during combat.
	Fixed an issue when a monster attacked a player who was not in combat UOX3 would not inform the client of a new target.

7/09/2006 - giwo (0.98-3.7a [3.8 BETA])
	Fixed an issue causing JS gumps to interfere with eachother.
	Fixed an issue causing serial numbers in the istats gump to display improperly.

7/08/2006 - giwo (0.98-3.7)
	Updated version to 0.98-3.7

7/07/2006 - Xuri
	Modified damage output of summoned creatures in magicsummon.dfn, as they were too powerful
	The owner of two pets/summoned creatures will no longer become a criminal if the two pets/creatures fight
	Summoned creatures (and normal ones) will no longer cast Blade Spirit/Energy Vortex, as they caused flagging errors

7/07/2006 - Xuri (0.98-3.6j) [3.7 RC2]
	Added scripted version of keys (now used instead of hardcoded ones), plus working keyrings
	Updated doors-script to make use of new scripted keys/keyrings as well as the new TextMessage arguments
	Added script=5013 (key.js) to [base_key] in dfndata\items\misc\keys.dfn
	Ghosts will no longer re-enter combat-mode if they speak while already in combat-mode
	Removed CombatWalk flag sent to ghosts when they talk, as player ghosts have no combat animations
	PLAYERPERSECUTION in uox.ini (allows ghosts to drain mana from other players) set to 0 by default
	 (Must be updated manually if using old uox.ini)

7/06/2006 - giwo (0.98-3.6i) [3.7 RC]
	Combined CChar:: emote(), emoteAll(), talk(), and talkAll() into a single function TextMessage().
	Renamed CItem itemTalk() to TextMessage() and modified it so passing a NULL socket sends the message to nearby players.
	Added two new optional parameters to JS method TextMessage(). allHear (defaulting to true) and txtHue.

7/05/2006 - grimson
	NPCs can now walk through player ghosts.
	Player ghosts are only visible when they are in war mode and they will enter war mode
	when they speak.

7/02/2006 - giwo
	Fixed an issue causing several item values not to be saved.
	Updated doors.js to not display the "blocked" message if the door ID isn't recognized.

7/02/2006 - giwo (0.98-3.6h) [3.7 RC]
	Removed door.cpp from the project.
	Modified the JS UseDoor() function to call the JS Event onUse() based upon the type of the item passed in.
	Fixed an issue causing AreaCharacterFunction and AreaItemFunction to return the number of objects they encountered
		rather than the number of times the function returns a "true" value.
	Modified TriggerEvent() to return true or false based upon the return value of the function.
	Moved doors out to JS.

7/01/2006 - Xuri
	New "AI"-Script: Cows may now (randomly) defend themselves from doubleclicks by falling over.
	Corrected various errors with liquid-containers (pitchers, bottles, goblets, etc.)

7/01/2006 - grimson
	Added new tag "MOUNTID" to creatures DFN, if this is set to the ID of a mount item the creature will
	be mountable.
	Updated creatures.dfn to make use of the MOUNTID tag.
	Removed CChar::IsValidMount( void ) as it is no longer of any use.

6/30/2006 - grimson
	Fixed a bug that caused the offline HTML files not to be written in some cases.
	Catch Serverlist entrys with less than 3 sections, these caused a crash when parsing the ini.
	Added %24time and %tstamp to HTML templates, %24time return the current time in the 24 hour
	format, %tstamp returns a unix timestamp.

6/29/2006 - grimson
	Let chars run if they follow a running char.

6/27/2006 - grimson
	Allow the body id to reach 0x3E2, so that the "dupre" body can be used without a problem.

6/27/2006 - grimson
	Changed cMagic::SummonMonster() so that it creates summoned from DFN entrys to make it easier to
	customize them.
	Added magicsummon.dfn to the npc section, it contains the dfn entrys for the creatures that can
	be summoned.

6/26/2006 - grimson
	Added an entry to jse_fileassociations.scp for the new oilcloth.js script.

6/26/2006 - giwo (0.98-3.6g) [3.7 RC]
	Fixed an issue causing not every instance of skill gain to use the amountToGain specified in skills.dfn.
	Changed MAX_NAME back to a 60 byte limit (note some Character packets only support 30 bytes).
	Moved CChar::lockstate and atrophy into PlayerValues_st
	Cleaned up CSkills::Atrophy and renamed it to HandleSkillChange() to better reflect it's functionality.

6/25/2006 - Xuri
	Updated fishinglist.dfn with generic loot (paintins, weapons, gems, various flotsam)
	Updated create/tailoring.dfn, items/gear/provisions.dfn and items/itemmenu.bulk.dfn with new oil cloth
	Fixed the 'STAMINA command in stats.js. Had ".isChar" misspelled as ".isCHar"
	Added new JS-script: oilcloth.js - Functional oil cloths, used for cleaning poison off of weapons
	Character can no longer use locked down potions or food

6/25/2006 - grimson
	Fixed loading of tempeffects when there is more than one effect saved.
	Increased the damage values of summoned creatures a bit.
	Fixed magic field effects.

6/25/2006 - grimson
	Fixed the output of the time command, it was confusing midnight and noon.

6/25/2006 - Xuri
	Characters no longer turn criminal from attacking their own pets/summoned creatures
	DFN: Updated spells.dfn with correct reagent requirements
	Fixed several bugs with the JS-scripted clumsy, heal, feeblemind and magic-arrow spells:
		Could cast while having weapons equipped
		Could cast while jailed
		Could cast without consuming any reagents
		SoundEffects weren't working properly
		Healing would (by design) subtract health from the caster
		Debugmessages weren't commented out

6/24/2006 - grimson
	Fixed two bugs in doLight() where we were sending the wrong light level to players.

6/23/2006 - grimson
	Changed the way the owner of an object is stored to use the serial of the owner.

6/23/2006 - grimson
	Changed checkPetOfflineTimeout() to ignore player vendors.
	Remove tempeffect number 44 as it is no longer used.

6/23/2006 - grimson
	Don't let normal players put items into the backpack of a player vendor they don't own.

6/22/2006 - giwo (0.98-3.6f)
	Fixed an issue causing a crash if a null socket was passed to JS CreateBlankItem() or CreateDFNItem().
	Fixed an issue causing houses not to be able to be placed in many valid locations.
	Reduced the checking area when placing a house around small houses in house.dfn
	Fixed an issue causing boats to always be placed at z -5 regardless of the water level.

6/22/2006 - grimson
	Don't add the weight entry to the tooltip of items that weight nothing.
	The "collect" command now also works when using the name of the vendor.

6/22/2006 - grimson
	Added the "view", "status" and "dismiss" commands for player vendors (updated dictionaries).
	Allow pet friends to mount the pet.

6/22/2006 - grimson
	Fixed a few places where looking into a pack from a player vendor would have been snooping.
	Added price and description information to the item tooltips of player vendors.

	DFN changes:
		Added a player vendor deed to misc_deeds.dfn.
		Put the player vendor deed into the add menu.
		Changed the player vendor entry in the malevendors.dfn so that they are no longer
		flagged as normal shoopkeepers.

6/20/2006 - giwo (0.98-3.6e)
	Updated the Makefile.am.
	Fixed an issue causing items to duplicate when moving around stacks larger than 32,767.
	Fixed an issue causing timers not to be properly reset by the JS engine.
	Fixed a DFN issue causing one to be able to create a board from a board.
	Fixed a DFN issue causing item values to be loaded improperly.

6/15/2006 - giwo (0.98-3.6d)
	Modified names in the AITypes enum to fit naming conventions.
	Minor optimizations in ai.cpp.
	Removed an unused worldsave tag handler from CBaseObject.
	Modified names in the CommandLevels enum to fit naming conventions.
	Modified FLAGS and SOUNDFX DFN tags in spells.dfn to allow for a full integer as well as the current split format.
	Simplified some functions in CPacketStream.
	Changed MAX_NAME back down to 30 characters as all character name packets sent to the client max out at 30 bytes.
	Made more use of IsWeightedContainer() in weight.cpp to streamline layer handling.

5/22/2006 - Xuri
	Added weapon type classifications for all weapons from the mondain's legacy expansion

5/14/2006 - grimson
	Fixed the "Large Dragon Boat" deed.

5/07/2006 - giwo (0.98-3.6c)
	Forced CItem::DecayTime to reset when decayable was set to true.
	Fixed an issue causing keys not to function on planks.
	Added JS socket methods GetSByte(), GetSWord(), GetSDWord(), to allow pulling negative numbers
		from the socket buffer.

5/02/2006 - Xuri
	Fixed the ever-swinging training dummies
	Fixed wrong item being added when crafting fishing poles

4/22/2006 - Xuri
	Fixed the guardzone for Delucia, was previously set to the graveyard north of the town

4/18/2006 - Xuri
	Items added using the RADD command in repeatingcmds.js will no longer decay by default
	Fixed the guardzone for Ocllo, X2 and Y2 were mixed up

4/07/2006 - grimson
	Removed the last change that should prevent items from decaying inside multis, as
	this is already done in a different part of the code.

4/07/2006 - grimson
	Don't add the amount of items to the item name in buy/sell gumps, as it is already
	shown in the gump.
	Don't let items decay when they are inside a multi, so if a player places decorations
	or furniture in his house it stays there.

	DFN Changes:
		Added GOOD tags to buyable items, so it's easier for an admin to use the
		advanced trade system.

4/06/2006 - grimson
	Fixed saving of the last used IP in the account files, and corrected the naming
	for the	contact field when saving the account files.

4/06/2006 - giwo (0.98-3.6b)
	Fixed an issue with accounts causing the FLAGS value not to function properly.
	Consolidated some code in CAccountsClass.
	Fixed some signed/unsigned mismatches in CAccountsClass.
	Modified Combat DEF calculations to remove superfluous code.

4/06/2006 - grimson
	Updated potion.js, so heal potions work again.

4/06/2006 - grimson
	Catch some more client crashes with speak, that's in the wrong colour.
	Update the reputation flags of a NPC when the NPCFlag get's loaded.

	DFN Changes:
	Pushed up the damage values of most NPCs.

4/06/2006 - giwo (0.98-3.6a)
	Fixed a rather substantial issue causing some character values to save incorrectly.
	Fixed a sign mismatch with GuildFealty.

4/05/2006 - grimson
	Changed the use of the HP DFN tag for items so you can specify a range for a random value.

	DFN Changes:
	Updated the stats for all weapons to fit the pre-AOS values. Pushed up the damage values
	of AOS and SE weapons so that they are in the same area as the other weapons.

4/04/2006 - giwo (0.98-3.6)
	Removed unused level value passed with Console.Warning() and Console.Error().
	Removed JS Console prop .level
	Modified JS Console Methods Warning() and Error() to remove the unused level value.
	Fixed several issues with mapdiff and staticdiff handling.
	Fixed a bug causing a crash when calling JS Event onGumpInput.
	Merged CMultiObject vectors ownerList and banList into a single map housePrivList, to allow multiple owner/banned levels
		and ensure there are no duplicate characters on the lists.
	Removed many superfluous uses of CChar::Dirty( UT_STATWINDOW ).

3/23/2006 - giwo (0.98-3.5o [3.6 RC])
	Minor changes to cSkills::Fish().
	Fixed an issue making it impossible to open Elven NPC paperdolls.
	Removed some typedefs that were no longer used.
	Moved CChar values townpriv and townvote to PlayerValues_st
	Moved CChar values foodList, hungerWildChance and hungerRate to NPCValues_st
	Removed CChar::inBuilding in favor of using a bools flag.
	Removed handling code for several unused Character values.

3/23/2006 - grimson
	Fixed a bug with the JS override for the combat damage calculation that caused 0
	damage to be applied when the attacker has no script attached and the global script
	doesn't exist eigther.

3/22/2006 - grimson
	Small fix to ApplyDamageBonuses() caused by my previous commit.

3/22/2006 - grimson
	Removed the code to raise your resistance value upon elemental damage, this can be done better in JS.
	Modified  CBaseObject::DumpBody() and CBaseObject::HandleLine() so that all resistance values get saved
	and loaded in/from the worldfiles.
	Added a new JS event:
		onDamage( damaged, attacker, damageValue )
		This will be fired everytime the char "damaged" gets damaged, the attacker can be a char or NULL.

3/21/2006 - grimson
	Changed the return value of OnCombatDamageCalc() to a SI16, I accidentially declared it to
	be a SI32.
	Replaced the JS Char property .defense with the new JS Char Method:
		mChar.Defense( hitLoc, damageType, doArmorDamage );
	so you can get all the different defense values for a char.

3/21/2006 - grimson
	Call the OnHungerChange JS event in the SetHunger() function of chars instead of calling
	it in every part of the code the where the hunger gets changed.

	Added a new JS event:
	onCombatDamageCalc( attacker, defender, getFightSkill )
		This event is called everytime combat damage is calculated. You can do your own damage
		calculation and return the damage to override the engine damage calculation, or return
		a negative damage value to use the engine damage calculation.


3/21/2006 - grimson
	A small fix to ApplyDamageBonuses(), the race damage of a weapon was applied to the final
	damage instead of the weapons base damage.

3/20/2006 - giwo
	Fixed a glitch in the CPExtendedStats packet.
	Modified CPIPopupMenuSelect to prevent opening the paperdoll of a non-human.

3/20/2006 - giwo (0.98-3.5n [3.6 RC])
	Fixed an issue with CPExtendedStats causing statlocks not to display in the stat window.
	Modified CChar::skilllocks and atrophy to save stat values to the worldfile.
	Fixed an issue with CChar::skill value causing possible data corruption.
	Fixed an issue causing the Backpack entry on a popup menu to display as selectable when the character
		should not have a pack (IE a non-pack animal).
	Made CBaseObject::SetWeight() a virtual function and overloaded it in CChar and CItem.
	Modified CChar::SetWeight() to automatically Dirty our object for a statwindow update.
	Simplified some DropItem() handling.
	Moved CBaseObject updateTypes to CChar as there is only one type of item update, and added
		a ClearUpdate() function to reduce superfluous packet sends.

3/20/2006 - grimson
	The JS item property .devinelock was sent as INT though it is a bool.
	Some small fixes to the tweak menu for items, this still had parts for a non existant MoreB
	value in it which shiftet some parts off, this also includes updated dictionaries.

3/19/2006 - grimson
	Renamed Get/SetElementResist() to Get/SetResist as we now handle all resistance types in it.
	Removed SetDef(), GetDef() and the def variable from CBaseobject.cpp and store armor values
	as physical resistance together with the other resistance values.
	Removed calcElementDef(), getElementDef and checkElementDef from combat.cpp and handle all
	defence calculations in calcDef(), getArmorDef() and checkDef().
	Removed JS char property .armour and item property .def, added a new method for chars and
	items .Resist(). That method takes either one value, the resistance type and returns the
	resistance value of that char/item, or two values, the resistance type and the amount the
	resistance value should be set to.

	JS changes:
		Updated JS scripts to use the new .Resist() method instead of .def/.armour

	Current resistance types are:
		1 - Armor
		2 - Light
		3 - Water
		4 - Cold
		5 - Heat
		6 - Energy
		7 - Poison

3/19/2006 - giwo (0.98-3.5m [3.6 RC])
	Moved create menu structs to skills.h as they don't need to be in global scope.
	Fixed several issues with pack horse handling
	Modified DropOnNPC so GM's can drop items directly on an NPC to be placed in their pack.
	Modified response handling and removed some superfluous code.
	Fixed a crash when UOX3 shut down due to an invalid directory entry.
	Locally declared vector3D line2D and line3D as they are only used in lineofsight.cpp
	Fixed water NPC's swimming under statics (bridges).
	Fixed some false positives that were being generated by point3::Mag3D() by using a larger storage container.

3/18/2006 - giwo (0.98-3.5l [3.6 BETA])
	Fixed an issue causing GM yell messages with trigger words in them not to be broadcast.
	Added and made use of a WanderTypes enum throughout the source.
	Added housekeys.dfn to dfndata/items/ and made house creation rely on the script entries therein.
	Optimized NPC walking a bit, and moved NPCWander handling into its own function.
	Further updated and modified calc_walk() and AdvancedPathFinding() to handle the Z plane.
	Removed CMovement::HandleRegionStuffAfterMove() as it was superfluous.
	Rewrote CMovement::OutputShoveMessage() to fix several minor issues.
	Updated CMovement::MoveCharForDirection() to reduce extra function calls and make use of CMapHandler::ChangeRegion()
	Added NEWBIE option to JS SET command.

3/18/2006 - grimson
	Fixed CHandleCombat::calcDamage() I was submitting the base damage to the defense calculation.

3/18/2006 - grimson
	Another change to CChar::Damage(), if the attacker becomes criminal make the owner of it
	criminal too.
	Changed CHandleCombat::ApplyDamageBonuses() so that elemental damage is doubled when the
	race is weak to that element, also double magic damage only on NPCs.
	Changed CHandleCombat::Kill() so that only not tamed animals eat their victims.

3/18/2006 - grimson
	Changed CChar::Damage() to also display the damage to the owner of the attacker, so a
	player can also see the damage his pet does.

18th March, 2006 - Maarc
	Removed some unused properties/methods of the console that have never been used
	Begun construction of some placeholder code for party related works, not committing the factory code until some testing can occur first
	Essentially, this just updates the handling for it which currently does nothing, and gives an insight into how it would be done

18th March, 2006 - Maarc
	Adjusted SE_ApplyDamageBonuses and SE_ApplyDefenseModifiers as they were using the same parameter for attacker and defender
	Updated documentation somewhat

3/18/2006 - grimson
	I only added part of the ApplyDefenseModifiers() and ApplyDamageBonuses() changes to CVS,
	fixed it now.

3/18/2006 - grimson
	Changed ApplyDefenseModifiers() and ApplyDamageBonuses() to make shure they return ints.
	Changed SE_ApplyDamageBonuses() and SE_ApplyDefenseModifiers() to fix invalid damage values
	when a script sends float values.
	Changed criminal() so it also takes the murderer state into account, as this overrides the
	criminal flag.

	JS:
		Updated MagicDamage() in level1targ.js, it now uses the new functions and should be
		equal to the source version of MagicDamage().

3/18/2006 - grimson
	cScript::OnEquip() and cScript::OnUnequip() were adding the parameters in the wrong order.

3/17/2006 - grimson
	Changed AdjustRaceDamage() to also use the new ApplyDefenseModifiers() function.

3/17/2006 - giwo (0.98-3.5k [3.6 BETA])
	Modified Gates so they are decayable by default, and will only decay if decayable.
	Updated GM and Counsellor privs in commands.dfn, also placed a bit guide for the PRIVS value.
	Fixed LoS checks on the Z plane in multis.
	Fixed an issue causing GM broadcasting (! then space) not to function.
	Removed some superfluous speech code.
	Changed the command YELLALL to YELL
	Removed several old DFN tags that were no longer used.
	Removed default PRIV=0 tag from baseitem.dfn, as it would unset decayable value.
	Changed PRIV1= tag to PRIV= in npc.dfn.

3/17/2006 - grimson
	Catch negative damage values in cMagic::MagicDamage() and apply 1 damage in that case.

3/17/2006 - grimson
	Moved defense modifications into CHandleCombat::ApplyDefenseModifiers().
	Moved damage bonuses into CHandleCombat::ApplyDamageBonuses().
	Moved the calculation of the hit location from CHandleCombat::DoHitMessage()
	into CHandleCombat::CalculateHitLoc().
	Added ReactOnDamage() to CCHar, currently it only makes the char attack the
	char that inflicted the damage.
	Reduced CChar::Damage() to show, the damage, apply the damage, handle the
	reputation effect, the peace breaking effect and the chars death.

	JS changes:
	New JS functions:
		damage = ApplyDamageBonuses( damageType, attacker, defender, fightSkill, hitLoc, baseDamage );
			Note: Attacker and defender need to be valid chars.
		damage = ApplyDefenseModifiers( damageType, attacker, defender, fightSkill, hitLoc, baseDamage, doArmorDamage );
			Note: Attacker can be NULL, fightSkill will then be ignored.
	New char function:
		mChar.ReactOnDamage( damageType, attacker );
			Note: damageType is currently unused.
	Changed char function:
		mChar.Damage( amount, attacker, doRepsys );

17th March, 2006 - Maarc
	Changed the INI loading code so that it uses a Script rather than custom code

3/17/2006 - grimson
	Changed CPICreateCharacter::newbieItems() so that it uses the newbie.dfn entrys [DEFAULT MALE] and
	[DEFAULT FEMALE] to add the basic clothing to new chars, and added those entrys to newbie.dfn.
	Changed newCarveTarget() so that it uses the new [CARVE HUMAN] entry from carve.dfn to create the
	body parts, and added this entry to carve.dfn. Note: the second value used on the ADDITEM tags
	in the [CARVE HUMAN] entry is not an amount, it's the dictionary entry used for naming the body
	part.

3/16/2006 - giwo (0.98-3.5j [3.6 BETA])
	Fixed an issue with AdvancedPathFinding() causing NPC's to flee constantly.
	Fixed an issue with NPC fleeing that checked against Strength rather than MaxHP.
	Defaulted weather damage to every 60 seconds (rather than every second)
	Fixed an issue causing a message to display damage taken by weather when no damage was taken.
	Fixed an issue with CRace causing a race with no elemental damage types to have most/all elemental damage types.
	Fixed a server crash in magic.
	Fixed an issue causing items in a paperdoll to not be targetable.
	Fixed an issue with LoS causing items to not block on a diagonal plane.
	Fixed an issue causing multi's not to block LoS.
	Minor fixes, cleanups, and optimizations to LineOfSight.
	Modified DoubleClick() so a character inside a multi can open an item outside a multi (as long as he can see it).

16th March, 2006 - Maarc
	Updated playDeathSound to simplify some of the code for males/females
	Updated code so that we don't use MFLAGGET/MFLAGSET - apparently we have a std::bitset class that we can use!  Also makes it somewhat more readable as well.  Cheers Punt for the suggestion.
	Renamed __ACCOUNTSADM_BLOCK__ to CAccountBlock
	Removed dead code from accounts (stuff that was just never called at all)
	Removed Get/Set Word/Bit/BitRange from CBO, as it's not being used
	Removed genericDWords from CBO, as they're not being used, and are largely superfluous with custom int/string tags in JS

3/15/2006 - giwo (0.98-3.5i [3.6 BETA])
	Fixed an issue causing pet guarding on items in a house not to function.
	Fixed an issue causing boat items not to get added to the multi.
	Cleaned up CPIDoubleClick::Handle() routine.
	Fixed an issue allowing players to place their items in invalid locations.
	Fixed a possible issue causing doors to block LoS to themselves.

3/14/2006 - giwo
	Fixed a server crash caused by my recent changes to Location-Targeting spells.

3/14/2006 - giwo (0.98-3.5h [3.6 BETA])
	Fixed a combat issue allowing enemies to fight if on the exact same location but a different Z.
	Modified guard handling so when guards are globally deactivated any existing guards will not teleport.
	Fixed an issue causing NPC's to be invisible.
	Fixed some issues causing items behind a door to be within a characters LoS.
	Adjusted erroneous Z values in house.dfn (Causing outer doors to not be part of the multi).
	Added a LineOfSight() check to prevent opening containers on the other side of walls.
	Modified the inMulti() routine to take into account tile height.
	Simplified newCarveTarget() a bit.
	Fixed a possible issue when calculating multi tile heights.
	Fixed an issue causing Characters to "fall" immediately after being placed on their new boat.
	Further cleanups and rewrites to CMulHandler and its related structures.

3/15/2006 - grimson
	Added PHYSICAL to WeatherType enum, so we can also use it represent physical damage.
	Changed CChar::Damage() to handle armor and resistance effects, it also handles the repsys,
	peace breaking, elemental weakness, displays the damage, creates a reaction if an attacker
	is given and calls CChar::Die() if the hp drop below 1. It takes the following values:
		SI16 damageValue	- The amount of damage to be done.
		CChar *attacker		- The char that caused the damage.
		bool doRepsys		- Do reputation handling (criminal, murderer, karma and fame).
		WeatherType damageType	- The type of damage, use NONE to ignore armor/resistance, use
					  PHYSICAL to use normal armor, anything above is elemental damage.
		SI08 hitLoc		- The hit location, use 0 for the complete body or -1 to randomly
					  calculate the hit location.
		UI08 fightSkill		- The skill used to create the damage.
		bool doArmorDamage	- Damage the armor part that has been hit.

	The JS function .damage can also take all of these values.

	Changed CChar::Die() to handle the death of chars, it takes two values:
		CChar *attacker		- The char that caused the death.
		bool doRepsys		- Do reputation handling (murderer, karma and fame).

	Updated the usage of CChar::Damage() in most areas to reflect the changes and removed reputation
	and death handling in those areas as this is now taken care of by CChar::Damage().

3/14/2006 - grimson
	Fixed item IDs for human corpses in newCarveTarget().

3/13/2006 - giwo (0.98-3.5g [3.6 BETA])
	Converted Numeric DFN's to a Signed Long rather than unsigned by default for *nix compatability.
	Merged jr's fixes for cygwin compatability and fixing some minor gameplay issues.
	Modified ModelBoat() to automatically move you off the boat (if near land).
	Fixed a crash bug involving boats.
	Changed several calls checking against type IT_PLANK to CanBeObjType( OT_BOAT ).
	Fixed an issue causing boat holds to "explode" when opening them.
	Fixed an issue causing containers inside containers on the ground to be "too far away".

3/13/2006 - grimson
	Changed CBaseObject::SetWeight() and CBaseObject::SetID() so they also update the weight
	of the container the item is in, when it is an item and when it is within a container.

13th March, 2006 - Maarc
	Altered the CBO resistances code to use an array rather than a number of variables
	Note that we're still only saving out a subset of these resistances, because only a subset ever get checked at the moment
	This could easily change in future, with people wanting to use other elemental stuff
	Adjusted CItem::CopyData() so that it copies all the WeatherDamage values instead of only a couple
	Upgraded the container size on weatherBools, as the number of weather entries has moved beyond a UI08 size

3/13/2006 - grimson
	Changed CPICreateCharacter::newbieItems() so that the default items aren't placed inside
	the players backpack until they have their final ID, to prevent the adding of wrong weight
	values.

3/12/2006 - grimson
	Changed the z value for various LineOfSight() calls so that we actually check whether
	we can see the face of the targeted char instead of his feets.

3/12/2006 - grimson
	Added element resistance calculation to weather damage.
	Fixed calcElementDef() and getElementDef() so that the chars basic element resistance
	is always added.
	Changed MagicDamage() so that we always do at least a little bit of damage.

3/12/2006 - grimson
	Removed DamageTypes enum and added POISON to WeatherTypes.
	Renamed DamageResist functions into ElementResist and moved them to cBaseobject.cpp.
	Renamed DFN tag DAMAGERESIST to ELEMENTRESIST and use it also for items.
	Added DFN tag POISONDAMAGE to items so that they can also do poison damage on attacks.
	Added functions calcElementDef(), getElementDef() and checkElementDef() to combat.cpp
	to calculate the resistance against elements similiar to the def value of armor.
	Changed AdjustRaceDamage() to also take into account the elemental resistance of the target.
	Use calcElementDef() in MagicDamage() similiar to calcDef() in calcDamage() to take the
	elemental resistance into account.

3/12/2006 - giwo (0.98-3.5f [3.6 BETA])
	Removed CMulHandler::AverageMapElevation() as it was superfluous.
	Removed CTileUni height in favor of top, to reduce calc_walk() calculations.
	Removed CTileUni id as its use was unnecesarry.
	Rewrote CMovement::calc_walk() to improve overall readability and speed.
	Merged CMovement::calc_WaterWalk() with calc_walk().
	Removed higher() as UOX_MAX() does the same thing.
	Removed CMovement::validNPCMove() as it was superfluous.
	Modified house placement to make it impossible to place a house on the ocean.

12th March, 2006 - Maarc
	Changed some id >= 0x4000 comparisons to CanBeObjType( OT_MULTI ), for clarity
	Fixed a bug with applying NPC sections where if you specified ALCHEMY values, it would fail to apply correctly

3/11/2006 - giwo (0.98-3.5e [3.6 BETA])
	Fixed an issue causing items with no layer to not change the weight of a character.
	Fixed an issue causing spells that require a targeted location not to function.
	Fixed an issue allowing one to build a house or boat far from their location.
	Fixed an issue allowing one to build a multi directly on top of another multi.

3/11/2006 - giwo (0.98-3.5d [3.6 BETA])
	Removed CChar::TempWeight() as it was superfluous.
	Fixed an issue causing Trade Windows to add weight to characters.
	Fixed some minor issues with weight calculations.
	Removed CChar:: bools2 and made more use of the bools value.
	Renamed CMapStuff to CMulHandler to better describe its function.
	Renamed MapStaticIterator to CStaticIterator to meet class naming standards.
	Renamed MultiItemsIndex to MultiItemsIndex_st to meet structure naming standards.
	Removed MapData_st fileSize as it was superfluous.

3/11/2006 - grimson
	Fixed a bug where buying the whole stock of an item deleted that item from the vendors container.

3/11/2006 - grimson
	Added new ini setting:
		USECHARRESISTANCE=# If this is set to 0 the chars resistance won't increase by itself.
	Slowed the increase of resistance quite a bit down.

3/11/2006 - grimson
	Added in first versions of fire, cold, energy and poison resistance, it's currently used
	in cMagic::MagicDamage() and cMagic::PoisonDamage(). You can set the resistance for npcs
	using a new DFN tag:
		DAMAGERESIST=# # # # 	Where the first number is fire, the second cold, the third energy
					and the last number poison resistance.
	The resistance for a damage type will rise everytime you get hit by this damage type, but the
	higher your resistance already is the slower it will rise.

3/11/2006 - grimson
	Removed version number for chars.
	Added .tempWeight JS property to chars, so you can safely modify the weight of chars in scripts.
	Added calcLowDamage() and calcHighDamage() functions to combat.cpp and use them in
	CPStatWindow::SetCharacter() to set the DamageMin and DamageMax values.

3/11/2006 - grimson (0.98-3.5d [3.6 BETA])
	Added a version number to chars, it is defined in DEFCHAR_CHARVERSION and use it in
	CChar::DoVersionUpdates() to allow forced updates. Used this to force a weight recalculation
	on possibly bugged chars.

3/11/2006 - grimson
	Don't save the weight in cChar.cpp, it's already saved in cBaseobject.cpp.
	Fixed a bug where items without a layer didn't add to the chars weight.
	Fixed a bug in CWeight::calcCharWeight() that added the weight of the backpack
	twice.
	Changed CMapHandler::Load() so that PostLoadProcessing of chars is done after
	PostLoadProcessing of items, or else the forced recalculation of the chars
	weight doesn't work.

3/10/2006 - giwo (0.98-3.5c [3.6 BETA])
	Modified CMapStuff SeekLand() and SeekTile() to return a reference rather than force one to pass an object to set.
	Modified CMapStuff SeekMulti() to return the length rather than force one to pass a value to set.
	Removed MapStaticIterator::GetTile() as it was superfluous.
	Removed CMapStuff IsTileWet(), DoesTileBlock(), and IsTileSurface() as they were superfluous.
	Removed CMapStuff TileMem and MultisMem, replacing them with functions to return the same data.
	Changed MultiItemsIndex lz and hz to SI08 values.
	Changed MapStaticIterator GetPos() to return an SI32.
	Removed MapStaticIterator tileid as it was superfluous.
	Modified UOXFile::eof() to return a bool rather than an int.
	Miscellaneous minor changes and cleanups.

3/10/2006 - grimson
	Added two sysmessage when feeding a pet.

3/09/2006 - giwo (0.98-3.5b [3.6 BETA])
	Fixed a crash when using ClilocMessage().
	Fixed an issue when climbing stairs.
	Fixed some issues with TriggerWord handling (more work needs to be done on this).
	Modified A* Pathfinding to work properly with our NPC's PathToFollow queue.

3/08/2006 - giwo (0.98-3.5a [3.6 BETA])
	Began rewriting .mul file handling.
	Fixed an issue causing a possible crash with malformed JS scripts.
	Removed several superfluous functions from UOXFile class.
	Updated CTile and CLand to properly read in tiledata.mul
	Modified .mul file structures to meet struct naming standards.
	Changed static tile reading code to allow a variable number of statics.
	Fixed several issues with mapdiff and staticdiff handling.
	Added A* Pathfinding routine (note that it is not used in current code,
		as there are known compatability issues).

3/08/2006 - giwo (0.98-3.5)
	Fixed a possible issue caused by passing float values to JS func RandomNumber()

3/08/2006 - grimson
	Fixed CPIAllNames3D::Handle() so that SHIFT+CTRL actually shows the names of NPCs.

3/07/2006 - grimson
	Fixed LineOfSight() not working when you stand directly next to the target.
	Changed checkItemLineOfSight() so that it checks whether you can see the base or
	the top of the target item.

3/05/2006 - giwo (0.98-3.4w [3.5 RC])
	Minor changes to the JS Handling.
	Modified UOXCFile handling to remove all props and added .EOF(), .Pos(), and Length() methods.
	Fixed an issue causing items not to dissapear when 'removed
	Fixed an issue causing characters to randomly dissapear around NPC's
	Fixed an issue causing items and characters to be updated when out of range.
	Fixed a VC2005 Compile issue.
	Included a default VC 2005 Project/Solution file.

5th March, 2006 - Maarc
	Updated loading code so that it displays a more accurate percentage during loading

3/05/2006 - giwo (0.98-3.4v [3.5 BETA])
	Added the Script # to the JS Error Reporter to make debugging easier.
	Fixed an issue causing JS scripts to give useless error messages on server startup.
	Modified the region debug code to not default to on in debug mode.

3/04/2006 - grimson
	Changed cMovement::SendWalkToPlayer() so that the sequenz number fits the description
	in CPacketReceive.cpp.
	Changed CPIResyncReq::Handle() so that it actually does resend everything around
	the player.

3/04/2006 - grimson
	Added a new ini setting:
	COMBATARCHERRANGE=#  This defines the range at which archers stop charging
			     the target in combat. (Default is 7)

3/03/2006 - grimson
	Removed the IsSurface check of dynamic tiles from cMapStuff::CanMonsterMoveHere(),
	as many landscape tiles don't have the surface flag set. So it prevented valid spawns.

3/03/2006 - grimson
	It's better to recalculate and check the whole z coordinate of a stored
	location to make shure nothing has changed since we stored it.

3/02/2006 - grimson
	Added two maps to spawnregions to make checking for valid locations easier.
	Check if the z value of stored locations still match the dynamic z value of the
	current locations to track whether dynamics have changed.

3/02/2006 - grimson
	Added two vectors to spawnregions to store valid locations.
	You can define valid locations using the new DFN tags:
		VALIDLANDPOS=#,#,#
		VALIDWATERPOS=#,#,#
	Changed FindCharSpotToSpawn() and FindItemSpotToSpawn() so that they first check
	agains the list to see whether a location is valid. If the location is not in the
	list but valid it will be added to the list. If no valid location has been found
	it tries to get a random one from the list of already stored locations.

3/01/2006 - giwo (0.98-3.4u [3.5 BETA])
	Fixed some issues caused by my previous changes to objects in mapregions.
	Fixed some issues when setting containers.
	Fixed an issue causing targeting cursors to sometimes target a character when the target should be invalid.
	Fixed an issue causing JS Gumps not to function.
	Added detailed packet logging to CPITargetCursor.
	Fixed a minor issue with axe.js

2/28/2006 - giwo (0.98-3.4t [3.5 BETA])
	Added some additional debug messages to Region handling.
	Fixed a crash involving weather.
	Fixed an issue that would cause invalid objects to be left in mapregions.

2/28/2006 - giwo (0.98-3.4s [3.5 BETA])
	Modified the JS Object creation to reduce memory waste.
	Made some minor modifications to CUSTOMSTRINGTAG and CUSTOMINTTAG handling.

2/28/2006 - grimson
	Updated cCharStuff::FindSpotForNPC() to also allow spawning of water and amphibian NPCs.

2/28/2006 - grimson (0.98-3.4r [3.5 BETA])
	Replaced the WATERCREATURE tag from creatures.npc with a new tag:
		MOVEMENT=WATER for creatures that can only move in water.
		MOVEMENT=LAND  for creatures that can only move on land.
		MOVEMENT=BOTH  for creatures that can move on land and in water.
	Added calc_WaterWalk() function to movement.cpp and changed the calc_move() function so that
	it uses it for water creatures and amphibians.
	Added IsStaticWet() and CanSeaMonsterMoveHere() functions to mapstuff.cpp.
	Added FindCharSpotToSpawn() to cSpawnRegion.cpp and use it when spawning NPCs, renamed
	FindSpotToSpawn() to FindItemSpotToSpawn() and use it when spawning items.

	DFN changes:
		Updated creatures.dfn to use the new MOVEMENT tag.
		Updated tiles.dfn to set a water tile to wet that was missing that flag.

28th February, 2006 - Maarc
	Added archery/spell breakage on PC movement.  If a player successfully moves, then the spell they are casting fails, or their archery shoot timer is reset.

27th February, 2006 - Maarc
	Updated code that uses |= and &= to use MFLAGSET and MFLAGGET instead, promoting them to a higher public level.  Down to only a very few number of references like that now
	Updated the race code because it was getting out of sync with the WeatherTypes.  The two were bound together in a number of ways, and it's now more generic and tied closer

2/26/2006 - grimson
	Added functions IsStaticSurface() and IsTileSurface() to mapstuff.cpp and use them in
	CanMonsterMoveHere() to prevent spawnregions from spawning NPCs in places where they
	can not move or shouldn't be able to move to, like display cases.

2/26/2006 - giwo (0.98-3.4q [3.5 BETA])
	Fixed some areas that could possibly cause MapRegion corruption.
	Fixed a VC 2005 Compiler warning.
	Defaulted CreateItem() to set decayable to true.

2/25/2006 - giwo (0.98-3.4p [3.5 BETA])
	Added some example usages of ClilocMessage().
	Added support for packet 0xC1, sending cliloc messages.
	Added two ClilocMessage() functions, one for direct-to-socket (system) messages, and one
		for object-speech (to a socket or to all sockets in range).

2/26/2006 - grimson
	Modified cCharStuff::addRandomLoot() so that loot lists can contain links to other loot lists.

	DFN changes:
		Changed the the numbers in the LOOT tags of NPCs to random lootlist entrys.
		Fixed some GET tags in the armor dfns that were pointing to non existant items.

2/26/2006 - grimson
	Added a line of sight check to the isValidAttackTarget() function in ai.cpp so NPCs won't attack
	targets they can not see.

2/25/2006 - grimson (0.98-3.4o [3.5 BETA])
	Added another new JS property for chars:
		.setPeace=#  This handle the whole peacemaking effect, it will stop the char from attacking
			     and prevent him from attacking again until the given time is over or he got
			     enough damage.
	Updated the peacemaking.js to use the new property and to prevent peacemaking from affecting the
	char using it.
	Output a sysmessage to PCs informing them of the end of the peace effect. (Dictionarys again)

2/25/2006 - grimson
	Changed CHandleCombat::HandleNPCSpellAttack() to prevent NPCs from using spells when they
	are not allowed to attack.
	Changed cMagic::SelectSpell() to prevent PCs from using spells when they are not allowed
	to attack. Note: This doesn't effect JS implemented spells, use the .canAttack property
	in them to prevent the use of these spells.
	Output a sysmessage to PCs informing them that they can not attack. (updated Dictionaries)

2/25/2006 - grimson (0.98-3.4n [3.5 BETA])
	Changed CChar::WearItem() to not fire the onEquip event on world loads.
	Modified the TOPEACE tag so it can take a second value that sets the chance gain to recover
	from peacemaking upon hits.
	Modified cMagic::MagicDamage() and CHandleCombat::HandleCombat() to recover from peacemaking
	by calculating a chance using the chance gain set on TOPEACE and the number of hits.
	Added two new JS propertys for chars:
		.canAttack  Set this to 0 to prevent a char from attacking.
		.brkPeaceChance  Gets and Sets the chance gain to recover from peacemaking.
	Modified the .skillToProv and .skillToPeace propertys so they return the value of the corresponding
	skill for player chars.

2/25/2006 - grimson
	Fixed a bug that allowed health regeneration while the char was starving.
	Moved the bools for the fixed maxHP, maxMana, maxStamina into a bitmask.

2/25/2006 - grimson (0.98-3.4m [3.5 BETA])
	Changed the default of totame to 0x7FFF and allowed taming of NPCs with a value of 0.
	Changed DFN tags MANA and STAMINA so you can set a minimum and maximum value.
	Added new DFN tags:
		MANAMAX, STAMINAMAX  They work equal to the HPMAX tag.
		TOPROV, TOPEACE	     They set the minimum skill amount to provocate or peace a NPC.
	Added new JS propertys:
		.skillToProv  Can be used to get/set the amount of skill needed to provocate a NPC.
		.skillToPeace Can be used to get/set the amount of skill needed to peace a NPC.
	changed JS propertys:
		.maxstamina and . maxmana now work equal to the .maxhp property.
	Added the new JS propertys to the set command.

2/24/2006 - giwo (0.98-3.4l [3.5 BETA])
	Modified OnIterate() to de-allocate any JSObject it uses to free wasted memory.
	Merged all boolean values in cServerData to a single UI32 using bitmasking.

24th February, 2006 - Maarc
	Updated bitmask setting/getting code for CChar, making it a bit more friendly and less error prone
	Fixed a bug with rugs_carpets.dfn where a closing bracket was missing for object 0x1e41

2/23/2006 - giwo (0.98-3.4k [3.5 BETA])
	Fixed a crash when shutting down the server.

2/23/2006 - giwo (0.98-3.4j [3.5 BETA])
	Fixed some issues with Multi and Static height calculations.
	Moved Definition of global JS classes into CJSRuntime.
	Locked the JS Class prototypes for Garbage Collection purposes.

2/23/2006 - giwo (0.98-3.4i [3.5 BETA])
	Fixed an issue causing players to not disembark boats properly.
	Fixed an issue causing boat holds not to be made part of the multi.
	Updated the INI loading code to make it more verbose.
	Removed "Golden" health until we know when (if ever) OSI uses it.
	Created a new class, CJSEngine along with the files CJSEngine.cpp/.h
	Created a new class, CJSRuntime to allow multiple runtimes (for threading purposes).
	Moved JSObject creation and handling into CJSRuntime.
	Moved global JS Context and Runtimes into CJSRuntime.
	Moved JS Engine loading code into CJSEngine.
	Modified cScript so all JS Scripts on a runtime share a single context.
	Removed global.cpp from the project.

2/23/2006 - grimson
	Added a Dirty( UT_LOCATION ) to HandleDeath() in pcmanage.cpp to make shure the player gets
	properly updated when he dies.

2/23/2006 - grimson
	Changed TurnStuff() in boats.cpp to fix players getting stuck when turning the boat.

2/23/2006 - grimson (0.98-3.4h [3.5 BETA])
	Prevent spamming of weather packets when riding a boat.
	Added a quick fix to the inMulti() function to make boats workable again.
	Changed the HP and HPMAX tags so that you can set a minimum and maximum value.
	Removed the IsMounted() function and replaced all it's calls with the GetMounted function.
	Allow a food list to contain a link to another foodlist.

2/23/2006 - grimson (0.98-3.4g [3.5 BETA])
	Added three new ini settings:
		PETHUNGEROFFLINE=0/1 	Sets whether pets should hunger while the player is offline or not.
		PETOFFLINETIMEOUT=#  	Sets the offline time of a player in days after that a pet becomes
					wild again.
		PETOFFLINECHECKTIMER=#	Sets the intervall in seconds between checks for the player offline
					time.

	Added 2 new NPC values to CChar to state whether the char has been mounted or stabled and check those
	in the DoHunger() and the new checkPetOfflineTimeout() functions. And made them available to the JS
	engine as the 2 new propertys:
		.mounted	Can be used to get or set the mounted status
		.stabled	Can be used to get or set the stabled status

2/22/2006 - grimson
	Fixed a bug in CBase_Teleport() introduced by my earlier changes that caused teleports to other worlds
	to fail with big x and/or y coordinates.

2/21/2006 - grimson (0.98-3.4f [3.5 BETA])
	Changed JS function CBase_Teleport() to prevent player chars from being teleport into a invalid world
	which rendered the player char useless as the client cannot login using that char afterwards.
	Changed CheckCharInsideBuilding() to prevent a harmless error message when mounting a mount.
	Tweaks to the new hunger system:
		Tamed chars only hunger while the player that tamed them is online.
		Tamed mounts don't hunger when they are mounted by a player.

2/21/2006 - grimson (0.98-3.4e [3.5 BETA])
	Third part of the rewrote hunger system:
		Added a new AI type "aiANIMAL" with the number 6. This AI does nothing until the hunger level
		reaches a value of 4, then it looks for other animals, that don't have the aiANIMAL, and attacks
		them. If the hunger level goes below 2 it will attack everything in range, even player chars.
		If the animal kills it's target it's hunger level will be set to 6 again.

		Added 3 new JS propertys for chars:
			.tamedHungerRate returns or sets the rate the char hungers when it is tamed.
			.hungerWildChance returns or sets the chance of the char becoming wild if it's starving.
			.foodList returns or sets the name of the foodlist for the char.

	DFN Changes:
		Changed animals.dfn, added NPCAI=6 to all animals belonging to the race Predator.
		Changed races.dfn, all members of the race Predator change their hunger level every 300 seconds
		and get damaged for 5 points when starving.

2/21/2006 - grimson (0.98-3.4d [3.5 BETA])
	Changed cCharStuff::addRandomLoot() to look for the lootlist inside the items folder because it is there.
	Second part of the rewrote hunger system:
		Added a new DFN tag for tamed pets:
			FOOD=abc   This sets the name of the foodlist for the tamed item.
		Added a new list type for items:
			FOODLIST   Defines a list of item IDs a tamed char will accept as food.

	DFN Changes:
		Added a new file foodlists.dfn to the items folder containing an example list for horses.
		Added the horse foodlist to mounts.dfn.

2/21/2006 - grimson (0.98-3.4c [3.5 BETA])
	Do an immediate update of the charflag and the char upon taming and un-taming.
	First part of the rewrote hunger system:
		Moved hunger calculations and immediate effects to CChar::DoHunger( )

		You can now set hunger dependend on races, this uses a new tag in races.dfn:
			HUNGER=#,# the first value is the hunger rate the second the hunger damage.
				   Note for players char the settings from the uox.ini apply if
				   there are no settings specified for the race.

		Re-activated the pet-hunger system. Pets will now become hungry and upon starving
		there is a configurable chance that they may become wild again. Note: Pets won't
		die from hunger and their hunger value is reset after becoming wild again. The
		hunger rate and the chance to become wild again can be configured by a new tag:
			TAMEDHUNGER=# # the first value is the hunger rate, the second the chance in %
					of the pet becoming wild again. Note: The values are seperated
					with a space instead of a comma on this tag.
		To feed a pet just drag some food on it, currently all types of food work.

		There is also another new DFN tag:
			WILLHUNGER=# if this is set to 0 the NPC will not suffer from any type of hunger.
				     Note: You can also change that value for specific chars by using
				     the already existing .willhunger JS property.
	DFN Changes:
		Added the HUNGER=#,# description to the header of races.dfn.
		Added the TAMEDHUNGER tag to mounts.dfn with a hunger rate of 600 and a chance to become
		wild of 30%.

2/21/2006 - giwo (0.98-3.4b [3.5 BETA])
	Added AssocScript tag to effect saving (to make JS timers persistant).
	Updated JS .SetPoisoned() to take one value for changing a poison value without setting a new timer.
	Updated healing.js and made it function entirely in JS.
	Removed tempeffects case 14, 22, 23, and 24, as they are handled by JS now.
	Made items created with JS CreateBlankItem() decayable by default.
	Fixed some issues with axe.js, put tree-chopping on a timer with a skill delay.
	Fixed several issues where items were not decayable that should be.
	Defaulted JS CreateBlankItem() to set items to decayable.

2/20/2006 - giwo (0.98-3.4a [3.5 BETA])
	Added carpentry, tinker, leather repair, bow repair, bandage, sewing kit, mortar, and archery butte ID's to js_objectassociations.scp
	Corrected an issue causing Create menu's to double up when reloading the DFN's.
	Added a check to ensure a character has a backpack when coloring the "Pack" option in the popup menu.
	Fixed an issue causing character paperdolls to have incorrect spacing.
	JS Method .SetTag() now accepts boolean values (true/false).

2/20/2006 - giwo (0.98-3.4)
	Fixed an issue causing possible account corruption.

20th February, 2006 - Maarc
	Added two functions to the JS engine for characters, Heal() and Damage()
		void Damage( amtDamaged, [attacker] );
		void Heal( amtHealed, [healer] );
	The second parameters are optional, but basically it ensures that any change through here is tracked

2/19/2006 - giwo (0.98-3.3v [3.4 RC])
	Fixed a minor issue with regions.dfn causing Yew not to be considered a town.
	Added ability to xgate to a specific x, y, z. and worldnumber
	Fixed a minor issue with teleporter.js.
	Updated TeleportLocations to teleport any players pets that are inrange with them.
	Fixed a minor issue with Moongates teleporting Pets.
	Fixed a compiler error in VC 2003 caused by fabs(). Note that using fabs() should only be used with floats & doubles.
	Updated the grizzly and polar bear entries in creatures.dfn to have the proper sounds.
	Modified HandleCombat() so the target has a chance to gain Tactics when hit.
	Gave armor a 50% chance not to be damaged when successfully hit.
	Reduced armor damage to 0-1 points (rather than 0-2) when hit.
	Updated Towns to be escort regions by default in regions.dfn

2/20/2006 - grimson
	cMovement::SendWalkToOtherPlayers() didn't check if the chars are in the same world, added
	this now.

2/19/2006 - grimson (0.98-3.3u [3.4 RC])
	Renamed HandleWeatherChanges() to CheckCharInsideBuilding() as it is more apropriate.
	Stopped weather effects affecting ghosts of death players.
	Partially rewrote cMovement::SendWalkToOtherPlayers to correctly send chars and remove
	them from sight.
	Changed CPExtMove::CopyData() so the running state of player chars is correctly send.

2/19/2006 - grimson (0.98-3.3t [3.4 RC])
	Changed HandleWeatherChanges() so it updates the weather values of NPCs too.
	Changed reading the SNOWINTENSITY, RAININTENSITY and STORMINTENSITY in weatherab.dfn so that
	you can set a min and max value for the damage percent. See the examples in the updated weatherab.dfn.
	Added two new values to weatherab.dfn:
		STORMTEMPDROP this sets the amount the temperature drops when there is a storm
		RAINTEMPDROP this sets the amount the temperature drops when it is raining.

2/19/2006 - grimson (0.98-3.3s [3.4 RC])
	Fixed multiple issues in LineOfSight() that caused miscalculations of the coordinates that should be checked.
	Added line of sight checks to CPIPopupMenuRequest::Handle(), CBaseVendorResponse::CBaseVendorResponse() and
	CPIDblClick::Handle() to prevent people from using items and vendors through walls.

2/18/2006 - giwo (0.98-3.3r [3.4 RC])
	Updated the SkillCheck in HandleCombat() to be based upon the defenders tactics skill.
	Updated Skills::SkillCheck() to have a chance of success based upon the maximum skill + 100, rather than 1000.
	Fixed several issues causing spellbooks not to display properly.
	Fixed an issue causing Strength, Dexterity, and Intelligence to permanently drop when they are temporarily lowered.
	Updated skills.dfn a bit to improve skill gain between levels 0.00 and 1.00
	Added two new shield ID's to CItem::IsShieldType().
	Added spacing after fame titles to fix a paperdoll display issue.

2/18/2006 - grimson
	Fixed a small bug that prevent a storm from ending.

2/18/2006 - grimson (0.98-3.3q [3.4 BETA])
	Stopped saving the weather type in regions.wsc, this prevented changes from regions.dfn to apply.
	Make use of the SNOWINTENSITY, RAININTENSITY and STORMINTENSITY from weatherab.dfn, they are now
	used in calculating the damage a char takes from these elements. The damage is scaled by calculating
	a random number between 0 and the intensity, this number is then used as a percent value against
	the damage value in races.dfn.

2/17/2006 - giwo (0.98-3.3p [3.4 BETA])
	Fixed an issue causing the Snooping skill not to function.
	Fixed an issue causing GM Polymorph Menu not to function correctly.
	Fixed an issue causing Doors not to be added to the house they were part of.
	Moved the Multi check to containers specifically rather than on any item use, to enable use of house signs and doors from outside.

2/17/2006 - giwo (0.98-3.3o [3.4 BETA])
	Fixed an issue causing characters to randomly fall through house floors.
	Added a check to ensure a character cannot open a container unless he is in the same house it is.
	Removed JS Function RaceGate() as CChar property .race does the same thing.
	Removed JS Function SubStringSearch() as .match() does the same thing.
	Removed JS Function ConsoleMessage() as Console.Print() does the same thing.
	Removed JS Function ScriptPrintNumber() as Console.Print( number.toString() ) does the same thing.
	Removed JS Functions GetCommand() and GetCommandSize() as they were superfluous.
	Removed JS Functions CreateBuffer() DestroyBuffer() and SendBuffer() as the new Packet class handles that.
	Removed JS Item & Character property .raceID as .race does the same thing.
	Removed JS Item & Character property .privateword.
	Added a blank deed to items.dfn.

2/17/2006 - giwo (0.98-3.3n [3.4 BETA])
	Moved Skills::TinkerAxle out to JS.
	Moved Skills::TinkerAwg out to JS.
	Moved Skills::TinkerClock out to JS.
	Moved TinkerSextant functionality out to JS.
	Removed several item types from itemtypes.dfn as they are now handled by JS.

2/17/2006 - grimson (0.98-3.3m [3.4 BETA])
	Light and weather effects now also work on NPCs.
	Added 3 new JS events:
		onLightChange( mChar, lightLevel )
		onWeatherChange( mChar, weatherId )
		onTempChange( mChar, temperature )
	These events also work on the global script id and get called for players and NPCs.

2/17/2006 - grimson (0.98-3.3l [3.4 BETA])
	Rewrote the doLightEffect() function, it now uses the current light level to
	scale the light damage, it also respects the LIGHTLEVEL setting from races.dfn
	and it will stop doing light damage if you are inside a building.
	Added a the possibility that a char gets hit by a lightning during a storm,
	this is controlled by the LIGHTNINGAFFECT, LIGHTNINGDAMAGE and LIGHTNINGCHANCE
	settings in races.dfn.
	Added storm to the IsRaceWeakToWeather() JS function.

2/17/2006 - grimson
	Fixed some bugs in calculating the heat/cold damage in doWeatherEffect().
	Rain now lowers the current temperature by 5, a storm by 10.
	Moved the sending of the light level and weather status from startChar() into
	CChar::Teleport() by adding a force forceUpdateLight option to checkRegion().

2/17/2006 - grimson (0.98-3.3k [3.4 BETA])
	Added cMapStuff::inBuilding() function to determine wheter a given set of coordinates
	is inside a building. I does this by checking whether there is a static or multi above
	the coordinates.
	Added inBuilding() and SetInBuilding() functions to CChar and set it on movement and
	teleport.
	Use the new inBuilding() function to stop/start weather effects as soon as a player
	enters or leaves a building.
	Send the light level and weather status directly after a player log's in.

2/16/2006 - grimson
	Changed cWeatherAb::DoPlayerStuff() to reset weather effect timers if needed.

2/16/2006 - grimson (0.98-3.3j [3.4 BETA])
	Fixed VC6 build errors (thanks to giwo).
	Wrote all available race settings into the header of races.dfn and documented a few of them.
	Rewrote parts of the weather system:
		Added weather type storm.
		Heat wave and cold snap are calculated once per uo day and set the temperature to a fixed value
		between MAXTEMP and HEATINTENSITY resp. COLDINTENSITY and MINTEMP.
		Storm, Snow and Rain are calculated oncer per uo hour.
		Rewrote doWeatherEffect() to better seperate the different weather effects and to change the way
		they are calculated.
		Added new settings to races.dfn:
			HEATLEVEL - Sets the minimum heat at which the race get's damaged.
			COLDLEVEL - Sets the minimum cold at which the race get's damaged.
			STORMAFFECT - Defines if the race is affected by a storm
			STORMDAMAGE - Defines the damage a race takes from storm
			STORMSECS - Defines the interval at which the races takes damage from a storm.

16th February, 2006 - Maarc (0.98-3.3i [3.4 BETA])
	Committed some fixes to giwo's last commit (missed some changes in cScript.cpp that was blocking people from compiling)
	Removed a lot of commented stuff.  Dead code that's not used any more and things like that have been reduced
	Begun damage/healing tracking support.  All places in C++ code should be covered (will need to update JS engine).  Healing
	 and damage is now tracked per character, so that they can find out who has damaged/healed them the most.  If healing/damage
	 hasn't occurred in the past 5 minutes, they get taken off the list
	An offshoot of the damage tracking stuff is a change to combat.  Fame/karma/kills has been moved into CBaseObject, because in
	 future, we'll look at tracking fame/karma/kills updates for weapons and armour (so if you kill repeatedly with a sword, the
	 sword's kill count increases)
	Much of the fame/karma/kills stuff isn't done, and currently, we don't take advantage of the damage tracking.  Future
	 progressive updates will help with karma/fame parcelling on death, and to help NPCs make smarter decisions in combat
	Broke out packet 0xBF into a CPI class of it's own.  Rather than making it a huge monolithic class, it internally hands it
	 off to other packet handling classes


2/15/2006 - giwo (0.98-3.3h [3.4 BETA])
	Marked StringToNum(), NumToString(), NumToHexString() for later deletion, please use built-in JS method .toString() and function parseInt() in their place.
	Updated all JS files to use toString() and parseInt().
	Implemented JS props .stone and .master for Guilds.
	Removed the following JS functions as they are superfluous.
		IsRegionGuarded
		CanMarkInRegion
		CanRecallInRegion
		CanGateInRegion
		GetGuildType
		GetGuildName
		SetGuildType
		SetGuildName
		SetGuildMaster
		GetNumGuildMembers
		GetGuildStone
		GetTownMayor
		GetTownRace
		SetTownRace
		GetTownTax
		GetTownTaxResource
		SetTownTax
		SetTownTaxResource



2/15/2006 - giwo (0.98-3.3g [3.4 BETA])
	Changed create.dfn handling so ID's of 0 (default) display nothing on the gump.
	Updated create.dfn menu's with "Previous Menu" entries.
	Removed resource counts before launching create menu's, as the create menu handles that.
	Added LEATHER resource type for create.dfn
	Added cloth ID's to CLOTH resource type.

2/15/2006 - grimson
	Fixed 3D client crashes with CChar::talkAll() and  CChar::talk(), when the text color
	is 0x0000 it will be set to the default of 0x5A.
	Changed cMagic::MagicDamage() again, so that the murder count is increased when needed
	and NPCs fight back when they get attacked with a spell.
	Fixed the text message of the evaluating intelligence skill.

2/15/2006 - giwo (0.98-3.3f [3.4 BETA])
	Moved Lockpicking skill out to JS.
	Fixed an issue causing newbie clothing to be dropped on the ground if the character had scripted starting armor.
	Added Multiple-ID resource handling for create.dfn.
	Fixed some create.dfn items that had overlapping numbers.

2/14/2006 - grimson (0.98-3.3e [3.4 BETA])
	Added a rounding function for numbers and use it in the doLight(), command_getlight() and
	doWorlLight() functions.
	Moved WillResultInCriminal() from combat.cpp to uox3.cpp as it is not limited to combat situations.
	Changed cMagic::MagicDamage() so that attackers can become criminal and murderers.
	Changed CHandleCombat::StartAttack() so that attacking NPCs can become criminal.

2/14/2006 - grimson
	Changed the number for British weather because it was the same as the Southern Montain.

2/14/2006 - grimson
	Changed the checkRegion() function to prevent useless guard messages when you
	go from one unguarded region to another unguarded region.
	Made a few changes to regions.dfn.
	Changed the getlight command, so it returns the correct value when the region
	has a weather system.

2/14/2006 - grimson
	Changed CWorldMain::doWorldLight again, so the light level will actually reach
	the LIGHTBRIGHTLEVEL and LIGHTDARKLEVEL values.

2/14/2006 - grimson
	Removed checkRegion() from startChar() as it isn't needed.
	Fixed the GM Locations menu in travelmenu.dfn so you can travel to the jail cells again.
	Fixed the release time check in JailCell::PeriodicCheck().

2/13/2006 - grimson (0.98-3.3d [3.4 BETA])
	Made shure to start world timers on server startup.
	Changed startChar() to do a checkRegion() directly after a login.
	Changed CWorldMain::doWorldLight to actually take the current time into account
	when calculating the light level.

2/14/2006 - grimson
	Added the dungeons to the regions.dfn, so LIGHTDUNGEONLEVEL from the ini is correctly
	applied to them.

2/13/2006 - giwo (0.98-3.3c [3.4 BETA])
	Fixed an issue causing stats to almost never increase.
	Modified skills.dfn SKILLPOINT to use ,'s for seperators.
	Added an additional option to SKILLPOINT to specify for each level how much skill to gain on success.
	Moved Meditation skill out to JS.
	Moved Inscription skill out to JS.
	Removed EngraveAction() as it did not function and custom skills can be added in JavaScript.
	Moved MAKESHOP command out to JS.

2/12/2006 - giwo (0.98-3.3b [3.4 BETA])
	Modified DFN reloading so it reloads teleport.scp as well.
	Modified CheckSkill() so GM's can now gain skills by using them. (Note they will still never fail).
	Added NPCMOVEMENTSPEED to the UOX.ini to allow customization of NPC movement speeds.
	Changed CORPSEDECAYTIMER to default to 900 seconds, and made use of it in CreateCorpseItem().
	Removed CServerData::PlayerCorpseDecayMultiplier() as it had no matching uox.ini entry.
	Added JS character property .attackFirst
	Moved Peacemaking skill out to JS.
	Moved Musicianship skill out to JS.
	Moved Enticement skill out to JS (Note that OSI seems to have replaced this with Discordance).
	Moved Provocation skill out to JS.

2/12/2006 - giwo (0.98-3.3a [3.4 BETA])
	Fixed an issue causing Large Dragon Ship deeds to not function.
	Stopped CChar from saving HP as CBaseObject handles saving hitpoints.
	Removed GetItems() as it could cause data corruption.
	Modified getItem() and findItem() a bit and renamed them to GetItemAtXYZ() and FindItemAtXYZ()
	Fixed some issues with pitcher.js
	Fixed some minor cooking issues, and removed cSkills::HandleCooking() as JS now handles cooking.

2/12/2006 - grimson
	Added another JS function:
	GetItems( x, y, z, world, range) - returns a list containing all items withing
	"range" of the given coordinates in the given world. You can go through the list
	by using the FirstItem()/NextItem()/FinishedItems() syntax.

2/12/2006 - grimson
	Added two new JS functions:
	FindItem( x, y, z, world, id) - returns the item with the "id" that is on the
	"z" level and closest to the coordinates of x and y. Or NULL if no item is found.
	GetItem( x, y, z, world) - returns the item that is on the given coordinates or
	NULL if there is no item.

2/12/2006 - grimson
	The current HP and (if present) the fixed maxHP will now be saved on worldsaves.
	Added two new DFN tags for NPCs and Items: CUSTOMSTRINGTAG and CUSTOMINTTAG with
	them you can specify custom tags inside the DFNs and use them in JS scripts.

2/11/2006 - grimson
	Updated the CPUpdateStat function to use the GetMaxHP, GetMaxStam and GetMaxMana
	for sending the respective values instead of sending the strenght, dexterity and
	intelligence values.

2/11/2006 - giwo (0.98-3.3)
	Added 'set DEF (items), ARMOR (chars), and LAYER (items) commands.
	Modified 'setscptrig so it accepts 0 as a value even if no script 0 exists.

2/11/2006 - grimson (0.98-3.2r [3.3 RC])
	Added fixed maximum HP for chars. You can set it by a new dfn tag "HPMAX" or by the
	.maxhp JS property. Setting a negative value via the .maxhp JS property will reset
	the fixed value.
	Updated the set command to make use of the .maxhp JS property.

2/11/2006 - grimson
	Removed teffect.cpp from the VC6 workspace, as it no longer exists.
	Modified the flags of display cases via the tiles.dfn to prevent NPCs from walking on them.

2/11/2006 - giwo (0.98-3.2q [3.3 RC])
	Added JS property .isShop to transform an NPC into (and back from) a shopkeeper. (Grimson)
	Fixed some issues causing flagging not to be updated after setting flags in JS.
	Added error-checking when an invalid script entry is called with the GET tag.
	Modified AR statwindow reporting to give larger numbers.
	Updated some DFN armor defense ratings in items/gear/armor/

11th February, 2006 - Grimson (committed by Maarc)
	Fixed a bug with IsNeutral/SetFlagNeutral not comparing against the same flag type
	Fixed a bug where the wrong flag number is sent to the client for Neutrals

2/10/2006 - giwo (0.98-3.2p [3.3 RC])
	Re-added IsNeutral() Character flag as well as .neutral JS character property.
	Fixed an issue causing items to "bounce" when being dropped on the same character they were picked up from.
	Fixed an issue causing Ghosts to be bugged after a server restart.
	Modified newbie item creation so scripted items take precedence over default clothing.

2/09/2006 - giwo (0.98-3.2o [3.3 RC])
	NPCFlag now saves to the worldfile.
	Fixed an issue causing neutral animcals to never appear innocent when in town.
	Fixed an issue causing tamed animals to not carry their owners flag.
	Added support for invulnerable (yellow) flagging.

2/09/2006 - giwo (0.98-3.2n [3.3 RC])
	Overhauled the character flagging system:
		Added FlagColors enum.
		Renamed setcharflag() to UpdateFlag().
		Rewrote FlagColour() to make use of an enum and made it part of CChar.
		Made use of CChar::FlagColour() in several areas where we were doing the work manually.
		Added CChar SetNPCFlag() and GetNPCFlag() alond with cNPC_FLAG enum.
		Removed CChar IsNeutral() and SetNeutralFlag().
		Fixed an issue causing CChar Flagging functions not to return proper values.
		Replaced Dfn tag NEUTRAL with FLAG= the options for which are NEUTRAL, INNOCENT and EVIL.
		Replaced JS character property neutral with npcFlag, for which the values are 0 = NEUTRAL, 1 = INNOCENT, 2 = EVIL.
	Broke DropOnItem() into several smaller functions.
	Updated all instances of NEUTRAL in the dfn's to FLAG=NEUTRAL
	Added some FLAG=EVIL, FLAG=INNOCENT, and FLAG=NEUTRAL tags to appropriate NPC's

2/08/2006 - giwo (0.98-3.2m [3.3 RC])
	Fixed an issue causing ID and Type-based JS scripts not to run if an object had a script associated with it.
	Fixed an issue with SetTag() causing 0 and null values not to unset the tag.
	Fixed some wierdness when using the Delete() property in JS.
	Minor updates to autoStack().
	Fixed some issues with dropping items on other items in packs.

8th February, 2006 - Maarc
	Fixed wholist so that the stats link now works from it

2/08/2006 - giwo (0.98-3.2l [3.3 RC])
	Fixed a minor issue with saving tempeffects.
	Fixed an issue causing objects not to default to script ID 0 (global script).
	Added onDeathBlow( pKilled, pKiller ) JS event.
	Minor code cleanups.

2/07/2006 - giwo (0.98-3.2k [3.3 RC])
	Added spawn.dfn tag PREFZ=, this sets the maximum Z influence dynamic and static items can have on spawning.
	Incorporated Grimsons fixes to CSpawnRegion to allow NPC's to spawn at the proper Z based on the static and dynamic items at their location.

2/07/2006 - giwo (0.98-3.2j [3.3 RC])
	Replaced CTEffectContainer with a call to CDataList.
	Fixed multiple issues causing temporary effects to randomly never expire.
	Fixed an issue causing mana never to regenerate completely in certain circumstances.
	Minor const correctness and signed/unsigned mismatch changes.
	Removed MOVETYPE= world tag from boats, as they should always start sitting still.
	Added a check to ensure a boat stops moving if all characters onboard leave a moving boat.
	Added TEMPSTR/TEMPSTRENGTH TEMPDEX/TEMPDEXTERITY and TEMPINT/TEMPINTELLIGENCE options to the SET command.

2/06/2006 - giwo (0.98-3.2i [3.3 BETA])
	Added some error checking to the INFO command to ensure it is not used on characters.
	Fixed an issue causing deeds (and other items) not to display their custom names.
	Modified the stealth skill spam to conform to OSI messages.
	Fixed an issue causing the POLY command to change ones skin color.
	JS Changes:
		Added character props .orgID and .orgSkin
		Changed the behavior of character props .id and .skin not to set their org* equivalents automatically.

6th February, 2006 - Maarc
	Moved maps_def Disposal to the end of CMapStuff::Load()
	Added the ability to override tiledata info for real tiles (not land)
	Bit of const correctness (CTile.Name( const char *newVal ))

2/05/2006 - giwo (0.98-3.2h [3.3 BETA])
	Fixed a possible exploit with secure trading.
	Fixed an issue causing it to be impossible to remove characters from a house ban list.
	Fixed a server crash caused by transfering house ownership.
	Updated the NPC Pathfinding code to fix some issues.
	Added a check to ensure boat items are only moved once when boats sail.

2/04/2006 - giwo (0.98-3.2g [3.3 BETA])
	Fixed an issue causing multis to calculate their size incorrectly (causing boats to drag objects not aboard).
	Updated mapstuff.cpp to fix some signed/unsigned mismatches.
	Rewrote killTrades() so it would function properly and called it when a player Logs out.
	Disallowed GM's to drop items directly on logged out players (note they can still place items in packs), as it was causing other bugs in the client.
	Documented trade.cpp

2/03/2006 - giwo (0.98-3.2f [3.3 BETA])
	Rewrote trade windows so they now function properly (Note that if you log out with a trade window open, the client will crash).
	Disabled the LoginThread as it was causing crashes and other issues.
	Minor changes to const correctness in skills.cpp
	Modified packet logging to slim down file size and make it more readable.
	Fixed an issue causing logged out characters be visible to those around them.

2/02/2006 - giwo (0.98-3.2e [3.3 BETA])
	Fixed an issue causing the statwindow not to update properly (thus not showing the proper weight/gold values).
	Continued to break LineOfSight() into smaller manageable functions.
	Removed superfluous Add()/Remove() functions from CMapHandler.

2nd February, 2006 - Maarc
	Changed a call to _hypot, as it wasn't portable.  hypotf is the portable ANSI C, but it didn't work, so rolled our own (simple sqrt of the sum of two squares)
	Made some changes to the enumeration JSObjectType, because gcc 3.3.5 was chucking a wobbly over some code
	Changed a call to _strnicmp to strnicmp to deal with a linux compile error - note, we probably don't want to use such things anyway ... convert both strings to a UString, lower() them, and compare the subsets requested?

2/01/2006 - giwo (0.98-3.2d [3.3 BETA])
	Fixed an issue causing the server to randomly crash when sailing for prolonged periods of time.
	Removed an extra RemoveFromSight() packet sent upon item deletion.
	Removed items from the MapRegion upon deletion.
	Added CMapHandler::ChangeRegion() to automatically change an objects region when location changes.

1/31/2006 - giwo (0.98-3.2c [3.3 BETA])
	Fixed an issue causing boat commands to crash the 3D client.

1/30/2006 - giwo (0.98-3.2b [3.3 BETA])
	Fixed an issue causing multi's to contain themselves
	Added some error checking to ensure a multi cannot be placed inside another multi.
	Fixed an issue causing items and characters on boats to move multiple spaces.
	Fixed an issue causing boats to lock the client.

1/30/2006 - Xuri
	Added missing hairstyle (spiked) for female elves

1/29/2006 - giwo (0.98-3.2a [3.3 BETA])
	Fixed several issues with CPOpenBuyWindow fixing an issue causing items in buy windows to display improperly.
	Fixed an alignment issue with CPItemsInContainer logging.
	Removed CItem::Sort() as it is now superfluous.
	Moved CItem::WalkXY() to CBaseObject.
	Minor updates to cSkills::RandomSteal().
	Removed JS items[]. access.

29th January, 2006 - Maarc
	Encapsulated JS class name retrieval into JSEncapsulate and switched over to using that everywhere
	Fixed a potential bug (or at least, a naughtiness) with CBase_Teleport, with premature casting
	Fixed a bug where if ApplySection() was called with an empty string, it wouldn't abort correctly (JS Engine)
	Fixed a possible issue with Karma(), where we reset on caps, but don't update our calculations
	Added necromancy, focus, chivalry, bushido and ninjitsu to skills in JS engine

1/28/2006 - giwo (0.98-3.1i [3.2 RC])
	Fixed some minor issues with LineOfSight().
	Began to break LineOfSight() into smaller manageable functions.
	Renamed SeekMap0() to SeekMap() to better represent it's ability to seek any map file.
	More fixes for const correctness.

1/28/2006 - giwo (0.98-3.1h [3.2 RC])
	Fixed a minor bug in healing.js
	Made use of the JS Method CanSee() for LoS checks in JS magic functions.
	Minor code change in tempeffects().
	Updated the version number to reflect recent changes by Maarc and Xuri.
	Fixed an issue causing JS Skills not to function if a character had a script assigned to him.

1/28/2006 - Xuri
	Some fixes for the onHungerChange code to ensure UOX3 doesn't crash when no global script is defined (Grimson)
	Added isAnimal and isHuman as JS character properties. (Maarc)
	Fix in Line of Sight-code makes line of sight-checks more reliable (giwo)

1/27/2006 - Xuri
	OnHungerChange JS event will now execute both for hunger level increase as well as decrease, and will also work as global script (Grimson)

1/26/2006 - Xuri
	Hungercheck for players should now be working again (Grimson)

26th January, 2006 - Maarc
	Fixed a bug with clumsy JS (visibility not resetting properly)
	Added JS implementation for heal and feeblemind
	Added JS implementation for magic arrow, but it relies on MagicDamage(), which is not completely implementable (missing Karma, Fame and CPDisplayDamage)
	Added a ValidateObject() function to the JS engine, that behaves the same as it does in the C++ code
	Updated 'set command to support setting of health (via health or hp)
	NOTE: Tweak seems to be broken (the buttons don't fire anything), and I have no idea why
	NOTE: Heal is currently a vampiric heal (some health is subtracted from the caster to heal the target).  This is *not* a new behaviour.
	NOTE: Tweaked up magic arrow damage (a GM mage was doing less than 4 damage every time).
	Old magic arrow formula
		baseDamage	= 2 + Random( 0, 1 )
		mageryMult	= (Magery / 2000) + 1 (maximum multiplier, 1.5)
		Damage Dealt	= baseDamage * mageryMult - EvalIntCheck

	New magic arrow formula (JS Only!)
		baseDamage	= 2 + Random( 0, 5 )
		mageryMult	= (Magery / 2000) + 1
		DamageDealt	= baseDamage * mageryMult - EvalIntCheck

	The EvalInt check has changed, as well (with the JS code, not the C++ code.  All non-JS spells still adhere to this old standard).
	Previously, a successful check would always draw off a fixed amount of damage ( 10% of your skill level )
	Adjusted the JS socket property for characters, so that it returns an explicit NULL object if there is no socket attached
	NOTE: Researching into JSExtendedClass instead of JSClass, so that we can implement equality testing (like, attacker != caster sorts of things)


25th January, 2006 - Maarc
	Moved checkkey(), processkey() and cl_getch() from uox3.cpp into CConsole methods
	Added a key/command handler console exposure to the JS environment (involves a secondary runtime because of threading!)
	Note: Creating/editing world objects through this environment is not thread safe, and may cause errors
	Modified Console.PrintDone() and Console.PrintFailed() to take an optional boolean parameter as to whether it is printed instantly, or queued up
	Added functions Console.BeginShutdown() and Console.Reload( intVal )
		BeginShutdown() takes no parameters
		Reload() takes a single parameter, with the values of
			0	Reload INI
			1	Reload Accounts
			2	Reload Regions
			3	Reload Spawn Regions
			4	Reload Spells
			5	Reload Commands
			6	Reload Definition Files
			7	Reload JS
			8	Reload HTML
	Included an example script that takes the old 1->9 keys and implements them through the new JS routines
	Included an example script that takes the old shutdown keys and implements them through the JS routines
	Couple of prettying up with the loading code and what it displays
	Fixed an error with validation of skin and hair colours with human races (my mistake!)
	Fixed a dyed underwear issue with newly created players (Xuri)

1/23/2006 - Xuri
	Added new JS event: onCharDoubleClick( pUser, targChar) - allows overriding doubleclicking of characters
	Added new JS event: onSkillGump( socket ) - allows overriding the client's request to open the default skillgump
	Added new JS event: onCombatStart( currChar, targChar ) - allows overriding combat completely
	Added new JS event: onCombatEnd( currChar, targChar ) - allows overriding what happens when combat ends
	JS Event space in cScript expanded from 64 to 96 (Maarc)

22nd January, 2006 - Maarc
	Added a P_TIMESTAMP define to Config.h, for timestamping packet logs (through the use of RealTime)
	Removed unnecessary defines from Config.h
	Fixed a typo or two
	Removed some debug code I committed by accident
	Our packet logs were generating 7 column data, not 8!
	Updated some packet notes + code (0xA9 and 0xB9 packets) to deal with elves stuff (based on http://www.uox3.org/forum/viewtopic.php?t=748&highlight= )
	Updated CPCharAndStartLoc to log a few more flags
	Added a detailed Log routine to CPEnableClientFeatures
	Moved Capped() in pcmanage.cpp to higher upwards
	Changed CPICreateCharacter::Log to dump out hex values for body/skin colours
	Added some preliminary support for elvish bodies
	Needs doing: Adding random names list 3 (elf male) and 4 (elf female) for incognito
	Updated gender IDs 0 == human male, 1 == human female (as before).  2 == elf male, 3 == elf female, 0xFF == unknown.  Potentially has JS impacts! (Gender property)
	Note: Need to experiment with gender values with CPStatWindow (see code notes)
	Note: isHuman() doesn't even evaluate current dead bodies, what is the impact?
	Renamed validHair() to validHairStyle() because we want to validate colour as well
	Added a CanSee() routine to JS based socket and character objects.  Syntax is as follows
		sourceObject.CanSee( otherObject );
		sourceObject.CanSee( targX, targY, targZ );

		otherObject can be either a character, item or socket.  If they're not on the same world or the target item is in a container, line of sight fails.
	Proper validation of hair style on creation of elvish characters

21st January, 2006 - Maarc
	Fixed an Alignment issue in dumping out CPCharAndStartLoc (converting tabs to explicit spaces)
	Turned out last byte of the packet as a real number, rather than a UI08 which is interpreting as a char
	Updated some packet notes from what I could scrounge through the net
	Added basic CPIMetrics class to read in the 0xD9 packet that gets sent
	Fixed a logging issue with CPCharAndStartLoc that wasn't taking the extra characters into account
	Fixed a logging issue with CPCharAndStartLoc that was trying to dump out location details as ASCII codes, not as strings
	Added a feature to packet logging so that it will fill a line of less than 8 bytes to 8 bytes, to even out it's display
	CPISecondLogin logging claimed to be packet 0x80, when in reality, it's 0x91
	Unknown byte in CPIFirstLogin now displayed numerically, rather than as a dodgy ASCII char
	Changed Seed IP of CPRelay to 0xFFFFFFFF
	Moved pSplit() and PackShort() from CPacketSend.cpp to CPacketReceive.cpp, given that's the only place that it is even used
	Removed some unnecessary dead code

1/20/2006 - Xuri
	Yumi-bows should now use arrows instead of crossbow bolts.

12/16/2005 - giwo (0.98-3.1g [3.2 RC])
	Fixed an issue with context menus causing one to attempt to "snoop" their own pack.
	Fixed a crash when attempting a random steal on a character with no items.
	Fixed an issue causing the 'time command to have incorrect spacing.

12/13/2005 - giwo (0.98-3.1f [3.2 RC])
	Updated CDictionary.cpp to be const correct, as well as adding some error checking to prevent data corruption.
	Removed CACHEMULS from the uox.ini as it is no longer used.
	Changed uox.ini entry SHOWHIDDENNPCS to SHOWOFFLINEPCS to better reflect its function.
	Fixed an issue with SHOWOFFLINEPCS causing offline pc's to display even if it was set to 0.
	Fixed a minor bug with HTML output when the UOX3.exe was not in the base UOX directory.
	Fixed a couple of entries in teleport.scp that would cause you to be stuck in britain sewers.
	Updated items.cpp and npc.cpp to be const correct.

12th December, 2005 - Maarc
	Further update to HowTo, making sure it works through both paths

11th December, 2005 - Maarc
	GumpInfo type 7 should ignore name, only deal with stringValue.  Code updated to reflect this (fixes AddData( str, str, int ))

9th December, 2005 - Maarc
	Howto should be fixed so it won't crash on target based commands
	Howto should also support JS commands now, at least in so far as it displays the txt file, if one exists
	Couple of sections of code updated for real multi checks.  Rather than check if the ID > 0x4000, we actually do a CanBeObjType( OT_MULTI ) instead
	Auto correct bad multis when encountered (setting to generic house / generic boat)
	***note this is untested*** Insufficient time to install the UO client, and needs to be verified by Xuri or Giwo

12/07/2005 - Xuri
	Fixed an error generating a warning about bad length in multi's (giwo)
	Made all items default to the unused (0x0000) tile (giwo)
	Changed SeekTile() to return a value indicating if it found a valid tile (giwo)

12/04/2005 - Xuri
	Fixed a bug where skillgain could happen by attempting to craft without having enough resources available
	Updated AreaCharacterFunction, AreaItemFunction and AreaObjFunc to accept both character and item objects as source-object

11/23/2005 - giwo (0.98-3.1e [3.2 BETA])
	Removed cSkills::TrackingDirection() as cMovement::Direction() does the same thing.
	Fixed a crash caused by canceling the tracking menu.
	Fixed an issue causing not all animals to be trackable with the tracking menu.
	Added support for clicking on the Tracking Arrow to stop it from displaying.
	Modified packet overloading so one cannot run both the overload and the default packet handling, as it would cause a socket error.
	Added support for selecting popup menu entries.
	Fixed a possible issue with doubled up entries in spawn.dfn and regions.dfn.
	Fixed an issue causing UOX3 to hang forever on character creation.
	Added file and function documentation to books.cpp and msgboard.cpp

11/20/2005 - giwo (0.98-3.1d [3.2 BETA])
	Added CPPopupMenu allowing for easier customization of popup menu's.
	Removed cScript::spellRegistration, commandRegistration, skillRegistration in favor of
	cScript::ScriptRegistration( string skillType ) IE ScriptRegistration( Skill ).
	Added the ability to overload Packets in the JS.
	Removed xFTP Server code as UOX3 should be a game server, not an FTP server.
	Moved spawnregions and regions into CWorldMain. (renaming them to spawnRegions and townRegions).
	Modified spawnRegions and townRegions to load in based upon the number assigned for them in the scripts.
	Added a socket variable to PlayerValues_st to remove the need to loop through online sockets looking for a characters socket.
	Fixed some minor issues with CTEffectContainer.
	Fixed an issue that could cause a characters murder decay timer to stop counting.
	Added MURDERTIME to the worldsave to make murder decay time persistent.
	Fixed some minor compiler warnings.
	Added support for compiling under Visual Studio Express 2005
	Changes to uox.ini:
		Removed USEFACETSAVES, MAP0, MAP1, MAP2, MAP3, USERMAP, FTPDENABLED,
		FTPDUSER, FTPDUSERLIMIT, FTPDBIND, FTPDROOT, FTPCENABLED, FTPCHOST,
		FTPCPORT, FTPCUSER, FTPCULFLAGS, and MAPCOUNT as they were unused.
		Added OVERLOADPACKETS option to uox.ini to toggle JS packet handling.
	JS Changes:
		Re-ordered jse_fileassociations.scp a bit to make more logical sense.
		Added PACKET_SCRIPTS to jse_fileassociations.scp
		Added event onPacketReceive( socket, packetNum, subCommand )
		Added function RegisterPacket( packetNum, subCommand ) // Note that subcommands are not yet supported.

11/19/2005 - Xuri
	Added new doors from ML-client, expanded DoorNewLocation-function to cover all doors

11/5/2005 - giwo (0.98-3.1c [3.2 BETA])
	Fixed several issues with Writable book handling.
	Modified .bok handling code (note that this will cause any old .bok files to be invalid).
	Added support for the 0xD4 (New Book Header) packet.
	Fixed some issues in /books/books.dfn causing pre-defined books not to be displayed.
	Fixed some issues in items/misc/books.dfn causing pre-defined books not to open.
	Removed CSocket authorbuffer, pagebuffer, and titlebuffer.
	Fixed an issue causing Spells not to function.
	Added JS Packet method .ReserveSize( len ); for optimization purposes.

11/3/2005 - giwo (0.98-3.1b [3.2 BETA])
	Added a JS Packet Class, usage:
		var myPacket = new Packet;
		myPacket.WriteByte( pos, byte );
		myPacket.WriteShort( pos, short );
		myPacket.WriteLong( pos, long );
		myPacket.WriteString( pos, string, len );
		socket.Send( myPacket );
		myPacket.Free();
	Fixed a logic error in handling the RefreshIP code (Grimson).
	Fixed an issue causing players to apper gray rather than dissapear when hiding.
	Fixed a login crash caused by the Updates scroll.

11/1/2005 - giwo (0.98-3.1a [3.2 BETA])
	Updated some areas of the code to conform to const correctness.
	Fixed an issue causing vendor "Buy" windows to display improperly.
	Added some more error-checking to the ClearTrades() function.
	Removed JS CChar_Freeze() and CChar_Unfreeze() as the .frozen property does the same thing.
	Removed JS CItem_SetPoison() as the .poison property does the same thing.

10/17/2005 - giwo (0.98-3.0q [3.1 RC])
	Improved the MapResource handling code.
	Improved the MapRegion handling code, reducing waste.
	Fixed a possible issue causing invalid data in the refreshQueue and deletionQueue.

10/15/2005 - giwo (0.98-3.0p [3.1 RC])
	Fixed an issue in the CChar constructor causing linux builds to not compile.
	Removed CHANCECOLOURORE and MINCOLOURSKILL from regions.dfn
	Modified cSkills::Mining() to REQUIRE ore entries for proper ore creation.
	Modified CHANCEBIGORE in regions.dfn to give a chance to get more than 1 ore at a time.
	Added a message to advise a player when his skill level is too low to mine coloured ore.

10/5/2005 - giwo (0.98-3.0o [3.1 BETA])
	Moved kills, fame, and karma from CBaseObject to CChar to save wasted memory on items.
	Fixed several warnings when compiling under gcc.
	Fixed a possible issue when duplicating a character.
	Removed several unrefrenced parameters.
	Removed several unused ENUM values.

9/29/2005 - giwo (0.98-3.0n [3.1 BETA])
	Removed an unneeded variable from characters.
	Changed JS prop murtertime to tempTime (note tempTime is currently used for spawn items and murder times).
	Made struct GumpInfo a private member of GumpDisplay.
	Changed CItem::layer to make use of the ItemLayers enum.
	Removed global const MAXLAYERS.
	Merged CTownRegion goodsell[], goodbuy[], goodrnd1[], and goodrnd2[] into a struct with a map.
	Removed RUNNING and STEP from the worldfile, as they were unnecesarry.
	Minor cleanups and fixes.

9/27/2005 - giwo (0.98-3.0m [3.1 BETA])
	Moved some more variables from Base Characters to Players.
	Organized and documented many functions in CChar.
	Changed itemLayers array to a std::map.

9/27/2005 - giwo (0.98-3.0l [3.1 BETA])
	Greatly reduced the memory taken by NPC's and Players.
	Fixed an issue causing ORE_LISTs not to load in properly.
	Fixed a possible crash bug in clearTrades().

9/23/2005 - giwo (0.98-3.0k [3.1 BETA])
	Added support for MapDiffs/StaticDiffs
	Added mapdiff entries to maps.dfn to allow customizing filenames.
	Added CPEnableMapDiffs to advise the clients of MapDiffs.
	Updated go.js to support passing a world number

9/20/2005 - giwo (0.98-3.0j [3.1 BETA])
	Fixed a minor issue with resource regions.
	Removed cSkills::BowCraft() as it was unused.
	Moved largeBuffer and largePackBuffer from local declares into CSocket.
	Updated sword.js and axe.js to work properly with 5.0.x clients.

9/18/2005 - giwo (0.98-3.0i [3.1 BETA])
	Fixed an issue causing RESOURCELOGSRESPAWNTIMER to always use default setting.
	Moved cSkills::resources into CMapWorlds() allowing it support for multiple worlds.
	Fixed an issue with SetTempVar() when setting in parts.
	Made skillnames scriptable via skills.dfn
	Fixed a crash caused by increasing the total number of skills then loading a previous world.
	Added support for BUSHIDO and NINJITSU skills (note these are not implemented yet).
	Enabled support for NECROMANCY, FOCUS, and CHIVALRY (note these are not implemented yet).
	Removed some superfluous code in uoxstruct.h
	Added First/Next/Finished wrappers for iterating through lists of Script files.
	Optimizations to the weather.dfn loading code
	Optimizations to the skills.dfn loading code.
	Optimizations to the spells.dfn loading code.
	Modified loading of creatures.dfn to load entries beyond 2048.
	Added 5 tags to creatures.dfn in place of BASESOUND and SOUNDFLAGS
		SOUND_IDLE 		- The sound the creature makes while standing around
		SOUND_STARTATTACK 	- The sound the creature makes when it enters combat
		SOUND_ATTACK 		- The sound the creature makes when attacking
		SOUND_DEFEND 		- The sound the creature makes when defending
		SOUND_DIE 		- THe sound the creature makes upon death
	Moved Sword use functionality out to JS (for carving kindling, corpses, etc )
	Moved Axe use functionality out to JS (for chopping trees, carving corpses, etc )
	Added JS item property "carveSection" and method Carve().
	Added JS Functions ResourceArea(), ResourceTime(), ResourceAmount() and ResourceRegion()
		The first 3 can be used to Get/Set system settings, using the options "LOGS" or "ORE"
		ResourceRegion() returns a resource object allowing JS to modify resource data.
	Exposed the resource data to the JS engine for modification, props are:
		logAmount
		logTime
		oreAmount
		oreTime

9/13/2005 - giwo (0.98-3.0h [3.1 BETA])
	Modified MapRegions to allow handling of a variable number of words.
	Added maps.dfn to allow customizing UOX3's map handling.
	Added MAPCOUNT to the uox.ini to specify the number of maps UOX3 uses.
	Several major internal changes to the packet handling classes.
	Fixed several integral problems with the account system causing data corruption.
	Fixed some issues causing client crashes in the 5.0.x clients.
	Fixed an issue causing a crash when attempting to add an invalid script item.
	Fixed an issue causing wierdness for players who log in as a Ghost.
	Fixed an issue causing a character to continue firing a ranged weapon when out of ammunition.
	Fixed a possible issue causing monsters to constantly attack animals.
	Modified character flagging so anything that is not a Human or Animal will never show up as blue.
	Modified the "isHuman" check to consider a GM body as human.
	Fixed an issue causing character privledges not to save properly.
	Modified CSocket pagebuffer, titlebuffer, and authorbuffer to be const correct.
	Greatly reduced the size of resource.bin (please ensure you delete your old /shared/resource.bin file).
	Made some minor modifications to reduce the worldfile size:
	(Note UOX3 is backwards compatible with previous worldfiles and will make these changes automatically)
		BEARDCOLOUR and BEARDSTYLE is now BEARD=STYLE,COLOUR and is stored in hex.
		HAIRCOLOUR and HAIRSTYLE is now HAIR=STYLE,COLOUR and is stored in hex.
		ORIGINALBODYID and ORIGINALSKINID is now ORIGINALID=BODY,SKIN and is stored in hex.
		SPLIT and SPLITCHANCE is now SPLIT=SPLIT,SPLITCHANCE.
		QUESTORIGINALREGION and QUESTDESTINATIONREGION is now QUESTREGIONS=ORIGINAL,DESTINATION.
		NPCWANDER and XNPCWANDER is now NPCWANDER=NPCWANDER,XNPCWANDER.
		SPATTACK and SpecialAttackDelay is now SPATTACK=SPATTACK,DELAY.
		PACKITEM, ROBESERIAL, TOWNVOTE, PRIVILEGES, and GUILDFEALTY are all stored in hex.

9/07/2005 - Xuri
	Added support for new mounts: giant fire beetle, hiryu, chimera, cu sidhe, mondain's steed

9/07/2005 - Xuri
	Fixed an error in a debug message that would stop UOX3 from compiling if DEBUG_WALKING was enabled.
	Fixed; UOX3 didn't retrieve the correct FY2 value for spawned NPCs using wandermode 3 (shopkeepers, for instance).
	Added JS InitWanderArea function - allows wanderareas to be dynamically reset through JS.

9/06/2005 - Xuri
	Check to see if animals have NPCAI 2 before guarding them in town when COMBATANIMALSGUARDED=1 in uox.ini

9/05/2005 - Xuri
	Fixed superfluous empty spaces after reputation titles and race names in paperdolls.
	Removed [murderer] appearing behind the character names hovering over the head of characters.

August 17 2005 - Maarc
	Altered AreaCharFunc code in cScript to also support Items
	Added "AreaItemFunction" as an equivalent to AreaCharacterFunction - perhaps break this into something a little more specific?  eg Items / Multis?
	Added JS StaticAt function - takes 4 parameters - x, y, world, [tileID] (tileID is optional - if not specified, ANY static at that location will match)
	Added JS StaticInRange function - takes 5 parameters - x, y, world, radius, tileID

8/13/2005 - giwo (0.98-3.0g)
	Added automatic removal of messageboard files when the board item is removed.
	Added in the MessageBoardMaintenance routine to automatically clean out deleted posts.
	Incorporated Grimsons fixes to call guards when a player attacks an NPC.
	Incorporated Grimsons changes to allow NPC's to become criminal and murderers.
	Fixed some possible issues in speech.cpp, hopefully correcting the elusive Speech crash bug.
	Fixed an issue causing creatures and a few other scripts not to be properly updated when reloading DFN's.
	Added a very simple Dispose() feature to CServerDefinitions, allowing for automatic cleanup of unused DFN's.
	Fixed an issue causing doors to never close if a player or ghost was standing in them.
	Fixed some possibile issues with item visibility.
	Added the ability to specify an amount with ADDITEM in create.dfn (example ADDITEM=0x1E43,15).

8/7/2005 - giwo (0.98-3.0f)
	Fixed an issue causing improper reporting on the state of a stream in UString. (punt)
	Fixed an issue causing messageboards not to display on an empty world.
	Fixed an issue causing UOX3 to lock up when posting a reply with the 3D client.
	Modified the post removal function to delete any replies to the post.
	Modified CChar::PostType to stop it from being saved (this should be on a per-session basis).

8/4/2005 - giwo (0.98-3.0e)
	Finished the rewrite to the messageboard system. Currently it should be fully functional with
		the exception of a maintenance routine to clean up the files which will be added later.
	Incorporated Grimson's Automatic-IP Updating feature.
	Added a few fixes for NPC's staying in combat after the death of their opponent. (Grimson)
	Incorporated lingo's rewrite to the CMapstuff code, this seems to have fixed the
		bug causing players to fall through the floor of their house.
	Fixed an issue causing dyed items to appear undyed when dropped on the ground.
	Fixed a possible issue with BoatSpeech.
	Fixed an issue causing quest regions not to function properly.
	Fixed some issues causing items and characters to leave "ghosts" behind.

7/29/2005 - Maarc
	Several character/item properties and one item-method added to JS (check JS Docs, 0.42)

7/16/2005 - giwo (0.98-3.0d)
	Continued work on a complete rewrite of the Messageboard system.
	Removed some unnecesarry debug code from Walking functions.

7/14/2005 - giwo (0.98-3.0c)
	Moved Poisoning skill out to JS.
	Fixed an issue causing "eternal" gold from a vendor.
	Included a fix for Trade Windows locking the client (ShadowBranch).
	Minor cleanups in trade.cpp
	Included a possible fix for an issue causing NPC's not to exit combat properly.
	Fixed an issue causing items with an amount to be created as 1 item in some situations.
	Began rewriting messageboards, meanwhile fixing a few issues causing them not to function.

6/16/2005 - giwo (0.98-3.0b)
	Added support for multiple TriggerWords in a string of speech.
	Fixed JS event inRange() so it will function as expected.
	Fixed a minor issue that caused the wrong code to be executed when updating nearby objects.

6/16/2005 - Xuri
	Added new NPCAI (5) for NPC fighters. Same as guard-ai (attacks monsters/criminals), only without the extra guard-functions.

6/14/2005 - giwo (0.98-3.0a)
	Fixed an issue causing characters to ghost after being teleported off screen.
	Fixed an issue causing mounts and other various items to add weight to characters.
	Fixed an issue causing display distortion on the Server Status gump.
	Fixed an issue causing JS onCollide event not to function for characters.
	Fixed an issue causing corpses not to decay.
	Fixed an issue causing spells not to function when a global JS script (0) was in place.
	Minor code cleanups.

6/14/2005 - Xuri
	Fixed server crash when clicking on server status button in help menu.

6/12/2005 - giwo (0.98-3.0)
	Fixed an issue causing objects not to be properly removed from their spawnregion on deletion.

6/12/2005 - Xuri
	Changed font-type and colour displayed for item-based TextMessages.

6/11/2005 - ShadowBranch
	Changed the hardcoded default starting location from 1000, 1000, 0 to 1495, 1629, 10 - which is the Sweet Dreams Inn in Britain.

6/9/2005 - giwo
   	Fixed a bug causing items not to be able to be picked up

6/8/2005 - Xuri
   	Adjusted NPCSpeed from 1.0 to 0.7 to increase their speed.

6/7/2005 - Grimson
   	Fix in void CSpawnRegion::doRegionSpawn() to spawn the correct number of NPCs as per defined in spawn.dfn

4/22/2005 - giwo (0.98-2.8h)
	Fixed an issue breaking teleport locations in Debug mode.
	Fixed an exploit allowing one to equip items from great distances.
	Caused houses to boot non-owners who log out inside.
	Fixed several issues with create menus.
	Modified BODYCOLOUR in commands.dfn to not change the color if it is set to 0.
	Added STRIPHAIR and STRIPITEMS in place of STRIPOFF in the commands.dfn.
	Caused SetName() to call Dirty() in order to update an object.
	Fixed a minor issue with SET commands.
	Added SET command MOREXYZ.

4/16/2005 - giwo (0.98-2.8g)
	Fixed an issue causing envoke (object and type associations) not to function after a JS Reload.
	Fixed an issue causing accounts to erroneously report that it is already in use.
	Fixed a possible issue caused by dropping a pilable item directly onto another pilable item.
	Fixed an issue allowing a ghost to snoop the pack of a pack animal.
	Fixed an issue causing Ghosts to "collide" with other players.
	Fixed an issue causing exploding potions to not function properly.
	Fixed an issue causing smelted ingots to not be stackable.
	Added ingots and gold to harditems.dfn to safeguard against stacking issues.
	Changed JS event onCreate() to onCreateTile() and onCreateDFN()
		Note that onCreateDFN() will be the default, only items added directly
		from the tile will use onCreateTile(). These scripts can be either scriptID 0
		or specified in harditems.dfn.

4/14/2005 - giwo (0.98-2.8f)
	Fixed an issue causing banks to add to the characters total weight.
	Fixed an issue causing SpawnRegions to not spawn anything under certain conditions.
	Fixed an issue causing '0' to be an invalid JS ScriptID.
	Fixed an issue causing item prop "owner" to not function properly.
	Fixed some possible issues with member variables not being initialized.
	Updated titles.dfn to read in much the same way the rest of the scripts do (tag=data).

4/2/2005 - giwo (0.98-2.8e)
	Moved Begging skill out to JS.
	Moved Detecting Hidden skill out to JS.
	Fixed an issue causing JS Character method SetSkillByName() to always return false.
	Fixed an issue causing AreaCharacterFunction() to invalidate any characters and sockets in the function that called it.
	Fixed a similar issue causing IterateOver() to invalidate any characters and items in the function that called it.
	Fixed an issue that would set FD_SETSIZE to a much lower value than it should be on some *nix systems. (punt)
	Replaced instances of strupr and strlwr with their UString counterparts. (punt)
	Fixed an issue causing NPC's to hunger (and die quite quickly).
	Removed many superfluous entries from uox.ini (BEGGINGTIMER, HUNGERDAMAGERATE, HUNGERTHRESHOLD, BEGGINGRANGE).
	Modified the enum cSD_TID in CServerData.h to standardize naming habits.
	Moved many timers from individual entries in CServerData into the serverTimers[] array.

3/11/2005 - giwo (0.98-2.8d)
	Included jr's fixes for cygwin compatability.
	Began work on allowing UOX to compile under MinGW.
	Many minor gcc warning fixes.

3/5/2005 - giwo (0.98-2.8c)
	Fixed a couple memory leaks.
	Fixed a couple areas where we were attempting to free memory that had already been freed.
	Bumped the rate of stamina loss on an overweight player to 5 per-step (This should be configurable in the future).

March 4 2005 - Maarc
	Updated 'validcmd so that it dumps out information about JS based commands as well

3/1/2005 - Xuri (giwo)
	Fixed a bug in HandleGuardAI() causing guards to kill cute, innocent "grey" kittens (and other animals) after taking care of any real criminals present

2/28/2005 - giwo (0.98-2.8b)
	Removed some duplication in the callGuards() routine.
	Fixed a possible issue that could cause Timer events to crash after reloading the JS engine.
	Fixed a possible issue that could cause Magic scripts to crash after reloading the JS engine.
	Fixed an issue causing some newbie clothing to be destroyed in combat.
	Fixed an issue on loading teleport.scp causing some locations to not function properly.
	Added the ability to reload entire sections of the JS Scripts.
	JS Commands will now properly reload when reloading the Commands.
	JS Commands will now properly register when reloading the JS Scripts.

2/27/2005 - giwo (0.98-2.8a)
	Fixed an issue causing 'GO PLACE to reach an invalid location after about 140.
	Fixed an issue causing teleport locations to not function properly.
	Fixed characters attempting to mount a creature when already on a mount.
	Fixed an issue causing dropping a stack of scrolls onto a spellbook to delete all of them.
	Fixed an issue causing items equipped to an NPC on creation or newbie at creation to be deleted.

2/26/2005 - giwo (0.98-2.8)
	Added support for "EQUIPITEM" tag in newbie.dfn.
	Added JS Character Prop skillToTame.
	Added JS Item Prop murdertime.
	Moved the following skill functionality out to JavaScript:
		Animal Taming
		Anatomy
		Arms Lore
		Forensics

2/18/2005 - giwo (0.98-2.7d)
	Changed all the miscellaneous #ifdef DEBUG statements to #if defined( UOX_DEBUG_MODE ) for uniformity.
	Fixed a few minor issues in cScript.cpp.
	Removed cScript::RemoveFromRoot().
	Fixed some areas where structures were not initializing variables with default values.
	Fixed an issue with a couple of the JS Scripts:
		commands/misc/repeatingcmds.js and server/resource/pitchers.js using "var" keyword
		for initializing a global variables, was causing a crash with the newer js32.dll's.

2/15/2005 - giwo (0.98-2.7c)
	Made some structures private members of their only calling class.
	Removed unused InUseEntry2()
	Moved Spirit Speak skill out to JS.
	Moved Animal Lore skill out to JS, and re-wrote it to use a gump interface.

2/10/2005 - giwo (0.98-2.7b)
	Moved Hiding Skill out to JS.
	Moved Stealth Skill out to JS.
	Moved Evaluate Intelligence skill out to JS.
	Added RegisterSkill() JS Function.
	Added .steath prop to JS Characters.
	Fixed an issue with .attacker prop causing it to return the Characters target.

2/8/2005 - giwo (0.98-2.7a)
	Added the ability to reload a single JS file to CJSMapping.
	Added SE Function ReloadJSFile, along with a new command in js, RELOADJSFILE

2/7/2005 - giwo (0.98-2.7)
	Replaced trigger.cpp/.h with CJSMapping.cpp/.h Fixing several issues with JS Scripts.
	Added .desc prop to JS Items

2/6/2005 - giwo
	Fixed an issue causing JS commands to not function or crash the server
	Fixed an issue causing findMulti() to return items that were not Multis.

February 5 2005 - Maarc
	Probable fix for Polymorph not returning to the right body (can't test)
	The newbie dagger is no longer made on new character creation - use newbie.dfn people! (Not entirely complete, as not all references to EXTRA3 were removed)
	SaveStatistics() added to CWorldMain, which only really writes out the total of characters and items, but using it to help with a fix for WorldBuilder

2/3/2005 - EviLDeD
	Fixed a small problem with VC6 not liking the initializer list for the TAGMAPOBJECT structure.

2/3/2005 - EviLDeD
	Fixed the Crash on save bug after reloading the JS.
	Moved the TAGMAP system from jsval to TAGMAPOBJECT(See source)
	Removed some of the console spam used for testing purposes

1/30/2005 - EviLDeD (Contrib: Rynet)
	Corrected a display problem with boats. This has been commented out due to being a work around for teh SetZ/SetDispZ bug which has been fixed I believe
	Corrected some copy/referance issues in cSocket

1/28/2005 - EviLDeD
	Removed CTriggerScript class as it was redundant. Moved functionality into CTrigger class
	Improved the command load process by having CommandRegistration() send in the contextID responsible for command RegisterCommand()
	Increased amount of console spam looking for the full JS reload IE: console '8' that will crash the server on the next world save
	NOTE: Currently the console '6' Reload commands appears to operate correctly with no crash upon save. At this point it is recomended that any object/item/char script changes that are NOT magic or command related be done while the server is shut down until a solution can be found for this.
	NOTE: When solutio is found all console spam and comments will be removed internally.

1/16/2005 - EviLDeD
	Increased the JS global context stack size to 32kb from 8kb just to be safer
	Added cCommand::UnRegister(string,cScript*) function to facilitate removal of named command objects. Currently not in use.
	Added some console spam to help diagnose the AddMenu/PolyMorph gump issues not displaying correctly
	Fixed(Partially) the JS Command reloading. Now commands are correctly loaded, however side effect is that the server will
	 crash at save time. Once this last issue is sorted out then this bug will be fixed.

January 15 2005 - Maarc
	Removed saving/loading of ObjectType property - reduces load time by 40 seconds (420 down from 460) on a 70k item / 2k char world converted from old system
	Explicitly setting some pointers NULL after they have been destroyed
	Removed call to StoreRandomItemValue() in CMultiObj::LoadRemnants() - not really necessary, and the function call needs to be after world load, not during (ie candidate for PostLoad, if any)

1/12/2005 - giwo
	Moved Alchemy functionality out to JS.
	Moved the following use functionality out to JS.
		Scissors
		Potions
		Moongates
		Spun Fabric
		Unspun Fabric
		Cotton Plant
	Removed unused XGM code from the source.

1/9/2005 - giwo
	Moved the following Skill Functions to JS.
		RepairBow
		RepairLeather
		Tinkering
		Tailoring
		Fletching
		Carpentry
	Moved Food consumption functionality out to JS
	Moved teleport rune functionality out to JS.
	JS Changes
		Changed CChar_MakeMenu to CMisc_MakeMenu to allow access to sockets.
		Modified CMisc_MakeMenu to allow passing the skill number.
		Removed old style MakeMenu() function.
		Added CChar_FindItemType( itemType ) to allow searching for items by type.

1/8/2005 - giwo
	Fixed some minor issues with the new jse_typeassociations.scp handling.
	Included skills/healing.js in a first step toward putting skills in JS.
	Removed Skills::HealingSkillTarget

1/7/2005 - giwo
	Made some adjustments to the Client update range.
	Converted many functions to use references rather than pointers.
	Fixed Mark, Recall, and Gate Spells and Commands to handle different worlds.
	Added js/jse_typeassociations.scp
	Added CEnvoke to handle all envoke functions.
	Added CTriggerScripts to simplify script handling in CTrigger class.
	Renamed the class Triggers to CTrigger to conform to proper class naming standards.

1/2/2005 - EviLDeD
	Fixed the issue of client crash on the 3D client when access the 'add menu

1/1/2005 - giwo
	Fixed an issue causing corpses to not display to their "owner".
	Changed how we play the Death Animation to stop corpses from "moving".
	Altered corpses update to send a few less unneeded QueryToolTip packets.

12/31/2004 - giwo
	More cleanups in CPacketSend.cpp
	Renamed doDeathStuff() to HandleDeath() and moved it into pcmanage.cpp.
	Cleaned up the code a bit in HandleDeath() and its sub-functions.
	Fixed an issue causing starting skin color to disregard the players selection.
	Brought down the range at which items in containers were sent to other players.
	Added a GM check before updating a buy, sell, or bought layer to a character.
	Fixed an issue causing GOLD tag on NPC's not to be read in properly.
	JS Fixes
		Fixed an issue causing 'deletechar not to function (thanks Xuri).
		Fixed an issue causing 'wholist off not to function properly.

12/31/2004 - EviLDeD
	Updated the version to 0.98-2.5b
	Added, and fixed all the doors. Now they all should work properly including the new expansion
	Added all door ID's to harditems.dfn to ensure that all doors get type=12 including the new doors.

12/30/2004 - EviLDeD
	Updated the version to 0.98-2.5a this includes the changes that Giwo has commited. Remember to increment the version please.
	Fixed a small bug with accounts allowing more than one client to log in under a single account and manipulate the character.
	Fixed some logistics with the new doors, they all should work now, as long as they are set to type 12.

12/30/2004 - Xuri
	Added support for the new Samurai Empire weapons, and added three new WeaponTypes, DUAL_SWORD, DUAL_FENCING_STAB and
	 DUAL_FENCING_SLASH, to get more fitting combat animations for some of those weapons.

12/29/2004 - giwo
	Removed CChar::dispz as it served no purpose.
	Fixed an issue causing the Buy Window to not display prices and display items only after scrolling.
	Fixed an issue causing the server to send extra unnecesarry QueryToolTip packets.
	Fixed packet issues causing Dir and Z not to function properly on Items.
	Fixed a packet issue causing combat targets not to remaing highlighted.
	Fixed a crash on login casued by FindPlayersInVisrange().
	Minor cleanups in CPacketSend.cpp

12/27/2004 - evilded
	Added code for until now unsupported doors, including new SE doors (experimental!).
	Uncommented PORT functionality in source. This is the port in which UOX3 will listen on, it is wrong to assume that the port
	 listed on the first server list line in the ini file is correct. In almost ALL cases they would be the same however what if
	 they are not, and there are multiple servers listed that do not share the same listening port 2593.

11/24/2004 - giwo
	Removed unnecesarry Constructors/Destructors and did some minor updates.

11/21/2004 - giwo
	Fixed an issue causing the first item in a list not to be deleted when the list was cleared.

8/22/2004 - giwo
	Began enforcing stricter class naming rules in an effort to standardize the code (IE CSocket not cSocket).
	Removed some unneeded global variables.
	Rewrote ShowSkillTarget().
	Sized down CTownRegion::midilist to a UI16.
	Sized down some variables in the CSpawnRegion class.
	Fixed an issue causing all characters to be created with at least 1.0 base skill level.
	Minor cleanups.
	Moved 'wipe' and 'iwipe' out to JS.
	JS Changes:
		Fixed an issue with CChar_SetSkillByName().
		Added Character prop .tamed.

8/20/2004 - giwo
	More use of const_iterators where applicable.
	Changed some vector.size() comparisons to vector.empty().
	Minor fixes with a couple packets.
	Moved 'areacommand' out to JS.

8/13/2004 - giwo
	Converted a few areas of code to using refrences rather than pointers.
	Consolidated some code in cWeather.cpp and cRaces.cpp.
	Fixed a couple areas where an ACCOUNTSBLOCK was being copied and altered, but not set back on the object it was copied from.
	Implemented a temporary fix for multiple users on one account and other related issues.
	Modified CChar::petsControlled to make use of CDataList.
	Made use of const_iterators in place of iterators in many places.
	Modified a few more instances of CDataList to be handled by an accessor that would return a pointer.
	Removed MOREB (MORE2) from CItem.
	Modified Monster Gates (polymorph gates) to make use of items description tag in order to use string-type script entries.
	Minor fixes and updates.
	JS Changes:
		commands/targeting/set.js:  Fixed an issue causing 'set owner to not function properly.

8/6/2004 - giwo
	Fixed an issue causing extra invalid servers to appear in the server list.
	Added CPSellList to handle sending the vendor "sell" gump.
	Fixed weight adding twice every time a player picked an item up.
	Merged in some linux warning fixes.
	Removed some superfluous includes.
	Moved 'where' command out to JS.

8/4/2004 - giwo
	Fixed some Level 4 Warnings.
	JS Changes:
		CChar_Gate now supports passing a locations.dfn entry number (IE mChar.Gate( 1 ); ).
		CBase_Teleport now supports passing a locations.dfn entry number (IE mchar.SetLocation( 1 ); ).
		Added CSocket_SendAddMenu( menuNum ).
	Command Updates:
		Moved 'addx' out to JS.
		Moved 'add' out to JS.
		Moved 'xgo' out to JS.
		Combined 'xgoplace' with 'xgo'.
		Moved 'xgate' out to JS.
		Moved 'go' out to JS.
		Moved 'itemmenu' out to JS.

8/3/2004 - giwo
	JS Changes:
		Modified SoundEffect() as it was playing a sound one less than specified.
		Updated CChar_SetSkillByName() to return true if it successfully set, false otherwise.
		Updated many of the JS commands to fix some minor issues and improve output.
		Added GetSocketFromIndex()
	Command Updates:
		Moved 'fix' out to JS.
		Moved 'tele' out to JS.
		Moved 'xteleport' out to JS.

8/1/2004 - giwo
	Changed some variable sizes in order to reduce type mismatches and memory waste.
	Created a new class, CDataList, this is basically a safe wrapper for deque, where one can specify what they are storing.
	This allows us to consolidate quite a bit of code from several different classes by simply making our lists CDataList< objtype * >
	rather than using DCHARLIST or DITEMLIST, etc.

	Old style listings:
	------------------
private:
	DCHARLIST chars;
	DITEMLIST items;
	DCHARLIST_ITERATOR charsIter;
	DITEMLIST_ITERATOR itemsIter;
public:
	FirstChar();
	NextChar();
	FinishedChars();
	NumChars();

	FirstItem();
	NextItem();
	FinishedItems();
	NumItems();

	AddChar();
	RemoveChar();

	AddItem();
	RemoveItem();
	------------------

	New Style:
	------------------
public:
	CDataList< CChar * >	chars;
	CDataList< CItem * >	items;
	------------------

	Everything else is handled internally (and thus any bugs that arise can be fixed in one place, not half a dozen).

	JS Changes:
		New character prop: magicReflect, sets and returns if they have magic reflect on
		New character methods:
			SpellMoveEffect( target, spell )
			SpellStaticEffect( spell )
			BreakConcentration( [socket] )
		Wrote clumsy.js, the first UOX3 spell to be put in JS. This script is mostly working, but there are
		some issues that need to be worked out before the entire spell system is put out to the JS engine.

		Currently known issues:
			No way to cause one target to attack another in JS.
			No Line of Sight checks in JS.

August 2 2004
	Changed __unix__ references to UOX_PLATFORM != PLATFORM_WIN32

July 31 2004
	Increased JS context stack size from 0x2000 to 0x4000 (we may need the extra space)
	Updated JSEncapsulate for delayed initialisation (useful for optional parameters to methods)
	Implemented Console object in JS
		Methods
			Print			1 (text to print, include \n at the end unless you're sending multiple mesesages)
			Log			1 (text to print, same as above.  Optional second parameter is the name of the file to log it into)
			Error			2 (error level, text to print)
			Warning			2 (warning level, text to print)
			PrintSectionBegin	0
			TurnYellow		0
			TurnRed			0
			TurnGreen		0
			TurnBlue		0
			TurnNormal		0
			TurnBrightWhite		0
			PrintDone		0
			PrintFailed		0
			PrintPassed		0
			ClearScreen		0
			PrintBasedOnVal		1 (pass true or false, it will say pass/fail based on this)
			MoveTo			2 (x coord, y coord - if you want the same line, y == -1)
			PrintSpecial		2 (colour of text, text to print)
		Properties	(most of these can be ignored, as they do very little eg boundaries)
			left			left (always 0)
			top			top (always 0)
			height			height (always 0)
			width			width (always 0)
			filter			filter setting
			mode			filter mode
			level			filter level, integer
			logEcho			boolean - determines if log calls get echo'd to screen

	Wrote a console test driver script (command consoletest)
	Posix compliance fix from xir
	Added MSVC7.1 project files

July 29 2004
	Note: We need to change references to __unix__ to something more like UOX_PLATFORM != PLATFORM_WINDOWS or UOX_PLATFORM == PLATFORM_LINUX
	Some of che's fixes were not fixes (ie commenting out the throws) or improperly done (platform specific decls don't go in uox3.h)

7/28/2004 - giwo
	Minor fixes, cleanups
	Included che's linux fixes

July 28 2004 - Maarc
	Possible crash in _add avoided
	GetAmount() returns a UI16 and we were comparing to 0xFFFF, no longer needed
	Three possible crashes in ShowCName stepped around
	Called GetWord rather than GetDWord for magic targeting
	Possible crash in addRandomColor avoided (only if colorlist didn't exist)
	Possible crash in LoadFromScript (townregions) avoided
	Fixed an issue that VC7.1 finds.  We clear() a list, and then reference the first item, in processing the INI, which crashes
	Modified some changes from che
	Fixed some typo declarations
	Moved stdexcept into UOXStdHeaders, so that exceptions can be used wherever needed
	for loop problem declaration (using var outside loop)


7/25/2004 - giwo
	Removed several vtables from classes that were not subclassed
	Added struct GoPlace_st and CWorldMain::goPlaces map to replace re-reading entries every time we use GoPlace.
	Removed MakePlace()
	Removed cSocket::AddX & AddY and renamed AddZ to ClickZ
	Fixed an issue causing invalid entries to exist in the ObjectFactory (causing a crash on WIPE ALL)
	Once again merged deletionIQueue and deletionCQueue back together as a QUEUEMAP (as ObjectFactory fixed the original problem).
	Combined CBO::Visible(), CChar::Hidden(), and CChar::PermHidden() into a single CBO::Visible() using enum VisibleTypes
		0 = Visible
		1 = Temporary Hidden (Skill, Item visible to owner)
		2 = Invisible (Magic Invis)
		3 = Permanent Hidden (GM Hide)
	Moved all of the remaining targeting functions out of cTargets and removed the class along with targeting.h
	Converted CWM::creatures[] into a map and creat_st into class CCreatures.
	Converted TeleLocationEntry into class CTeleLocationEntry.
	Fixed an issue with UString::number() causing it to only return decimal values.
	JS Updates:
		Changed SetSecondsPerUOMinute() to SecondsPerUOMinute() used to Set and Return the value.
		Converted ReadBytes( socket, offset ) to CSocket_ReadBytes( offset )
		Converted Get DWord/String( socket, offset ) to CSocket_Get DWord/String( offset )
		Converted Set Byte/Word/DWord/String( socket, offset, newVal ) to CSocket_Set Byte/Word/DWord/String( offset, newVal )
		Renamed CChar_WanderBox() to Wander() and allowed it to handle a circle (3 values) or box (4 vals).
		Modified Get/Set Timer() to work for both Sockets and Characers (Perhaps need this for Items as well).
		Added CItem_Dupe() to allow duping of items in JS.
		Added CChar_Jail( numSecs ) and CChar_Release() to Jail and Release characters
		Added IterateOver( objectType ) and onIterate( object ) to allow looping through world objects.
		Added CChar_Kill() method to kill a character.
		Added SendStaticStats() to build an info gump for statics and map tiles.
		Added Gump.AddPageButton() to allow Next/Last page buttons.
		Added NumToHexString() to allow converting a number to a hex string.
		Added SetSkillByName() method to CChar to simplify setting skill by name.

		Added a map to map strings to objectTypes;
		Currently this is used in CreateBlankItem(), CreateDFNItem() and IterateOver()
			"BASEOBJ" 	= OT_CBO
			"CHARACTER" 	= OT_CHAR
			"ITEM" 		= OT_ITEM
			"SPAWNER" 	= OT_SPAWNER
			"MULTI 		= OT_MULTI
			"BOAT" 		= OT_BOAT

		Properties:
			Characters:
			Added isJailed prop to check if a character is in jail
			Added squelch prop to toggle Characters squelched status.
			Added spattack prop to set NPC's Spell Attack value.
			Added spdelay prop to set NPC's Spell Delay value.
			Added aitype prop to set NPC's AI Type.
			Added split prop to set amount of NPC's to split into on hit.
			Added splitchance prop to set NPC's chance of splitting on hit.
			Added trainer prop to toggle NPC's ability to train skills.
			Items:
			Added corpse prop to toggle whether or not an item is a corpse.
			Added strength prop to set items str-to-wear value.
			Added wipable prop to toggle items ability to be wiped.
			Added buyvalue and sellvalue props to set items value.
			Added restock prop to set amount of items to restock in a shop.
			Added devinelock prop to set items Devinely Locked property.
			Spawners:
			Added spawnsection prop to set script section for spawner to pull from.
			Added sectionalist prop to toggle whether or not the above section is a list.
			Added mininterval and maxinterval to set how many of an item to respawn per call.
			Misc:
			Renamed CSocket_addz to CSocket_clickZ
			Added weight prop to Characters and Items to get and set the weight value.
			Added isSpawner prop to Characters and Items to identify a SpawnItem.
			Added allskills prop to Skills class to set all skills at once.
	Command Updates:
		Moved RESURRECT out to JS.
		Moved NACCT out to JS.
		Moved GUMPMENU out to JS.
		Moved JAIL and RELEASE out to JS.
		Moved HIDE and UNHIDE out to JS.
		Moved SECONDSPERUOMINUTE out to JS.
		Moved NPCBOUND to JS and Split it into NPCRECT & NPCCIRCLE.
		Moved SQUELCH and MUTE out to JS.
		Moved DUPE out to JS.
		Moved SHOWDETAIL out to JS.
		Moved KILLALL out to JS.
		Moved DELID out to JS.
		Moved CLEANUP out to JS.
		Moved ZEROKILLS out to JS.
		Moved TELESTUFF out to JS.
		Moved KICK out to JS.
		Moved DELETECHAR out to JS.
		Moved KILL out to JS.
		Moved ISTATS out to JS.
		Moved CSTATS out to JS.
		Moved SET out to JS.
		Moved INCX, INCY, and INCZ out to JS.
		Removed WF

7/22/2004 - giwo
	Added JS access to sockets xtext (string) property.

7/20/2004 - giwo
	Fixed an issue causing a crash on shutting down the server.
	Modified UOX to disallow loading one script whilst another is loading.
	Fixed an issue causing newer clients to lockup when using a boat.
	Fixed an issue causing PostLoadProcessing() to never be called for Multis.

7/18/2004 - giwo
	Fixed an issue causing items and characters not to be properly removed from sight.
	Fixed a minor problem causing statwindows to not update properly.
	Fixed an issue causing item and characters to not be distinguished properly when doing a calcFromSer().
	Fixed an issue causing client to lag permanently shortly after logging in.
	Fixed an issue causing UOX to bail out when setting the container of an item in JS.
	Consolidated some code in cSocket.cpp
	Began moving commands out to js:
		ACTION
		ALLMOVE
		BOLT
		BRIGHTLIGHT
		BUY
		CY		(Now cnsyell)
		DARKLIGHT
		DUNGEONLIGHT
		FULLSTATS
		GATE
		GLOW
		GMOPEN		(Now openlayer)
		GY		(Now gmyell)
		SGY		(Now adminyell)
		SHOWTIME
		HEAL
		HOUSEICONS
		MANA
		MARK
		MIDI
		MOVETOBAG
		NPCTARGET	(Now follow)
		READINI		(Now reloadini)
		RECALL
		RELOADACCOUNTS
		RELOADDEFS
		REMOVE
		REMOVESHOP
		RESEND
		SELL
		SETPOISONED
		SETRACE
		SFX
		SKIN
		STAMINA
		UNGLOW
		WHOLIST
		XBANK		(Now openbank)
	Added the following functions to the JS engine:
		Yell( socket, toYell, commandLevel )
		GetDictionaryEntry( entryNum, [language] )
		RaceGate( socket, character, raceNum )
		WorldDarkLevel() to set and return cSD:WorldLightDarkLevel().
		WorldDungeonLevel() to set and return cSD:DungeonLightLevel()
	Added the following character props & methods:
		(bool) allmove
		(bool) houseicons
		OpenLayer()
	Added the following item methods:
		UnGlow()
		PlaceInPack()
	Added the following cSocket props & methods
		(object) tempObj
		WhoList()
	Modified:
		Reload(), Now accepts case 9, reload accounts.
		GetWorldBrightLevel() renamed to WorldBrightLevel(), now sets and returns cSD::WorldLightBrightLevel()

14 July 2004 - Maarc
============
	Integrated Xuri's dir property for JS items
	Bug fix on command_darklight (Xuri)
	Altered the ACCOUNTSBLOCK code so that it uses proper constructor rather than assignment (double assignment, essentially)
	Removed some unused properties of accounts (bPackPacket)


7/12/2004 - giwo
	Added 'FIXSPAWN command to update all item spawners in the world to work with CSpawnItem.
	Minor changes.

7/11/2004 - giwo
	Fully implemented CSpawnItem, removing remnants of old spawners.
	(Note this will break any current spawn items you have in your world, sorry for the inconvenience).
	Broke cBaseObject::Dupe() into two functions, Dupe() and CopyData() to allow carrying over cBO settings
		to the Duped item and make way for future sub-classes of CItem and CChar.
	Modified townregions to now store an npclist to pull guards from and the total amount of guards to spawn.
	Updated the CommandList docs with the latest changes to the command list.
	Minor consolidations and modifications to the scripts.
		Removed /tracking/ and /polymorph/ moving their scripts into /menus/.
		Removed /digging/ and /fishing/ moving their scripts into /items/itemlists/.
		Fixed up /items/gmmenu/spawners.dfn to function with CSpawnItem changes.
		Modified regions.dfn to match up with changes to TownRegions.
		Fixed an issue causing advance.dfn to not read in properly.
	Fixed an issue causing nested itemlists and npcslists to not function properly.
	Added a few more dictionary entries.

09 July 2004 - Maarc
============
	Completely switched over to ObjectFactory code, getting rid of the other stuff - think its best for debugging
	Fixed a bug with 'make gm, we were trying to sprintf a std::string
	Removed periodic trigger code, as it never has a chance to load or activate, and needs a rethink (more like commands or spells?)

08 July 2004 - Maarc
============
	Changed the saving of Damage property, we read it in as lo,hi and write it as hi,lo - now consistent
	Found the non-disappearing horse bug on mounting.... Teleport() does a RemoveFromSight, but by THAT time, we've already... gone :)
		2 possible fixes
			1) Store the old location so it can be used on RemoveFromSight
			2) Tell *everyone* about it
		For the moment, I have elected the former until we can decide on a better strategy, as the implementation does get a bit hairy
	Implementation was missing for Delete() for CItem and CChar under ObjectFactory mode - by implementing this, wipe works again, amongst other things.

7/7/2004 - giwo
	Consolidated all the more's in CItem into a single tempVars[] array.
	Once again implemented deques in SubRegions and fixed some issues with list corruption.
	Implemented deques in CItem to avoid corruption in Containers
	Added CObjectHandler class to replace need for hash tables to map serials to indexes.
	Fixed some possible issues with cSpawnRegions.
	Fixed an issue causing some crashes involving speech.
	Further implementation of CSpawnItem.
	Fixed many areas where a hex value did not have the 0x infront of it.
	Modified CreateDFNItem() and CreateBlankItem(), now accepts specification of the objecttype (defaults to normal item).
	Modified a few of the targeting functions to make way for adding spawner items.

07 July 2004 - Maarc
============
	JS related fixes
		"scrollLow" property of Spell objects was set as an index... it's not that, it's an individual value
		skillsused is now like baseskills and skills for characters (previously unaccessible)
		Removed GetGuildMaster function as it referred to old chars[] array
		Converted CalcTargetedChar function to be similar to CalcTargetedItem so it returns a real object
		onCallback%i will now set targeted to a NULL object if the object clicked on is not valid, or not an object (eg a tile)

	Added the following properties to the JS Character object

		townpriv
		guildtitle
		fonttype
		saycolor
		emotecolor
		attacker
		racegate
		skillLock
		deaths
		nextAct
		petCount		read only
		ownedItemsCount		read only
		cell

	Added the following methods to the JS Character Object

		GetTimer( timerID );
		SetTimer( timerID, numMilliseconds );

	Valid values for timerID are:

		0	//	tCHAR_TIMEOUT
		1	//	tCHAR_INVIS
		2	//	tCHAR_HUNGER
		3	//	tCHAR_POISONTIME
		4	//	tCHAR_POISONTEXT
		5	//	tCHAR_POISONWEAROFF
		6	//	tCHAR_SPELLTIME
		7	//	tCHAR_ANTISPAM
		8	//	tCHAR_CRIMFLAG
		9	//	tCHAR_MURDERRATE

			// NPC Timers
		10	//	tNPC_MOVETIME
		11	//	tNPC_SPATIMER
		12	//	tNPC_SUMMONTIME

			// PC Timers
		13	//	tPC_LOGOUT

	Updated CItem::SetCont so that it doesn't try and do things it shouldn't during world load
	NOTE: We have an issue... we can't validly set all the weight stuff until the world's loaded
	OKAY, the base default world now loads with the new object factory, and it's all fun and games.

06 July 2004 - Maarc
============
	JS related fixes
		Reenabled the ability to set poison and magic resistance on a race object
		All setProperty routines now use JSEncapsulated, should be *much* more tolerant now
		Any attempt to do something like mSock.currentChar = pUser; would fail, replacing pUser with the actual current char.  It should now behave properly
		It is now possible to set a socket's tempInt property

05 July 2004 - Maarc
============
	Fixed a problem where it would crash on reloading JS scripts (via magic and commands)
	Removed commented out code that was never used (including tempeffectsoff and tempeffectson)
	Added some methods to help with deletion issues in the temp effects queues
	These fixed an issue where creating a timer on a just elapsed timer would cause a crash
	CCP_TARGET can now be set - char.target = npc;
	More support for floats in the use of properties for characters - dex (x2), int (x2), str (x2), mana, stamina, health
	Note that it will throw an exception if you do not pass a parameter of the right type
	We need a longer term solution to this particular problem.  One idea - create a class JSEncapsulate that takes the JSVal and context, and stores the data internally, with methods that allow it to be casted back to a "proper" value
	As certainly we will need this for more than just the character class

04 July 2004 - Maarc
============
	nspawnsp and ncspawnsp rolled into CItem class.  Only items can be spawners (not NPCs), and all references to those objects now are done within the CItem class, or through FirstSpawn/NextSpawn/FinishedSpawn
	Updated documents to not use CHARACTER or ITEM unless where it is actually used, to aid in finding where CHARACTER and ITEM references are that need to be ported to CChar * / CItem *
	Updated ObjectFactory with a CountOfObjects method, which allows us to discretely count (if we wish) the number of objects for each type we have
	I believe we've just about covered everything in ObjectFactory that is required to encapsulate chars[] and items[]
	Removed an unused method in WhoList (GrabSerial)
	From what I can see, all references to CHARACTER and ITEM are now done by deletion queues or the char/item handlers
	Added Singleton.h from OGRE, and adapted ObjectFactory to be one.  We can create and delete this in a local context, and use ObjectFactory::getSingleton() everywhere else we might need it.
	Spelling fixes
	Begun the integration of  the ObjectFactory which is #ifdef'd at the moment.  The ObjectFactory integration does NOT compile, and error messages are left in place for what needs to be done.
	Some of the stuff we need to be able to do with the ObjectFactory is essentially, a for every char/item in the world... so what we need to do is support FUNCTORS, I think that would be the most useful
	The question becomes... what sort of functors?  something of the variety of:

	bool MyFunction( cBaseObject *working, UI32 &counter, void *extraData );

	As this will solve almost everything we want to do (reset kills, remove keys and so on), and allow us to bail out early if needed (via the bool, return true if continue, false if not)

	A few functions are implemented thusly (including world load postloadprocessing)

03 July 2004 - Maarc
============
	Fixed an accidental bug where it would constantly process legacy accounts
	More use of upper() caching
	Added Config.h, Platform.h, Prerequisites.h and UOXStdHeaders.h
	Thrown *everything* into the UOX namespace
	Predeclared most of your classes (not packets, and not a few other minor ones) in Prerequisites.h
	Begun an implementation of an object factory for creation, destruction and recycling of objects.  This is not hooked into the main code pipeline, because some of it still relies on ITEM or CHARACTER types, which we want to eliminate (no more global chars or items!)

	Removed some SE functions (not JS object functions) that relied on chars[]/items[] and hence would fail miserably

		GetLightLevel
		SetPrivateBitRange
		GetPrivateBitRange
		SetPrivateWord
		GetPrivateWord
		SetPrivateBit
		GetPrivateBit
		SetSkillUse
		SkillBeingUsed
		GetGuild
		CompareGuild
		RemoveFromGuild
		AddToGuild
		AttackTarget
		Attack
		IsMemberOfTown
		CalcRank
		UseReagants
		UseReagant
		FindItemOnLayer
		RaceCompare
		GetCharPack
		SetSerial

		SetDecayTime
		GetDecayTime

	chars[] and items[] are now really only referenced in a few small places (less than 10 by array on both, less than 50 by member funcs eg calling Count)

	================
	Discussion Ideas
	================

	OgreConfig	- Compile time configuration options
	OgrePlatform	- Platform / compiler compatibility file - includes OgreConfig
	OgrePrequesites	- Includes OgrePlatform.  Disables any compiler warnings, stl compliance (eg HashMap) and some typedefs (eg uchar).  Also includes OgreStdHeaders and forward declares any classes needed.

	Should lift off the Singleton class, as it would help with some of our data and initialisation

	Useful classes as Singleton (some possibly lifted from OGRE)

		LogManager

	Other potential useful classes

		template <> FactoryObj
		ResourceManager


	Other possibilities

		Asynchronous network!  Esp under windows, where it can callback at any time - inject events into a queue for the PC
		Consider using a multimap or hash_multimap for storing our object types... given that hash_multimap is like standard, multimap may be a better bet
		However, there are differences: multimaps are sorted, ergo inserts/deletes are logarithmic - hash_maps are not, only hashed, so constant time.  In theory, hash will be better, but given we do little in the way of insert/deletes, multimap would be agood start

7/2/2004 - giwo
	Made use of OnDrop() JS function.
	Cleaned up some areas where we were calling UString::upper() far too many times for a single string.
	Removed unneeded cBO::Load overloads in CItem, CChar, CMultiObj and others.
	Initial implementation of CSpawnItem in order to break CItem up into smaller classes.

02 July 2004 - Maarc
============

	Fixed display issue with saving packet logs (hex values a->f weren't displayed right)
	Fixed an issue with the add menu that was relying on gumps that didn't exist in older clients
	Fixed CTEffect constructor so it inits the assocScript
	Fixed an issue with StartTimer - it would never call back into another script properly
	Fixed an issue with the action property of spells in JS - it was wrongly declared as an index, not a static param!
	Added ClientCanReceive to CPNewSpellbook so it can fallback on pre-4.x clients to the old method
	Added CCP_SPELLCAST/"spellCast" property to JS Character objects
	Added CCP_ISCASTING/"isCasting" property to JS Character objects
	Added SetJSCasting/IsJSCasting to CChar but this is a *temporary* measure only.  When all spells are outsourced to the JS scripts, it can be removed, so that other code doesn't misbehave (ie the code currently will call CastSpell if you're in casting mode and the timer has elapsed... which won't happen under JS!)

	onSpellCast for JS spells has been changed to:

	onSpellCast( socket, character, directCast, spellNum );

	This allows for multiple spells registered in a single file (eg think all the summon ones, for instance)
	StartTimer now looks like
		BaseObject.StartTime( numMillis, TimerID[, optVal] );

	optVal can either be a boolean (call back into this script, so we don't have to know it's number... this solves non-item/npc scripts so magic can work right) or an integer (the script number to call back into)
	A very basic workflow script exists for clumsy - it does not take everything into account, nor does it actually do the clumsy part, it's just an example.

01 July 2004 - Maarc
============
	Fixed a bug with newaccounts.adm and parsing
	Converted ImportAccounts to use std::string and UStrings
	Removed the ability to pass "+add:user,pass,email" and "+import:filename.import" arguments to the binary.  This *cannot* be done at this stage, as the accounts haven't been initialised and loaded, so conflict resolution cannot occur.
	Removed typedef of CLPSTR as no variables use it
	Removed some strlwr's in favour of using a UString with lower()
	Substring search now uses UStrings rather than allocating and deallocating char * arrays
	Added character6 to the account property object for JS
	Added a #define CHARACTERCOUNT to cAccountClass to help centralise any changes
	Removed old jsMagicTable_st data
	Added spell equivalents to the JS command registration

		RegisterSpell( spellNumber, isEnabled );
		DisableSpell( spellNumber );
		EnableSpell( spellNumber );

	Spell JS files can be registered by adding entries like this:

	FILE=path/file.js

	into [MAGIC_SCRIPTS]

	Note that it automatically prepends the path to the JS scripts before it, so you only need to put in a relative path (ie same as command scripts)

	onSpellCast( socket, character, directCast );

	socket is the character's socket (not guaranteed to exist, only if PC is casting)
	character is the character casting
	directCast is a boolean
			true if
				an NPC
			false if
				a PC selecting from a spellbook, wand or scroll
				a PC who has casted from a JS script depending on param (ie char.CastSpell( spellNum, true/false ) (if true))

	// It is the responsibility of the JS script to call the proper events (ie onSpellSuccess and so forth)
	// They deal with their own mana subtraction and all sorts of things
	// They also deal with valid regions and what not.  s is *not* guaranteed to be valid (ie it could be an NPC)
	// Suggested script workflow:
	//	* Check if already casting, if so, stop and dump out
	//	* Check if frozen, if so, can't cast spell
	//	* Check if enabled
	//	* Check if scroll, wand or normal cast (scroll reduce requirements, wand do straight away)
	//	* Check requirements (min int, dex, str)
	//	* Check for reagants
	//	* Check if can cast in this area
	//	* Determine if the cast "succeeded"
	//	* If so, fire onSpellSuccess, otherwise fire onSpellFailure.  If failed, speak and return
	//	* Set the player as "casting" and freeze
	//	* Create timer for when the spell will be complete
	//	* Wait for timer to elapse
	//	* Upon timer elapsing,
	//	*	Unfreeze player
	//	*	Send target identifier if any (based on timer) and wait for callback
	//	*	If not target, do action (if any)
	//	*	If target, create onCallback function
	//	*	On callback, do stuff
	//	* NOTE * For area affect spells, use an AreaCharacterFunction

	Note to self - Want to update TriggerEvent so that you don't just pass a script number (though it's possible) but also a variant where you pass a character/socket/item, so that it can use the script associated with that

	The spell JS file also has to include a SpellRegistration command

	function SpellRegistration()
	{
		RegisterSpell( 1, true );	// say, clumsy, same as in the spells.dfn file
	}

	As it stands, only 1 spell per file, unlike the JS commands, which I should probably fix up by adding a spell ID to onSpellCast and passing it all in (would make life much easier for area effect versions of single spells)

6/27/2004 - giwo
	Broke packets.cpp/.h into CPacketSend.cpp/.h and CPacketReceive.cpp/.h
	Implemented some debug code to hopefully clear up some crash issues with region loops.
	Modified the deltionQueue in order to ensure proper deletion of objects.
	Fixed an issue causing characters to never switch targets in combat until their target died.
	Fixed a minor issue with Packet Logging.
	Fixed an issue causing a crash on creation of a new character.
	Fixed issue causing many regions to not be recognized.
	Added display of characters region to 'cstats command.
	Implemented support for new Popup ToolTip displays.
	Implemented support for new Spellbook packets via CPNewSpellBook packet class.
	Implemented support for OSI displaying damage above victims head via CPDisplayDamage packet class.

6/25/2004 - giwo
	Fixed a small bug causing things to crash intermitently and appearingly random(Thanks Abaddon!)
		There was ONE sName[32] still left in the code, and he found it! This is only an upate
		pactch.

6/19/2004 - giwo
	Fixed several issues with boats, should function normally again.
	Fixed an issue causing "bad multi setting" error message.
	Fixed create menus coming up as blank gumps (note they seem to have other issues though).
	Removed deques from SubRegions, as they seemed to be causing some crashes.
	Upped the limit on a characters Name and Name2 attribute to 50 characters.
	Fixed items with a SpawnObjList setting in the DFN's, should now properly spawn NPC's.
	Fixed 'wipe and 'iwipe commands, should now properly wipe all items in(or out of) selection.

6/13/2004 - giwo
	Fixed an issue causing characters without fame/karma titles to display as "The  Name".
	Fixed an issue where characters with Grandmaster status would not have a prowess title.
	Fixed a flagging problem causing offline characters not to appear "greyed" out.

6/12/2004 - giwo
	Corrected some small logic errors with the new account slot. Should work well now.
	Modified command handling so strings of text would not be converted to all caps.
	Added missing "Name" entry into 'set (IE 'set name blah).
	Fixed an issue causing JS gumps not to respond when a button was pressed.
	Fixed an issue causing 'set movable # not to work.
	Updated allmove and houseicons commands to automatically update the client.

6/11/2004 - giwo
	Fixed a small bug with the offline html output overwriting the online file.
	Added server side support for 6 character slots. (Currently disabled still)
	Adder server side support to allow player to select paladin, or necromancer at char creation
	More support for cBoatObj made it into this commit to the cvs as well.

6/7/2004 - giwo
	Made use of deques in place of vectors in SubRegions to allow faster memory recovery.
	Fixed an issue where an object in a multi was not being removed from the multi container.
	Modified CreateItem() routines so items created directly by ID are not decayable by default.
	Fixed 'add <hex-id> to pull directly from .mul files, not the scripts.

6/06/2004 - giwo
	Many changes have been made. Specifically dealing with structure, and  STL conformity. Other changes include dynamic gm menu item
	fetching, a very large bug preventing valid world files from being saved to disk correctly or at all.
	Added a new GM Menu gump design with new functionality. Documentation to come, but you can now tag items directly from the DFN blocks and assign them to a itemmenu group dynamically at runtime.
	fixed some spacing and other whitespace related issues.

6/5/2004 - giwo
	Fixed a crash caused by placing a house.
	Fixed certain entries in the Help gump not functioning.
	Fixed a crash caused by invalid objects in the tempeffects queue.
	Fixed a crash caused by 'dupeing items on the ground
	Changed 'add tile <hex-id> to 'add <hex-id>
	Documented Weight.cpp
	Documented ai.cpp

12/30/2003 - giwo
	Rewrote much of the combat code, renamed cCombat to CHandleCombat.
	Fixed a problem causing characters accounts not to be properly set.
	Fixed an issue causing monsters to not play any sounds.
		Changed NPCLIST and ITEMLIST behavior to allow nesting lists (for instance, if you want all
	orcs on another list, add npclist=allorc rather than manually adding each NPC entry).
	Updated spawnregion NPCLIST and ITEMLIST loading to handle the above changes.
	Many optimizations done to checkauto(), checkNPC(), checkPC, and genericCHeck().
	Moved checkauto() to CWorldMain class and renamed it CheckAutoTimers().
	Fixed Polymorph spell and tracking skill, unifying the code a bit for easier maintenance.
	Moved Polymorph Duration out of polymorph.dfn and into uox.ini to remove needless re-loading.
	Broke CheckAI() out into several smaller functions simplifying things a bit.
	Tweaked checkItem() cleaning up RespawnItem() and DecayItem() and optimizing things a bit.
	Fixed display of clothing on corpses.
	Made more use of RefreshQueue, now is used for updateStats, Thus SetStrength/SetHP and other Stat-modifying mutators use Dirty().
	Updated Dirty() to allow passing of a var (matched to an enum) that is then used to determine the type of refresh.
	Created virtual functions of many pre-existent functions in CChar to allow setting of Dirty() var for updateStats().
	Changed most object pointers in CChar to serials, this is less speedy, but safer (we were getting item objects passed back as character objects, etc).
	Fixed many scenarios causing crashes due to a bad socket pointer in tempeffects.
	Fixed several bad socket crashes in magic.cpp.
	Fixed several instances where invalid objects would be left around causing later issues/crashes.
	Updated / fixed-up Spawnregions to improve functionality, speed, and all-around usability.
	Fixed SetSpawn() when object is spawned by a spawnregion, was forcing the region num down to a UI08 (which we handle them as a UI16),
		also this allows us to calculate our spawnregion (and thus not need to search through all of them in Cleanup()).
	Commands:
		Removed many commands updating other commands to take their place.
		Fixed command "regspawn" and gave it capability to pass "ALL" rather than region number to allow removal of "regspawnall"
		Removed regspawnmax
		Removed wipenpcs, moving its functionality to wipe (usage "wipe NPCS", "wipe ITEMS", "wipe ALL")
		Made wiping commands default to Admin-Only.
		Fixed an issue causing many commands not to function properly, if at all.
	Fixed display of (# items, # stones) on containers.
	Added SetDecayable( true ) to cItem::CreateBaseItem() to default items to decayable.

12/7/2003 - giwo
	Optimized and cleaned up walking code a great deal.
	Removed calcSocketObjFromChar() in favor of passing along a socket wherever possible.
	Added cMapRegion::PopulateList() to simplify region loops.
	Made CChar and CItem SendToSocket public members and made use of them in some areas.
	Removed cBoat class and locally declared the few functions it contained where needed.
	Fixed a minor bug with triggerwords.
	Fixed house creation and broke buildHouse() into several smaller functions.
	Fixed door and sign deletion upon re-deeding houses.

11/29/2003
	Made extensive use of iterators for iterating through vectors.
	Made use of .erase() and .push_back() to simplify our vector handling.
	Rewrote our command table to simplify it a bit and remove the need for two structs.
	Extensive fixes/changes to HTMLTemplates and HTMLTemplate classes.
	Fixed an issue when using CChar::SetLocation() where Dirty() was not called.
	Removed Dictionary.h from global scope.
	Moved several structs and typedefs into private members of their only calling class.
	Made use of UString::replaceSlash() in place of our current PathFix() functions.
	Removed vtables from a few more functions that had no need of virtual functions.
	Rewrote JailSystem::WriteData() to make use of an ofstream, and moved out the code specific to
		a Jail Cell into its own WriteData() function.
	Changed insta-log code so only house owners are logged out in their house, saving us some time searching for a matching house key.
	Removed Network::kr and faul as they performed the same function as cWmWorldState::KeepRun() and Error().
	Fixed an issue in loading mapregions where Items and Characters would not be properly deleted if they failed to load.
	Took our main classes out of global scope, now only files that include their headers will have access to them.
	Added CServerProfile class to remove our profiling variables from global scope.
	Simplified a bit of the handling in targeting.cpp, allowing the removal of many functions.
	Tinkered with lineofsight.cpp a bit allowing the removal of itemids and loscache from cItem class.
	Moved doorbase[] out of global scope and into door.cpp.
	Made use of cSkillClass in cPlayerAction.cpp BestSkill().

11/22/2003
	Fixed bug causing NPC's not to be created.
	Fixed a server crash upon login (caused by checking an invalid region).
	Simplified much of gumps.cpp, removing cGump in the process.
	Removed several members of cCommands and moved them to their only usage in cmdtable.cpp.
	Added packet classes CPIGumpInput, CPIHelpRequest, CPITradeMessage and CPIDyeWindow.
	Fixed a few instances where UString::sprintf() was causing a server crash (unknown as to why).
	Removed some repetitious code.
	Removed unneeded overloads of cSocket::target and cSocket::mtarget
	Combined cSocket::ShowCharName() and cSocket::textFlags.
	Made more use of strings and UString.

11/17/2003
	Added CResponse.cpp & CResponse.h
	Moved the bulk of cSpeech::Response() into CResponse() classes.
	cSpeech Changes:
		Changed genericTalking into CPTalkRequest::Handle().
		Combined sysbroadcast and consolebroadcast to sysBroadcast.
		Removed checkForVendorResponse() and responsevendor().
		Removed cSpeech class, locally declared its remaining functions.
	Removed cSpeech.cpp/.h from the project.
	Fixed up packet logging, making use of an ofstream.
	Added support for OSI TriggerWords rather than doing our own string searches.
	Made use of ofstream in several areas where we currently used fopen().
	Made RealTime inline and used it in place of duplicate code in CConsole.cpp.

11/10/2003 - giwo
	Added script creatures.dfn to store (and allow easy modification of) our creature data.
	Removed CWorldMain::initCreatures().
	Reduced redundant code.
	Fixed some minor issues.

11/7/2003 - giwo
	Implemented Object deletion queue.
	Made use of VALIDATESOCKET(s) in skills.cpp and cmdtable.cpp.
	Changed itemQueue and npcQueue to a single refreshQueue.
	Converted spawnregion[] to a cSpawnRegion vector spawnregions.
	Fixed up many classes to avoid using virtual functions unless necesarry (IE they have derived classes).
	Added ValidateObject() to take the place of NULL checks on pointers to cBO and its derivatives.
	Added CItem::Cleanup(), CChar::Cleanup() & cBO::Cleanup().
	Added cBO::Delete(), and IsDeleted();
	Added CItem::Spells() to take the place of MoreXYZ in Spellbook handling
	Removed CItem::Dirty() and CChar::Dirty().
	Removed cItem::DeleItem() and cCharStuff::DeleteChar().
	Removed cWM::TotalTownRegions() and TotalSpawnRegions().
	Removed CChar::SpellAction().
	Removed CItem::Doordir().

Oct 31 2003 - giwo
	Added struct ProwessTitle to allow more customization when dealing with prowess titles in titles.dfn.
	Added vector prowessTitles to CWorldMain.
	Added map idToItemType in cPlayerAction.cpp to remove redundant doubleclick item handling based on both ID and Type.
	Added scriptability (itemtypes.dfn in /items/ dir) for automatically associating an items ID to an item type.
	Added cSocket::TempObj() in place of addmitem and overuse of AddID.
	Changed cSocket AddX() and AddY() to SI16, made more use of TempInt().
	LoadSkills() now sets a skills madeword to "made" by default.
	Updated several areas where we loaded in scripts to make use of UString.
	UOX now reads in a skills madeword from skills.dfn rather than setting them manually in ResetVars().
	Converted skill[].madeword into a string.
	Combined skillTitle() & prowessTitle() into getSkillProwessTitle() to reduce wasted cycles in PaperDoll().
	Moved npcAct() to cTargets and renamed it to DoActionTarget().
	Changed command SETID to require only one value (IE 'setid 0x0191 rather than 0x01 0x91)
	Implimented Character update queue.
	Renamed fameTitle() to getFameTitle().
	Removed handleDoubleClickIDs().
	Removed npcAction() as cEffects::PlayCharacterAnimation() did the same thing.
	Removed std::string prowess from titles_st.
	Removed some unneeded typedefs and defines.
	Removed ResetVars() as it was no longer needed.
	Removed SleepNiceness() and CServerData::niceness as there was no need for it any longer.

	Changes to cBaseObject and its derived classes:
		Added CItem::ItemDecayed() to simplify CItem::Save().
		Removed CItem::enhanced, making use of priv variable instead.
		Removed CChar SkillItem() and Trainer().
		Removed some unused functions.
		Removed CChar may_levitate, willHunger, casting, and med variables, making use of the bools variable instead.
		Moved CChar::GetBestSkill() to cPlayerAction.cpp as BestSkill().
		Changed CChar fx1, fx2, and fy1, fy2, to fx[2], fy[2] to simplify handling.
		Changed CChar::petguarding to a cBaseObject.
		Changed CChar::ftarg, targ, trainer, and trackingtarget to a CChar pointer.
		Changed CChar::trackingtargets to a CHARLIST.
		Changed CChar::skillitem, speechItem to a CItem pointer.
		Changed CItem::Refresh() to CItem::Update() and added a pure virtual cBaseObject::Update().
		Updated CChar::Update() to accept a single socket to update to.
		Made CChar::SendToSocket() private and removed a superfluous CChar refrence.
		Added cBaseObject::LocationChanged() for npc updating (if location changes, uses CChar::Teleport(), otherwise CChar::Update() ).
		Made those functions which were only used inside the class private
		Updated cBO::PostLoadProcessing() to use the proper function based upon the object type.
		Made some members of cBaseObject pure virtuals, also changed some functions that didn't need to be virtual.

	Changes to cEffects:
		Renamed action() to PlayCharacterAnimation() and changed it to accept a CChar rather than a cSocket.
		Renamed impaction() to PlaySpellCastingAnimation() and changed it to accept a CChar rather than a cSocket.
		Renamed movingeffect() to PlayMovingAnimation().
		Renamed staticeffect() to PlayStaticAnimation().

	Script Changes:
		itemtypes.dfn - Allows players to define how items of a certain ID will be handled on doubleclick
			(IE: "forge=0x0FB1,0x1982,0x197A,0x197E" causes all items with those ID's to behave as a forge when double-clicked, unless they are given a type)
		skills.dfn - Added MADEWORD= entries to those skills which have a madeword other than "made"
		titles.dfn - Updated [PROWESS] to: minReqSkill=ProwessTitle type entries

Oct 19 2003 - giwo
	Changes to CWorldMain class:
		Added worldTimers[] Get/Set Timer(), and enum CWM_TID to group all timer values together
		Removed Get/Set NextNPCAITime, NextFieldEffectTime, HungerDamageTimer, LightTime, ShopRestock
		Removed erroredLayers.
		Removed ShowLayer().
		Removed ItemCount & CharCount.
		Removed IncIMem() as it was not used.
		Removed ExecuteBatch as no good use for it could be found.
		Renamed ItemCount2() to NextItemSerial().
		Renamed CharCount2() to NextCharSerial().
		Moved creatures[] from uox3.h.
		Moved initCreatures() from cFileIO class.
		Moved weightPerSTR to CServerData class.
		Moved secondsperuominute to CServerData class.

	Added enum ItemTypes to simplify handling of items by their type.
	Added First(), Next() and Finished() functions to cItemHandle and cCharHandle inplace of our Item / Char Count() loops.
	Added CPICreateCharacter, CPIDeleteCharacter, and CPIPlayCharacter packet classes.
	Added WEIGHTPERSTR= value to uox.ini.
	Added a cItem constructor and destructor to handle creating and deleting loscache[] and itemids[].
	Added ADVOBJ, DYEHAIR, DYEBEARD, KILLHAIR, KILLBEARD, KILLPACK, and POLY to DFNTAGS enum to support advance.dfn
	Removed a good number of function declarations from funcdecl.h and declared them locally in the files that used them.
	Removed some includes that no longer seem to be used.
	Removed index reference from PostLoadProcessing()
	Removed cFileIO->LoadNewWorld() as all the defaults set there were set by the CWorldMain constructor.
	Removed class cFileIO as most of its functions were called only by uox3.cpp.
	Removed cNetworkStuff::BatchCheck().
	Moved creation of initial player items from createChar() to newbieItems().
	Updated advanceObj() to take advantage of our DFNTAGS enum
	Changed CItem::Get/Set Type() to use enum ItemTypes.
	Fixed up some functions in movement.cpp and commented out those that are unused.
	Reorganized globals.cpp to better match with uox3.h
	Moved spells[] to CMagic class.
	Moved itemids[] and loscache[] to cItem class.

Oct 13 2003 - giwo
	Changed CWorldMain::logout to a vector logoutLocs.
	Moved some structs from CWorldMain.h to uoxstruct.h.
	Changed CWorldMain::escortRegions to a vector.
	Removed cFileIO::LoadPreDefSpawnRegions() and moved its contents to the one refrence of it.
	Removed cWorldMain::ResetDefaults() and allowed the constructor to do the work itself.
	Removed calcSocketObjFromSock() and used Network->GetSockPtr() in its' place.
	Added cSpawnRegion:: WorldNumber(), IncCurrentCharAmt(), and IncCurrentItemAmt().
	Removed handlers.h from global scope, included it in those files which used it
	Made Combat::WillResultInCriminal() public and made use of it throughout the source
	Removed VialTargetItem() and VialTargetChar(), tweaked them a bit, and made them a part of vialtarget()
	Made VialTarget() a part of cTargets class, and MakeNecroReg() a part of cSkills class.
	Removed necro.cpp from the project

	cItem changes:
		Added:   CreateMulti(), CreateBaseItem(), CreateBaseScriptItem(), PlaceItem(), CreateRandomItem()
		Removed: SpawnItem(), SpawnItemToPack(), SpawnMulti(), SpawnRandomItem()
		Rewrote: CreateItem(), CreateScriptItem(), CreateRandomItem()

	cCharStuff changes:
		Added:	CreateNPC() (and an overload), CreateBaseNPC(), CreateNPCxyz()
		Removed: AddNPC(), AddNPCxyz(), SpawnNPC(), CreateScriptNpc(), SpawnRandomMonster()
		Rewrote: AddRandomNPC(), PostSpawnUpdate().

	cTownRegion Changes:
		Updated CChar->GetRegion() and calcRegionFromXY to return a cTownRegion pointer.
		Moved locations from CWorldMain class to cTownRegion and made it a vector.
		Changed how we load in regions.dfn and handle regions.wsc to avoid having unneeded extra TownRegions.
		Updated cTownRegion::Save() to use std::ofstream to match with the rest of our save routines.

	Script Changes:
		Changed all UNDEADLIST to NPCLIST entries in digging.dfn.

Oct 04 2003 - giwo
	Removed some superfluous #includes and moved others to more appropriate places.
	Removed jail.h from global scope and included it only where it was needed.
	Added CPIGumpChoice, CPIBuyItem, and CPISellItem to handle those packets.
	Removed some functions from funcdecl.h which did not need to be in the global scope.
	Replaced getRootPack() and getPackOwner() with FindItemOwner() and an overload to simplify it.
	Removed getPack() in favor of using CItem::GetPackItem(), also made GetPackItem() a bit more useful.
	Replaced cItem::PackType with cItem::getPackType(), created enum PackTypes to simplify it, and made it more useful.
	Added some #ifndef's in header files which were missing it.
	Moved openPack() and openBank() into cSocket class.
	Moved batchcheck() into cNetworkStuff class, since that was its only usage.
	Made several members of cNetworkStuff private, as they had no reason to be public.28 Sep 2003

	Removed CItem::FirstItem() and NextItem() as they were no longer used.
	Renamed CItem::FirstItemObj() and NextItemObj() to FirstItem() and NextItem().
	Simplified setting and evaluating default values for cSocket, CChar, CItem, CMultiObj, and CBoatObj classes.
	Made wider usage of COLOUR typedef.
	Changed GENDER typedef to a UI08.
	Updated function documentation in quantityfuncs.cpp.

27 Sep 2003 - Maarc
	Removed some uox.ini options that don't have code backing
		NPCTILECHECK
		ANTILAGSAVESPERLOOP
		MAINTHREADSLEEP
		STATDELAY
		EXTERNALACCOUNTCREATION
		ENGRAVEENABLED
		SPEEDCHECKNPCS
		MSGBOARDKEEPMESSAGES
		MSGBOARDMAXMESSAGESALLOWED
		MSGBOARDMAXMSGSRESPONSE
		LIGHTMOON1UPDATE
		LIGHTMOON2UPDATE
		COMBATWRESTLINGSPEED
		COMBATMAXMELEEDAMAGE
		COMBATMAXSPELLDAMAGE
		COMBATMAXPOISONINGDISTANCE
		COMBATMAXHUMANABSORBTION
		COMBATMAXNONHUMANABSORBTION
	Note that these INI options have been removed from all code, except they will still be parsed (just ignored)
	Heavily documented each option in cServerData
	onCreate wasn't executing for PCs if HTML status was disabled
	Simplified some function naming within CServerData, as the lines were getting very long when using them
	Removed parsing of unused tags ripped out earlier

26 Sep 2003 - giwo
	Changed CChar's trackingtargets from a fixed size to a std::vector and used the maximum number of tracking targets specified in the INI
	Collapsed the CChar's timers to use an array based on the timer enums
	Removed some unused functions from CChar
	Fixed bug where CChar's PoisonStrength attribute was not being saved/loaded
	Note: Character's FlySteps property is saved/loaded, but never used - removed

25 Sep 2003 - Maarc
	cServerData renamed to CServerData, in a beginning attempt to get a consistent class naming scheme
	Removed an excess print message at startup
	Consolidation of some CServerData members into arrays, reducing number of get/set functions required

24 Sep 2003 - Maarc
	Fixed resurrecting not logged in PC character, we were making a bad assumption about NPCs and sockets
	Updated console code to get the width/height properly under windows
	Added help/commands directory to data directory, and put an ACTION.txt in there
	Fix to ScriptSection::MoveTo

22 Sep 2003 - Maarc
	Killed some warnings
	Couple of linux compilation fixes

21 Sep 2003 - Maarc
	Fixed crash bug with CPBookPage

	Modification of these submissions from giwo

		Moved statwindow() into the cSocket class
		Removed sendItem(), sendPackItem(), and openCorpse()
		Replaced the aforementioned functions with an improved cItem::Refresh(), cItem::SendToSocket(), and cItem::SendPackItemToSocket().
		Added cItem::RemoveFromSight() to better handle usage of the CPRemoveItem() packet class
		Added cPlayerAction.cpp and cPlayerAction.h to move many functions out of global scope.
		Removed cClick.cpp as the aforementioned file holds its functions now.
		Moved updateskill() into the cSocket class

	The modifications
		No cPlayerAction.h
		Many of the functions moved into cPlayerAction are put into Handle() routines of the right packets

19 Sep 2003 - Maarc
	Crash fixes
	Fixes to getTileName to work better with strings and plurality
	banlist.ini/firewall.ini now structured much like a DFN.  It expects all entries to be in the form of:

	[BANNED]
	{
	IP=x.x.x.x
	}

	The [BANNED] is non-specific, it will search through all the sections in that file
	Template banlist.ini is updated as well
	teleport.scp has been reengineered to be like a DFN style.  See example in the CVS, as it has been updated
	Updated jse_fileassociations.scp to a DFN style syntax
	Updated jse_objectassociations.scp to a DFN style syntax
	CVS versions of jse_*.scp have been updated to new style
	Reduced number of fopen() calls required by using FileIO->FileExists more
	cVersionClass converted so that most of it's methods are now static, as we don't adjust versioning at runtime
	It also means we don't actually have to create a cVersionClass object
	Console and Magic log routines now take strings instead of char *
	Dictionaries updated to use DFN style syntaxing

18 Sep 2003 - Maarc
	As a guess... more strings!
	Fixed a few minor issues here and there
	cStringTools used even less
	Contemplating replaced cMagic::Log and Command::Log with a templated log function
	Considering use of XML type of output for server logs

17 Sep 2003 - Maarc
	More strings!
	Fixed a bug with telltime
	Updated dictionaries
	More functions take strings than char * now
	Fixes to tellmessage
	Fixed bug in DictionarySpeech

16 Sep 2003 - Maarc
	More char * stuff replaced with std::string and UString
	Few minor cleanups to code, increasing readability
	Replaced CapIt and CapColour with a templated Capped function, which takes a min/max value
	Removed BuildFilePath from mapstuff.h and used UString in its place, to fix some path issues

15 Sep 2003 - Maarc
	More internal class members are now either UStrings or std::strings
	More functions updated to use std::string
	Updated HTML template stuff to use UString more
	Almost completely removed all instances of cStringTools::makeString in favour of UString functionality
	Fixed some parsing problems introduced in recent updates
	Fixed single clicking with 3D clients
	Stripped out more unnecessary / unused code
	CharBySerial behaves the same as ItemBySerial in lookups (JS funcs)
	Area commands now use UStrings, need testing
	Use of cStringTools down to less than 100 references

14 Sep 2003 - Maarc
	UString classed used in many more places
	Script/ScriptSection updated to use an ifstream rather than a FILE *
	Code reduction through use of UString and ifstreams
	Reordered some logic in functions
	Fixed a bug where PARENTRACE wouldn't work
	Fixed some bugs dealing with polymorph script reading
	Due to VC6 issues, the strToDFN table in ssection.cpp is now a series of assignments instead.  Functionally the same, just something VC6 will handle
	Binary saves ripped out in it's entirety, as there were bugs dealing with it, and a future implementation is planned
	cPBuffer renamed to CPBaseBuffer
	cPUOXBuffer and cPXGMBuffer subclassed from cPBaseBuffer - cPBaseBuffer's old Pack() routine now belongs in cPUOXBuffer
	Enables possible future encryption of xGM seperate from normal UOX packing

12 Sep 2003 - Maarc
	cStringTools is no longer created and instantiated.  It's methods are now static, as it makes clearer sense that way
	Stripped out some functions that weren't called but were transitionary from 0.7x
	Removed cAccountClass::atol as cStringTools offers methods to do that
	Fixed up logic dealing with std::string and the find method
	Few more error checks
	More warning fixes
	Unified timer code, presenting a consistent interface across both Windows and Linux
	Updates to use std::string instead of char *, to make the logic look simpler
	Added a UString class that supports stripping of whitespace, comments and other commonly used functions on strings
	Implemented some use of UString already, simplifying some of our string parsing
	VALIDATESOCKET macro added into targeting.cpp to help with the validation of socket pointers in most functions
	Added operator overloading for basic UI/SI 08,16,32 bit and std::string types for cPBuffer, to allow in future for serialisation potentials

11 Sep 2003 - Maarc
	Few more warning fixes
	Many, many, many changes to try and fix the size comparison issues that VC7.1 pops up with.  This should also make it more portable from 32/64 bit.
	The command 'cachestats now has a basic implementation
	Identified a problem with privileges and binary saves
	Made RandomNum a templated function
	Fixed possible bug with converting strings to dice, wasn't working correctly

10 Sep 2003 - Maarc
	Improved VC compatability with std::min/max
	Cleaned up quite a few warnings and size issues, as revealed by VC7.1
	This means a lot of changes to using size_t where possible

08 Sep 2003 - Maarc
	Some sign issues fixed
	Used std::min / std::max better.  VC6 issue, unsure about higher versions.  VC6 doesn't define min/max in std:: space, but _MIN/_MAX instead.
	Consequently, non VC compilers have std::min/std::max remapped to std::_MIN and std::_MAX.  Not nice, but it works
	Dead functions removed, cleanup of some logic, removed instances where comparisons were always true
	Fixed warnings associated with the running changes implemented last night
	Removed some files that aren't actually used

07 Sep 2003 - Maarc
	Fixed an issue with WalkTo/RunTo, it was aborting incorrectly with wrong number of arguments
	WalkTo/RunTo also flush the existing walk path before calling PathFind, to ensure that the new walk path is executed
	Fixed a lack of type with a const value in cScript module
	Fixed some iterator problems, increasing compatability
	Changed a #ifdef compare to __unix__ to a !defined _MSC_VER, helping out mingw compatability
	Fixed some non-msvc compile issues
	Updated some places that were doing a Refresh, which should have done a Dirty
	Slight tweaks to picking up/dropping
	Updated packet logging to help with more useful dumps
	Updated some more x++ to ++x type of code
	CMapChange renamed to CPMapChange, to reflect better naming style
	cPCharLocBody renamed to CPCharLocBody, to reflect better naming style
	Debug message in WalkTo/RunTo when in debug compile
	Fixed a MethodError problem with WalkTo/RunTo occurring when it shouldn't
	Following packets now have log routines:
		CPMapChange
		CPCharAndStartLoc
		CPCharLocBody
		CPOpenGump
	Updated CPOpenGump so that it's no longer a fragmented packet class, requiring FlushBuffer
	Removed a dead function (itemmenu) that's never used
	Removed dead SE function RunTo, as it's now a character method
	Fixed WalkTo/RunTo as methods - the pathfinding was never doing anything.  Used new npc wander mode of 6, which will purely follow the path
	Those NPCs that are supposed to be running really will be now

06 Sep 2003 - Maarc
	The bounce routine flags the bouncing object as dirty
	---- After preprune tag
	Removed heartbeat and wilderness tags from uox.ini
	Removed partmsg from uox.ini as joinmsg sets the same value
	Removed uoxbot from uox.ini
	Removed lagfix from uox.ini
	Removed checkmem from uox.ini
	Removed combatallowcriticals from uox.ini
	Removed fixedlightlevel from uox.ini as it is unused (also removing the 'light command, as it was the only thing that used it.  Set, but never read)
	Removed scriptsectionheader from uox.ini - it was transitionary only, if you haven't changed over by now, you never will
	Removed an extra startgold entry from uox.ini code
	No longer parse old 0.7x server.scp types
	Fixed Bug: Seconds per UO minute used, but never actually read from the INI file.  Now read/written from/to file.
	Added Console support to dump ini file lookup offsets without running the server.
	Updated console 'V' command to reflect the upcomming pruning of the unused INI tags.
	Fixed a crash bug with onDropItemOnNPC, stupid typo problem
	Updated some setcont code to deal better with layer 0 items, should help with secure trade better
	Change to onAISliver JS event - if js returns true, then server doesn't do normal AI check.  if js returns false, server goes through it's normal routine
	Added some more #ifdef code for some basic boost use - trouble with filesystem currently
	Lots of whitespace updates
	Allowed scripts to be attached to regions, not just items/characters - use SCRIPT tag in the DFN for the region.  Currently supports onEnterRegion and onLeaveRegion (same params as the character version)
	Minor rework of some of the logic in trade code, may or may not help
	Playervendor deed altered to spawn [playervendor] rather than [2117]
	Removed excess PathFix function in cServerDefinitions
	Should be able to browse player vendor packs without a snooping check
	Minor issue with loading multis, was erroneously reporting DeedName as an unknown tag
	Removed some unused dead code dealing with gumps
	Added atWar property to JS characters
	Hid most of cSocket's members
	Added BytesSent/BytesReceived methods to cSocket
	Implemented WalkTo and RunTo as character methods.  Takes 2 (object + maxsteps) or 3 (x, y and maxsteps) parameters
	Included the js32.h, and js32.lib files to the source tree. TO help ease *nix users

30 Aug 2003 - Maarc
	Updated InternalPoll for speech, which should solve some compatability issues, and solve delayed speech from not occurring.
	Added some batch files for windows which should help with deployment in future.  They are found in the root, in uox3
	There are 3 predefined templates
		pureinstallcopy		copies data and built binaries
		buildanddatacopy	builds a release executable and does same as pureinstallcopy
		doall			same as buildanddatacopy, but copies source as well
	Each must be called like
		doall c:\app\uoxtest
	The batch files accept a parameter which dictates where the files are to be copied to.
	From there, simple zips can be made.
	Work continues on resurrecting a win32 installer, and communication with Rynet will see a similar process created for Linux.

29 Aug 2003 - Maarc
	Warning and scope fixes only

22 Aug 2003 - Maarc
	Added Empty OnStartup/OnShutdown events( to be expanded upon later )
	Added a JSE class wrapper around UOX3 Account instance to provide access to methods
	Implemented CAccountClass wrapper
	   Created .AddAccount(name,pass,email,flags) to add an account to the server
	   Created .DelAccount(name) or .DelAccount(accountid);
	   NOTE: These are pretty self explanitary.
	Updated JS implementation of wrapper for cAccountClass.  No longer var i = new CAccountClass syntax, it exposes a global object "Accounts"
	With minor tweaks, managed to get Slasher's account editing stuff to work


13 Aug 2003 - Maarc
	Fixed a crash bug with multis and deeds - the deed property wasn't always being set correctly and could crash on worldsave
	Updated deed property of cMultiObj to be a std::string rather than a const char *, to avoid pointer issues as it's used infrequently
	Added ExecuteCommand as a character object method (Example: pUser.ExecuteCommand( "add 0x04a9" ); )
	Minor whitespace fixes
	Changed MethodError of CChar_ExecuteCommand to the right func name, was SysMessage
	Removed old standalone ExecuteCommand function from JS engine, so only character method is available
	Updated version number

11 Aug 2003 - Maarc
	Fixed a bug where insufficient templates in the HTML template system would cause a crash at runtime
	Added 'setspawnobj and 'setspawnobjlist commands
	Fixed a bug with tweaking items where the text strings were incorrect at the end of the property list
	Fixed a bug with tweaking items where there was no text string at the end of the property list
	Added spawnobj/spawnobjlist property to tweaking of items
	Whitespace updates
	Fixed typo in debug print of CChar_UseResource
	Updated dictionaries in the tree


07 Aug 2003 - Maarc
===========
	Overhauled HTMLTemplate Class to actually handle multiple templates correctly.

	Templates Supported at this time are :

	ETT_ALLTEMPLATES : Update aLL templates found in default_templates.dfn
	ETT_GMSTATUS     : Update the GMSTATUS template
	ETT_GUILD        : Update the GUILD template
	ETT_OFFLINE      : Update the OFFLINE template(no player functionality yet)
	ETT_PLAYER       : Update the PLAYER template(no guild functionality yet)
	ETT_ONLINE       : Update the default server STATUS template


	Supported template Types:

	STATUS           :
	PLAYER           :
	GUILD            :
	GMSTATUS         :
        OFFLINE          :

	NOTE: The format and extention of the template files has changed slightly
	      Here is a complete default templates example (Filename: default_templates.dfn).

	//o-------------------------------------------------------o
	//| QUick note: TYPE must always be the first tag found in
	//|             a block.
	//o-------------------------------------------------------o
	[DEFAULT_STATUS]
	{
	TYPE=STATUS
	NAME=Server Status Template
	UPDATE=5
	INPUT=C:/uox3/dfndata/html/online.htf
	OUTPUT=D:/mywebserverdir/serverstatus.html
	}

	[DEFAULT_PLAYER]
	{
	TYPE=PLAYER
	NAME=Server Offline Template
	INPUT=C:/uox3/dfndata/html/player.htf
	OUTPUT=D:/mywebserverdir/player.html
	}

	[DEFAULT_GUILD]
	{
	TYPE=GUILD
	NAME=Server Guild Template
	UPDATE=5
	INPUT=C:/uox3/dfndata/html/guild.htf
	OUTPUT=D:/mywebserverdir/guild.html
	}

	[DEFAULT_GMSTATUS]
	{
	TYPE=GMSTATUS
	NAME=Server GameMaster Status Template
	UPDATE=5
	INPUT=C:/uox3/dfndata/html/gmstatus.htf
	OUTPUT=D:/mywebserverdir/gmstatus.html
	}

	[DEFAULT_OFFLINE]
	{
	TYPE=OFFLINE
	NAME=Server Offline Template
	INPUT=C:/uox3/dfndata/html/offline.htf
	OUTPUT=D:/mywebserverdir/serverstatus.html
	}

	EOF

	NOTE: At all time in any template block the first tag MUST be the TYPE tag.

	A detailed list of supported template tags will be forth comming.


05 Aug 2003 - Maarc
===========
	Fixed PC dying issue, not changing to ghost and not turning to gray
	Reinstated terminating NULL with regards to CPOpenBuyWindow, which should hopefully restore pricing in 3D client

03 Aug 2003 - Maarc
=======
	Fixed issue with delete characters. Now characters should delete correctly, and not list unknown
	values, and erroneous data.
	Fixed an issue with CPIGumpMenuSelect, which was getting radio buttons wrong
	Fixed an issue with BuyFrom, where the logic was backward... should be more like pUser.BuyFrom( NPC ) than NPC.BuyFrom( pUser )
	Fixed similar issue with SellTo
	Added "movable" to area commands on request of Xuri
>>>>>>> 1.1.2.22

02 Aug 2003 - Maarc
	Updated CPItemsInContainer so that it will work faster and should work better with vendors
	Updated CPOpenBuyWindow to work better with vendors, and go faster
	Added AoS weapons and LBR-monster weapons (Xuri)
	Vendors work fine in 3D client but not in 2D
	Added a packet specific log routine to CPOpenBuyWindow
	Updated cSocket and other routines to allow for packet specific logging on receive
	Sideeffect of that is that non-packet classes save data already logged for variable length packet
	Implemented Log() routine for CPIFirstLogin, CPISecondLogin, CPIServerSelect, CPIClientVersion and CPIUpdateRangeChange
	Whitespace updates
	setid now has character body restrictions, and is the same as 'poly, which has been upgraded to 0->0x7CF
	Removed JS functions due to equivs
		GetTarget
		SetTarget
		CalcSockFromChar
		CalcDefense
		CalcAttack
		CalcCharFromSock
		GetFlag
		GetTown
		SetTown
		GetRegion
		SetRegion
		VendorBuy	-> BuyFrom method of Char/socket
		VendorSell	-> SellTo method of char/socket
	Added flag property to characters in JS (deals with criminal, murder and so on, read only property)
	Migrated base JS functions to character/item methods
		FinishedItemInCont	-> FinishedItems
		FirstItemInCont		-> FirstItem
		NextItemInCont		-> NextItem
	Dismounting a creature will have the creature face the same way as you
	onDropItemOnNpc event implemented
	First executes for item and if item doesn't bounce, executes for NPC (so item can override bouncing)
	scripts must return a value between 0 and 2
	0 == bounce
	1 == don't bounce, use code
	2 == don't bounce, don't use code
	Updated mounts to support rest of LBR/AOS mounts

01 Aug 2003 - Maarc
	Fixed issue with delete characters. Now characters should delete correctly, and not list unknown values, and erroneous data.
	CChar's attacker property was a CHARACTER, not a CChar * - This lead to mixed ideas of what it's values are
	Changed attacker property to CChar *, which should provide some minor performance benefits
	Fixed a bug with stealing which would flag an index error on failure when not in combat
	OpenURL function on a socket is now enabled
	Closed a minor memory leak with the JS OnTalk event
	Updated version number
	Fixed an issue with NPC response (bank and other commands were not working) - Also affected JS speech
	Found an issue with the vendor buy list.... not working correctly, unsure as to the reason why.  All items are (null) at 0 gp, though icons are fine

31 Jul 2003 - Maarc
	DoStaticEffect (JS function) was both a standalone method (DoStaticEffect) and item/char method (StaticEffect)
	Removed standalone implementation of DoStaticEffect, as it wasn't updated to current implementations and one impl should be used
	Fixed a bug with JS StaticEffect method that would make it not work correctly with items
	JS method table for chars updated to reflect that StaticEffect takes 3 parameters, not 4
	Fixed a crash bug when items tried to talk (via JS or not)
	Some more basic implementation (ifdef'd out) of using boost tokenisation
	Whitespace cleanups
	CPObjectInfo caused crash bug when firefield was cast, fixed
	The criminal() function would cause a server crash if the thing going criminal was an NPC (symptom of EV's crashing server)
	Removed JS onUsage event, and updated onUse in its place
	onUse now requires a return value of either true or false in the script
	if return value true, then it continues on executing with hard coded implementation
	if return value false, then no hard code is executed
	Fixed 'make so that 'make player would work again
	Items can now use the third optional parameter of StartTimer in JS, which enables to call back into the currently executing script
	Updated SetCont so that if it fails to equip, it prints out serial and layer, and resets contObj properly
	Fixed crash with killing characters and corpse clothing
	onUse event fires for a door when it is used, allowing for greater customisation of whether the door can be opened or not

24 Jul 2003 - Maarc
	cPBuffer now has an internal packed buffer, as well as an internal Pack() routine
	cSocket::Send adjusted to use the cPBuffer packed buffer/unpacked where possible
	cPBuffer's packed implementation means that if the packet is sent to multiple sockets, only one pack is needed
	And consequently, runtime performance should be slightly improved (only affects removeitem sort of packets)
	Updated version number

	getTileName updated to behave like in singleClick()
	singleClick now calls getTileName for name lookups rather than basically reproducing the code
	singleClick slightly optimized to only do a character lookup if required
	whitespace cleanups

20 Jul 2003 - Maarc
	Fixed long packet problem
	Fixed possible problem with create skill window
	Converted more things to use CPSendGumpMenu
	Fixed item refresh bug for items created after server load
	Optimized code size for cGuild gumps a touch
	SendVecsAsGump uses CPSendGumpMenu - note, we should be trying to get rid of all uses of SendVecsAsGump
	Commented out a call to Gumps->Open() that locks up later clients (see cstatstarget in cTargets)
	Optimization note for CPSendGumpMenu reuse - look at moving some of the processing from Finalize() to AddCommand()/AddText()

19 Jul 2003 - Maarc
	Fixed a problem with WhichLoginPacket, as it would ignore some valid packet IDs
	Implemented CPSendGumpMenu, an attempt to write a packet class for 0xB0 outbound
	CPSendGumpMenu works for part of wholist and is implemented for 'howto
	However, the size of the packet is bigger than our largest buffer.... and that means that it tramples all over memory
	A fragmenting version is implemented, but the client is more likely than not to lockup
	Real answer?  Crypt and send a buffer big enough to hold the entire packet

18 Jul 2003 - Maarc
	Created a WhichLoginPacket function, to deal specifically with logins only
	WhichLoginPacket will throw an exception if it receives a request that it knows nothing about
	This request is caught and swallowed, via new cSocket::FlushIncoming

17 Jul 2003 - Maarc
	Reduced a number of flush locations
	Books updated to packet classes
	Fixed a bug with reading predefined books
	If cannot wear an item, returns failure (only prints in debug mode)
	Removed some commented code
	Updated spellbooks to use packet classes
	Slight spellbook speed up
	Removed some dead variables
	Some messages now only print in debug mode
	Packet 0x98 (allnames 3D) moved to packet class
	Game server list moved to own packet class
	Added Add() method to CPItemsInContainer
	Turned outbound 0x66 into CPBookPage
	Turned outbound 0x6F into CPSecureTrading
	UseDoor SE function now supports objects not indexes
	MAXLAYERS reduced to 30
	Fixed crashes related to system speech and npcs
	Edited changelog to explicitly mention the month, not using a numeric (not everyone is an American)
	CPDrawContainer model changed from SI16 to UI16
	Updated to version 1g

	Addendum
		Replaced almost all instances of a++ and a-- code with ++a and --a, without breaking semantics
		Implemented a basic boost tokenisation on account parsing of v3 files (ifdef'd out by default)
			Saves approximately 100 lines of code and is more readable

15 Jul 2003 - Maarc
	Should fix deleting characters

30 Jun 2003 - Maarc
	RefreshItem() changed to Item->Refresh()
	Implemented RefreshItem queueing
	talking/unicodetalking merged into generictalking
	Speech (both unicode and non-unicode) converted to a packet based system
	Much greater compliance with packet packing rules
	Very simple handler for NPC context menus (UOXClassic as inspiration)
	NPC context menus turned on by default during login
	All-names 3D basic implementation (for testing)
	Extended status window
	talk, talkAll, emote and emoteAll are character methods
	itemTalk is a method of an item
	sysmessage is a method of cSocket
	Removed DefBase object and used constants for defaulting instead
	Added ApplySection to Items and Chars in the JS engine
	Split SpawnItem into CreateDFNItem and CreateBlankItem
	Campfires now have 1 HP forced
	OnSpeech event altered. Forces script to return a value. (0 == NPCs/PCs
	see the speech, 1 == PCs see it, 2 == no one sees it, defaults to 0)
	Female bit specified on CPExtMove if person is female
	Yellow bit specified on CPExtMove if full health
	Command handlers no longer need the offset value, as speech is unified
	Books have partial packet class implementation
	Better use of BASEITEMSERIAL and INVALIDSERIAL
	CChar::SendToSocket implemented as packet class
	target() and mtarget() are cSocket methods
	Added pragma note for start of Move Guildstone functionality location
	structure cleanups/movement
	cCommands::MakeShop streamlined
	Prints to console when a fragmented packet is attempted
	Changed a dynamic memory allocation to static in cSocket::Send
	cGump::OPen converted to use packet class
	Addmenu no longer has nomove tag
	Spellbook start converted to packet class
	CPExtMove now handles flag setting
	Streamlined startChar routine
	I've removed these JS functions (as they have attrib or method equivs)

		Gump_CreateGump
		Gump_AddButton
		Gump_AddText
		Gump_AddRadio
		Gump_AddPage
		Gump_AddPicture
		Gump_AddGump
		Gump_AddBackground
		Gump_AddTextEntry
		Gump_AddCheckbox
		Gump_Delete
		Gump_SendToSocket
		GetName2
		SetName2
		GetLowDamage
		GetHiDamage
		SetAtt
		GetAtt
		SetDef
		GetDef
		SetDecayable
		IsDecayable
		IsCriminal
		IsMurderer
		IsInnocent
		MakeCriminal
		MakeInnocent
		GetGender
		SetGender
		TurnToward
		DirectionTo
		GetRaceName
		SetRaceName
		IsPlayerRace
		GetRacialGenderRestrict
		GetRacialArmourClass
		GetRaceLanguageSkill
		GetRacePoisonResistance
		GetRaceMagicResistance
		GetRaceVisibleDistance
		GetRaceNightVision
		GetClientVersion
		GetClientType
	These have been migrated to newer methods:
		CastSpell (chars)
		AddSpell (chars)
		SpellFail (chars)
		ApplyRank (items)
		RequiresBeard (races)
		RequiresNoBeard (races)
		CanRaceWearArmour (races)
		IsValidHairColour (races)
		IsValidSkinColour (races)
		IsValidBeardColour (races)
	SpawnItem has been split into CreateDFNItem and CreateBlankItem.
	A new object type, UOXCFile, has been made.
		eg var mFile = new UOXCFile;
	It has the following methods
		Open
		Close
		Write
		Read
		ReadUntil
		Free

	and properties:
		pos (read/write)
		length (read)
		eof (read)


25 Apr 2003 - giwo
Added:
	Added enum distLocs to simplify distance checking (to avoid confusion over what a certain distance would be IE 1 tile away = 2)
	Added support for setting an items container in JavaScript (object.conainer = newcontainer)
	Added string support for house.dfn allowing house items and house deeds to be strings, not just numbers
	Added new cStringTools class to replace makeNum() with type-matching string-to-number functions
	Added new type of command func, CMD_SOCKFUNC, this will be used to define those commands which need a socket passed to it
	Added Get/Set wrappers for cmd_offset and made it a private member of the cCommands class
	Added cSpeech class and cSpeech.h to remove the speech functions from global scope
	Added support for ADDITEM item,amount in the itemmenu's (note if you specify an amount it will override the default amount setting of that item)
		-Same support for PACKITEM in newbie.dfn and npc dfn's and ADDITEM in carve.dfn
	Added EQUIPITEM and PACKITEM in place of ITEM in advance.dfn, note PACKITEM has support for amounts, EQUIPITEM will attempt to equip the item on the character
Changed:
	Cleaned up applyNPCSection and added support for reading in HP tags
	Fixed issues with reading in certain tags from NPC-defs
	Made console output hexadecimal numbers where applicable also reduced signed/unsigned mismatches in sprintf's
	Moved CChar::carve and CItem::carve into cBaseObject::carve, and changed it to an SI16
	Changed CItem::good to an SI16
	Changed CItem::glow to a UI32 possibly fixing some issues where it would not read in properly
	Fixed deletion of house items upon re-deeding a house
	Fixed commandlevel overrides in command.dfn to read-in properly
	Overhaul to cCombat to make way for future split of Players and NPC's
	Created an enum for aiTypes allowing easy refrence of NPCAI
	Created a TargetIDs enum to allow easy refrence of target-based commands when calling target() and using cTargets::MultiTarget()
	Moved target() and its overloads to targeting.h
	Updated many timers that were using an SI32 to use TIMERVAL reducing Signed/Unsigned mismatches
	Moved safeCopy() into the cStringTools class, also moved numtostr and renamed it makeString()
	Fixed up command_set and AllSetTarget() to remove the need for mstring
	Moved gettokennum() into the cStringTools class as GetToken() and made better use of it
	Change cServerData::SetServerStartPrivs() to a UI16
	Changed UI08 CChar::Get/Set Priv() & Priv2() into UI16 Get/SetPriv()
	Fixed areas where ifdef'd code had never been updated to make use of new CChar & CItem handling
	ITEM tags in npc dfn's changed to EQUIPITEM, be sure to update your scripts
	Changed JS function CalcSocketFromChar() to return an object
	Moved findMulti() and inMulti() to findfuncs.cpp and removed inMulti() from global scope
	Changed worldsaves to output many values in hex format
	Fixed some issues in cServerData where settings were not initialized upon creation of the class
	Many type mismatches fixed in cServerData along with the resizing of many variables in the class greatly reducing the total memory it uses
	Fixed a crash bug in combat when attempting to calc the defense covering a certain layer
	Fixed several magic commands which had unused variables sent to them
	Moved comm[CMAX] to the cCommmands class and added Get/Set wrappers to it
	Moved makenumber() to the cCommands class and renamed it to GetArgument()
	Minor fixes / tweaks to the cBooks class
	Fixed some container mismatches
Removed:
	Functions:
		CSocket::currchar & CSocket::addid5
		Removed item_test and added CItem::CheckItemIntegrity() in its place
		Fully depreciated and removed makeNum() and its overloads
		UOXSOCKET calcSocketFromChar() overloads
		calcSocketFromSockObj()
		Legacy calcCharFromSer() and calcItemFromSer() overloads
		UseHairDye() and moved all contained code to its' one usage
		enlist()
		CChar: Murderer(), Skin2(), ID2(), xID(), xSkin() and many unused overloads
	Commands:
		'USE' Because it has not had supporting code for it for quite some time
		'CTRIG','ITRIG', and 'TTRIG' As they were remnants of the old trigger system
		'SETHEXMOREXYZ' Because SetMOREXYZ will support both HEX and Decimal
		'SETSPEECH' Because it did nothing
		'TILEDATA' Because 'SHOWDETAIL does the exact same thing
		'XSBANK' Because 'XBANK does the exact same thing

	regions.h and classes.h from global scope and included them in those files which actually used them
	utilsys.cpp and utilsys.h from the project as they were not used anywhere
	mstring.cpp and mstring.h from the project
	Many unused and duplicate global includes
	Many unused #defines and const's

19 Mar 2003 - giwo
Added:
	JS Get/Set "vulnerable" handlers for character properties (Abaddon)
	willHunger with Get/Set HungerStatus() wrappers to CChar class (can now selectively stop a character/creature from continuing to hunger)
	JS Get/Set "willhunger" handlers for character properties
Changed:
	Linux compile fixes (thanks Malketh)
	Hash.h warning fixed (thanks Philantrop)
	Fixes to getRootPack() and getPackOwner()
	Removed many #includes from the global scope, including them in the specific files that need them
		This should greatly reduce compile time and filesize, along with the need to recompile after altering most headers
	Removed the linux ifdefs around typedefd function declarations, this should work with gcc 3.2
	Moved global loading functions into a new cFileIO() class to take them out of global scope
	Fixed an issue causing items to not be sent to the client (thanks Malketh)
	Moved some global structs into the CWorldMain class
	Fixed a bug causing a crash on character / item creation
	Moved all effects stuff into its own class to take it out of global scope
	Changed the variable CChar::region to CChar::regionNum to avoid conflicts with the cTownRegion region[] indexes
	Moved getbestskill(), isHuman(), and inDungeon() into the CChar class to remove them from global scope
	Took npcSimpleAttackTarget() out of global scope
	Rewrote restock() to make use of restockNPC()
	Changed the typedef'd iterator in hash.h to HASHITERATOR to kill a Linux warning
	Renamed cEffects::soundeffect() to PlaySound() and removed unneeded overloads
	Fixed a bug causing executebatch to be set with locationcount data
	Rewrote cEffects::bgsound()
	Documented sounds.cpp
	Misc minor cleanups / fixes
Removed:
	sendItemsInRange() (CChar::Teleport() does the same thing)
	Many #includes that were not being used
	deathMenu()
	respawnnow() and moved all of its code into command_respawn()
	one instance of cEffects::scpSoundEffect() and renamed the other to PlaySound()

13 Mar 2003 - giwo
Changed
	Fixed an issue allowing the server to not have a dictionary.ZRO (which would cause a crash when a dictionary entry was called with no language)
	Fixed an issue causing the server to puke when it attempted a restart
	Moved SpawnRandomItem() into cItem class
	Moved SpawnRandomMonster() into cCharHandle class
	Broke necro.dfn into fishing.dfn and digging.dfn
	Made better use of SpawnRandomItem() and SpawnRandomMonster()

12 Mar 2003 - giwo
Added:
	CPOpenGump and CPSpeech packet class to remove some global vars (Note these are pretty basic classes and someone
		with a better understanding of how we handle sending/recieving packets could probably expand these to make better use of them)
Changed:
	Moved many global vars into the CWorldMain() class
	Cleaned ResetVars() in uox3.cpp as ResetDefaults() in CWorldMain() now handles much of that
	Added a check to ensure text wasn't sent twice in talking(), should fix double-speech
	Cleaned up cmdtable.cpp removing a couple duplicate entries, etc
	Changed target() to only require 4 values (as the first two were always 0 and 1)
	Removed many unneeded typedefs and globals
	Went through cServerData() and noted unused server.ini entries
	Moved title1(), title2(), and title3() to cClick.cpp since that is their only usage, made use
		of MAX_TITLE to ensure we wouldn't overrun the buffers, and renamed them matching what title they were

11 Mar 2003 - giwo
Changed:
	Fixed a potentially very serious bugs with how containers were being set upon loading the world
	Fixed possible re-adding of weight to containers and characters at load
	Fixed a bug causing equipped items that were not weapons to take damage in combat
	Minor cleanups / warning fixes / Linux compatability issues (punt)

07 Mar 2003 - giwo
	Overhauls/Additions/Major Changes
	Changed:

	Tweaks/Object Conversions/Misc Small Changes
	Changed:
		Changed CItem::Get/SetLayer() to a UI08
		Fixed a bug in speech causing you to see your own text twice
		Fixed a nasty crash bug caused by changing an items layer
		Fixed a bug causing NPC's to always be the first attacker

	Removed:
		CChar::Fame2() and CChar::Karma2()
		CChar::Stamina2(), CChar::Mana2()


05 Mar 2003 - giwo
	Overhauls/Additions/Major Changes
	Changed:
		Armor DEF system overhauled to match OSI system

	Tweaks/Object Conversions/Misc Small Changes
	Changed:
		-Updated Hash Table Remove() calls to remove unrefrenced parameter "index"
		-Changed cSocket::Get/SetDWord() to a UI32 to fix problems checking it against INVALIDSERIAL and storing large serial numbers
		-Changed cSocket::AddID() to a UI32 for the same reason as above
		-Changed cSocket:::Get/SetWord() to a UI16 to fix possible problems storing ID's
		-Fixed up calcStealDiff() to match new weight system
		-Minor updates to CPStatsWindow to match the new Armor DEF system and Weight system
		-Fixed calls to getTileName() so the names container was set with MAX_NAME
		-Fixed up getFieldDir() using direction typedefs
		-Changed Get/SetMagic() to Get/SetMovable()
		-Cleaned up some unrefrenced params
		-Changed some int's to UI16's in books.cpp
		-WorldSave Changes:
			-XYZ and worldnum to Location=x,y,z,worldnum
			-HiDamage and LoDamage into Damage=hidamage,lodamage
			-Strength,st2,Dexterity,dx2,Intelligence,in2 changed to Strength=str,st2, Intelligence=int,in2, Dexterity=dex,dx2
			-DWord0-3 changed to DWords=0,1,2,3
			-FX1,FY1,FX2,FY2,FZ1 changed to WanderArea=FX1,FY1,FX2,FY2,FZ1
			-MoreX,MoreY,MoreZ changed to MoreXYZ=morex,morey,morez
			-More,More2 changed to More=more,more2
			-Type,Type2 changed to Type=type,type2
			-Light,Rain,Heat,Cold,Snow,Lightning changed to RaceDamage=Light,Rain,Heat,Cold,Snow,Lightning
			-Fame,Karma,Kills changed to Reputation=fame,karma,kills

	Removed:
		Removed all smoking stuff, as it's nothing but a waste of code

26 Feb 2003 - giwo
	Overhauls/Additions/Major Changes
	Changed:
		-Complete rewrite to the Weight system
			-Weight is more permanent, removed need to recalc it constantly
			-Packs now show the weight of themselves and all their contents
			-Packs now have a weight limit (currently hardcapped to 400, should make it based on type of container and possibly scriptable)
			-All items use the weight value given to them in the scripts unless the entry is 0 in which case they pull weight from the MUL's
			-Better handling of overloaded for teleport / recall / walking
			-Weight will max out at 65535 stones and can not go lower than 0 stones
		-Items container is now set as a cBaseObject

	Tweaks/Object Conversions/Misc Small Changes
	Changed:
		-Fixed up itemsfx() and renamed it to itemSound(), now better handles Gold sfx and where an item was dropped (ie in a pack or on the ground)
		-Cleaned up goldsfx() and renamed it to goldSound()
		-Many fixes to get/drop/wear/packItem functions
		-Minor fixes/cleanups in movement.cpp
		-Fixed a worldsave crash with tamed creatures
		-Pressing 0 in console reloads items as well as everything else
		-Made dagger usable for carve again
		-Fixed a horse mounting distance check
		-Noted (and in some cases fixed) unrefrenced variables throughout the code
	Removed:
		-Removed calcLastContainerFromSer(), as the Get/SetCont() changes made it superfluous


18 Feb 2003 - giwo
	Overhauls/Additions/Major Changes
	Added:
		-Added cItems::menuAddItem() to handle adding items from the add menu
		-Added handleCooking() in place of cSkills CookMeat(), MakeDough(), and MakePizza()
		-Added PlayInstrument() in place of PlayInstrumentWell() / PlayInstrumentPoor()
		-Added cSkills::doStealing() to take place of repetitious code in RandomSteal() and StealingTarget()
		-Added objInRange() functions in place of charInRange()/itemInRange() funcs

	Changed:
		-Converted inscribe.gmp to inscribe.dfn and used NewMakeMenu() in favor of the old make menu system
		-Updated GetMagic() == 3 calls to IsLockedDown() calls (as that is all it should be used for)
		-Fixed up all IsLockedDown() calls, resources that are LockedDown can NOT be used, even by GM, until released
			-Also note, items that should be usable if locked: Skill items (looms, training dummies, etc, Recall runes)
		-Moved the two functions from newbie.cpp to pcmanage.cpp and removed newbie.cpp from the project
		-Moved action() and impaction() to effects.cpp
		-Moved isHuman() to npcs.cpp
		-Where possible made functions that were part of classes private
		-Made use of cCombat::getWeaponType() in doubleClick() to centralize searching for weapon ID's
		-Updated CDictionary to make use of IsValid and added wrapper functions for it
		-Moved keyInPack() to doors.cpp and made better use of it
		-Added support to NpcTalk for variable arguments
		-Added support to NpcTalkAll for variable arguments
		-Changed itemmessage() to objMessage() and added dictionary support to it
		-Went through and added language support to Dictionary->GetEntry() calls anywhere possible (note, should NOT use socket-based languages for: Console, Broadcasts, Item/Region/Char Names, Anything else?)
		-Broke doubleClick() into 3 functions, doubleClick(), handleDoubleClickTypes(), and handleDoubleClickIDs() to allow quicker viewing / editing
		-Cleaned up unneeded variables in the three aforementioned functions
	Removed:
		-Trashed im.cpp/.h, MakeMenuTarget() and the rest of the old make menu system
		-Removed Gumps directory (as it is now unnecesarry)
		-Removed getCharDist() and getItemDist()
		-Removed make_st and cSkills::CalcRank()

	Tweaks/Object Conversions/Misc Small Changes
	Changed:
		-Removed iSGM() checks from all Dist functions, as it would cause wierdness in many areas of the code (Combat, for example)
		-NPC Movement issues addressed
			-Creatures following move faster (not just tamed)
			-Wander direction changes randomly
			-NPC movement slowed down alltogether
		-Attack flagging issues addressed/worked on
		-Combat bug causing you swing but never hit when diagonal from enemy fixed
		-Decay timer reset upon dropping an item on the ground
		-Cleanup of cItem::DecayItem()
		-Fixed an issue causing creatures to get stuck turning around when nearly dead
		-Fixed up amount functions to allow for UI32, should allow statwindow to properly display up to 4billion+ gold on a character, as well as allow high-cost item buy/sells
		-Changed CChar tailitem, GetTailItem() and SetTailItem() to an object pointer
		-Now can only mount a creature if it is tamed and owned by you
		-Changed GetAdvObj to a UI16, shouldn't need more than 65535 Advance.dfn entries
		-Get/SetSpawn() now check for INVALIDSERIAL instead of 0
		-Updated CChar::Get/SetSmeltItem() to an Object pointer
		-Changed UI32 ItemPtr() in tempeffects to cBaseObject *ObjPtr()
		-Changed cSocket::AddMItem() to a CItem
		-Used GetItemObj(), GetOwnerObj(), GetSpawnObj(), and GetMultiObj() where possible
		-Cleaned up CurrcharObj() usage
		-Changed CSkills::Snooping() to use an Object pointer rather than a Serial
		-Changed tempeffect() to use a CItem call instead of ITEM (and removed it alltogether from its CChar overload)
		-Changed nVialID in necro.cpp to now make use of cSocket::AddMItem() to allow an object pointer
		-Changed cTownRegion::DisplayTownMenu() to use an item pointer
		-Minor tweaks to Rank system
		-Fixed House Lockdowns, Items are now added to the Multi's LockDown list
		-Fixed a WorldSave crash caused by tempeffects, by adding teffect_st constructor
		-Possibly fixed MultiCaching bug, where container should have been UI32
		-Updated StoreItemRandomValue(), fixing some possible signed/unsigned issues
		-Updated calcLastContainerFromSer() to return a cBaseObject pointer
		-Fixed issue in checktempeffects() causing ITEM timers not to function
		-Changed CItem *Get/SetTailItem() to SERIAL Get/SetSkillItem()
		-Ensured SkillItem was being set back to INVALIDSERIAL after use
		-Fixed up cGumps::choice()
		-Fixed bug when npc attacked causing the emote to display incorrectly, also added "creature" is attacking you! emote for target only
		-Same fixes for players attacking
		-Updated npcEmoteAll() to handle variable arguments and updated calls to match
		-Used Socket-based language calls in Dictionary-GetEntry() wherever possible
		-Caught some missed text and put them in the dictionary.
		-Documented functions in speech.cpp
		-Made use of objInRange() wherever possible
		-Many signed/unsigned mismatch fixes
		-Minor optimizations and code cleanups

	Removed:
		-Commented out old Alchemy stuff (alchemy.dfn in /create/ still needs work)
		-Removed unused respawntime global
		-Removed some unneeded typedefs
		-Removed many unnecesarry uses of char temp[]; sprintf( temp, Dict ); function( temp ); in favor of function( dict )
		-Removed unnecesarry overloads for the following functions:
			SpawnItem()
			GetItem()
			CItem::SetSpawn()
			CChar::SetSpawn()
			GetMulti()
			GetOwner()
			SetOwner()
			openPack()
			decItemAmount()
			CItem::ReleaseItem()

----------------------------

2001-12-21 04:20  dark-storm

	* uox3.cpp:
	Fixed all warnings

2001-12-21 03:30  dark-storm

	* funcdecl.h, html.cpp, html.h, uox3.cpp:
	Worked on the HTML Stuff a little more, added the call for Offline
	pages which should work now (Add OFFLINE=1 to your page
	definition).
	Moved some function declarations from funcdecl.h to html.h and
	renamed offlinepages to CheckOfflinePages().

2001-12-21 02:33  darkangelab

	* UOXJSPropertyFuncs.cpp, UOXJSPropertySpecs.h:
	Whitespace updates
	Added property setter stuff for item objects

2001-12-21 02:18  darkangelab

	* SEFunctions.cpp, SEFunctions.h, cScript.cpp, gumps.cpp:
	Removed GetX, GetY, GetZ, GetColour and GetID and their Set
	versions from the JS engine, as they're now properties
	Removed some warnings
	General cleanups

2001-12-20 23:23  darkangelab

	* cScript.cpp:
	Updated some bad snippets

2001-12-20 22:34  darkangelab

	* SEFunctions.cpp, cBaseObject.h, cBaseobject.cpp, cChar.cpp,
	cItem.cpp, cScript.cpp, cScript.h, html.cpp, npcs.cpp,
	pcmanage.cpp, regions.cpp, UOXJSMethods.cpp, UOXJSMethods.h,
	UOXJSPropertySpecs.h, skills.cpp, targeting.cpp:
	Added ShouldSave() method to CBaseObject, for more support in spawn
	regions
	ShouldSave by default is always true
	If an object is inside an object that won't save, neither will any
	of the objects inside the container
	Updated all the JS events to use object based systems rather than
	index based ones
	Fixed a slight bug in the error reporter
	Fixed the MethodError function with multiple paramater support

2001-12-20 17:42  darkangelab

	* UOXJSMethods.h:
	Readability updates

2001-12-20 17:42  dark-storm

	* html.h:
	Style

2001-12-20 17:32  darkangelab

	* UOXJSMethods.cpp, combat.cpp, html.cpp, npcs.cpp:
	Source code cleanups and tidy ups
	Syntax updates to conform to a single style
	Performance tweaks to some HTML stuff

2001-12-20 16:53  dark-storm

	* cAccount.cpp, cServerData.cpp, cSocket.cpp:
	Newlines once again

2001-12-20 16:36  dark-storm

	* html.h:
	Added a newline

2001-12-20 16:32  dark-storm

	* SEFunctions.cpp, SEFunctions.h, UOXJSClasses.h, UOXJSMethods.cpp,
	UOXJSMethods.h, UOXJSPropertyEnums.h, UOXJSPropertyFuncs.cpp,
	UOXJSPropertyFuncs.h, UOXJSPropertySpecs.h, cMultiObj.cpp,
	cScript.cpp, cSpawnRegion.cpp, cmdtable.cpp, combat.cpp, html.cpp,
	necro.cpp, npcs.cpp, quantityfuncs.cpp:
	Added Update to the PropertySetters for X,Y and Z.
	Added a few Character Methods (TextMessage,Delete and others) and a
	Constructor for the UOXChar class (not finished but working)
	Added Newlines to some files
	Fixed a linux issue (please check that)
	Fixed a Guardbug where attacking a monster in a guarded area
	without the default npc.scp would crash the server.
	Setting the Source and Destination of TempEffects to INVALIDSERIAL
	on NPC Deletion eventually should fix rare combat bugs.
	Prepared html.cpp for Offline pages.

2001-12-20 12:41  dark-storm

	* Makefile.am, Makefile.in:
	Added the
	UOXJSMethods.cpp and UOXJSMethods.h
	to the Linux Makefiles

2001-12-20 08:48  dark-storm

	* cScript.cpp:
	Activated CGump javascript class

2001-12-20 08:44  dark-storm

	* html.cpp, html.h, uox3.cpp, uox3.h:
	Added the basics for a new HTML Status system.

	Stand by for documentation...
	Added: html.h

2001-12-20 08:22  dark-storm

	* UOX3_Official.dsp:
	- no message -

2001-12-20 08:16  dark-storm

	* UOX3_Official.dsp, UOXJSClasses.h, UOXJSMethods.cpp,
	UOXJSMethods.h, cScript.h:
	Added CGump , class for JavaScript gumps.

	Added UOXJSMethods.cpp and UOXJSMethods.h to the Project file and
	added a filegroup for the JS Engine as	there are a lot of files by
	now...

	Usage:
	var myGump = new Gump;
	myGump.AddBackground(0,0,450,200,0x24a4);
	myGump.AddText(30, 30, 0x1, "Test");
	myGump.Send(0);

2001-12-20 01:38  darkangelab

	* cScript.cpp, cScript.h, cmdtable.cpp, funcdecl.h, npcs.cpp,
	SEFunctions.cpp, UOX3_Official.dsp, skills.cpp, sound.cpp,
	uox3.cpp:
	playMidi now takes 2 parameters, not 3
	The command to play a midi takes 1 or 2 parameters now
	Added mechanism by which JS race, char, item, guild, region and
	socket objects can be dynamically allocated and released without
	much difficulty
	Automatically acquire 2 characters and 2 items per script, so that
	the parameters can be used
	Created a #define system for new object based mechanism (note that
	it will not currently compile under object system as is, but normal
	one will)
	Cleanups, tidyups, and other miscellaneous things

2001-12-19 19:37  darkangelab

	* cClick.cpp, cItem.cpp, cItem.h, effect.cpp, funcdecl.h,
	gumps.cpp, items.cpp, skills.cpp, targeting.cpp, uox3.cpp:
	Removed SetLayer( 0 ) on items when generating corpse to avoid
	layer corruption
	Changed murderer and creator values for items from a string to a
	serial, shaving 92 bytes per item

2001-12-19 17:49  darkangelab

	* cScript.cpp:
	SetIntelligence JS call fix thanks to silver2000

2001-12-18 23:14  darkangelab

	* SEFunctions.cpp, boats.cpp, cClick.cpp, cSpawnRegion.h,
	classes.h, combat.cpp, house.cpp, targeting.cpp, uox3.cpp:
	Few cleanups and tidyups

2001-12-18 22:36  darkangelab

	* cmdtable.cpp, cmdtable.h, newbie.cpp, npcs.cpp, uox3.cpp,
	worldmain.cpp:
	Added 'reloaddefs which allows runtime reloading of all definitions
	(can be time consuming)
	Fixed a bug with newbie items with text named items
	Called SpeechSys->Poll() just before a world save, so that the
	broadcast message telling about the save can be sent
	Warning cleanups

2001-12-17 20:05  darkangelab

	* ai.cpp, cMagic.h, classes.h, combat.cpp, cWeather.cpp,
	cWeather.hpp, combat.h, globals.cpp, magic.cpp, movement.cpp,
	movement.h, pcmanage.cpp, ssection.cpp, uox3.cpp, uox3.h:
	Functions no longer take a currenttime parameter, instead using the
	global uiCurrentTime variable
	Fixed a bug where the day timer would go nuts
	Changed temperature from UI08 to SI08, to support Krrios'
	temperature effects
	Removed some unnecessary global variables

2001-12-16 20:20  darkangelab

	* UOXJSClasses.h, UOXJSPropertyEnums.h, UOXJSPropertyFuncs.cpp,
	UOXJSPropertyFuncs.h, UOXJSPropertySpecs.h, cSocket.cpp, cSocket.h,
	enums.h:
	Added cSocket helper functions to help with JS property stuff
	Added a CSocket object to the JS system
	Implemented a number of socket properties for JS system
	Added CV_KRRIOS to client types

2001-12-16 19:09  darkangelab

	* commands.cpp, targeting.cpp, uoxstruct.h:
	Added stripOff member to commandLevel_st
	STRIPOFF tag in a command level description tells 'make to remove
	equipped items to pack, and to remove hair/beard

2001-12-15 22:49  darkangelab

	* UOXJSPropertyEnums.h, UOXJSPropertyFuncs.cpp,
	UOXJSPropertySpecs.h:
	Updated and worked on Guild properties

2001-12-15 05:57  darkangelab

	* calcfuncs.cpp, cBaseObject.h, cBaseobject.cpp, cChar.cpp,
	combat.cpp:
	Fixed a bug which had calcItemObjFromSer with INVALIDSERIAL as the
	serial returning a valid object
	Installed an equivalent fix for calcCharObjFromSer but which hasn't
	cropped up yet
	Broke up SetMulti code to RemoveFrom and AddTo, firing the trigger
	more often

2001-12-14 23:52  darkangelab

	* UOXJSPropertyEnums.h, UOXJSPropertyFuncs.cpp,
	UOXJSPropertySpecs.h, targeting.cpp, townregion.cpp, townregion.h,
	uox3.cpp, weight.cpp:
	Added more region properties
	Changed a number of int references to SI32
	Added more functions to cTownRegion
	Cleaned up some warnings

2001-12-14 16:09  thyme

	* Makefile.in:
	Added UOXJSPropertyFuncs.o to OBJS for compile

2001-12-13 20:24  darkangelab

	* UOXJSClasses.h, UOXJSPropertyFuncs.cpp:
	Updates to property get/setters

2001-12-13 19:34  darkangelab

	* Makefile.am, Makefile.in, UOX3_Official.dsp, UOXJSClasses.h,
	UOXJSPropertyEnums.h, UOXJSPropertyFuncs.cpp, UOXJSPropertyFuncs.h,
	UOXJSPropertySpecs.h, cScript.cpp:
	Broke out PropertySpecs, PropertyFuncs, PropertyEnums and the JS
	Classes into their own header and CPP files

2001-12-13 00:22  darkangelab

	* cScript.cpp:
	Added property enums and specs for Guilds, races and regions

2001-12-12 23:18  thyme

	* skills.cpp:
	Added strupr(tag) for create menu

2001-12-12 22:52  thyme

	* scriptc.cpp:
	Forced FindEntry to do uppercase lookups

2001-12-12 21:35  darkangelab

	* cScript.cpp, globals.cpp, items.cpp, npcs.cpp, uox3.h:
	Killed some unnecessary global variables
	Changed some variables for JS Char objects to readonly
	Implemented more property setters for JS Char objects

2001-12-11 21:02  darkangelab

	* cItem.cpp:
	Fixed a hash item error problem occurring on new item creation, due
	to redundant code

2001-12-11 19:51  thyme

	* scriptc.cpp:
	Added strupr() for section headers

2001-12-11 19:14  darkangelab

	* skills.cpp, skills.h, uox3.cpp:
	Changed MakeMenuTarget to take a string instead of an int
	Adjusted calls to MakeMenuTarget to pass a string
	NOTE: Inscription relies on numeric entries for spells, not names!

2001-12-10 23:22  darkangelab

	* SEFunctions.cpp, cChar.cpp, cItem.cpp, cItem.h, cMultiObj.cpp,
	cMultiObj.h, charhandle.cpp, classes.h, commands.cpp, globals.cpp,
	handlers.h, itemhandler.cpp, items.cpp, regions.cpp, uox3.cpp,
	uox3.h:
	Removed the need for InitItem
	Implemented the constructors to be the same for citem/cmultiobj as
	it is for cchar
	Adjusted SetSerial so that it removes from the hash table and adds
	it back in
	This fixed the common error messages occurring with world loading

2001-12-10 21:52  darkangelab

	* SEFunctions.cpp, SEFunctions.h, cScript.cpp, uox3.h:
	Added Get/Set Name2 JS functions
	Added GetLowDamage and GetHighDamage functions
	Init'd standard classes for each context/object so things like for
	loops should work
	Added error reporter which should report errors meaningfully
	Began work on preparing an object based system rather than a
	heavily function based one

	Thanks to DarkStorm for the information and the ideas/code

2001-12-05 22:46  darkangelab

	* cSocket.cpp:
	Logging only happens if the logging option is on

2001-12-05 22:25  thyme

	* items.cpp, npcs.cpp:
	Added strupr() for tags in DFNS

2001-12-05 19:39  darkangelab

	* cScript.cpp, cScript.h, magic.cpp:
	Added an onSpellTarget event
	onSpellTarget fires for a character/item when it's targeted by a
	spell
	onSpellTarget also fires BEFORE the consequences of the spell
	exerts itself (in case it's enough to kill)

2001-12-05 18:28  darkangelab

	* uox3.cpp:
	Fixed a bug where shop layers were not showing up with 'gmopen

2001-11-29 19:23  darkangelab

	* cServerData.cpp, cServerDefinitions.cpp, jail.cpp, scriptc.cpp,
	ssection.cpp, townregion.cpp, uox3.cpp:
	Code changes and updates to turn the DFN support on, in preparation
	for a package release

2001-11-27 18:22  darkangelab

	* items.cpp:
	Slight tweak/tidy up to CheckEquipment

2001-11-26 21:21  seank

	* ChangeLog:
	figured i'd update this guy... weee

2001-11-26 21:19  seank

	* threadsafeobject.h:
	A define was missing that was causing the pthread fixes zippy did
	to break.
	It seems to be a bug in the configure.	This is a hack until I can
	figure
	out what happened.

2001-11-26 19:59  bpass

	* network.cpp, threadsafeobject.cpp:
	Linux/Pthread mutex fixes.
	Changed threadsafeobject to use recursive mutex, this should fix a
	LOT of linux freeze problems.

2001-11-25 21:40  thyme

	* uox3.cpp:
	Fixed dropItem bug

2001-11-25 20:05  bpass

	* cClick.cpp, uox3.cpp:
	Little container fix

2001-11-25 17:30  bpass

	* hash.h:
	replaced -1 with INVALIDSERIAL

2001-11-23 00:24  darkangelab

	* network.cpp, npcs.cpp, packets.cpp, packets.h, targeting.cpp:
	Removed some unnecessary variables
	Created a packet class CPCharAndStartLoc to do the majority of the
	GoodAuth() function in cNetworkStuff

2001-11-22 17:45  darkangelab

	* cmdtable.cpp, npcs.cpp:
	Removed some unnecessary references to uox3test.ini
	Fixed an NPC creation lookup bug that would show up on DFN style
	headers

2001-11-22 17:18  darkangelab

	* cChar.cpp, cChar.h, cItem.cpp, cItem.h, combat.cpp, uox3.cpp:
	Reduced Poison information for characters and items to SI08 from
	SI32
	Changed return value of -1 to 0xFFFF in calcAtt

2001-11-22 16:50  darkangelab

	* pcmanage.cpp:
	Added Thyme's fix for char creation with 0 intelligence

2001-11-21 21:04  darkangelab

	* cBaseobject.cpp, cClick.cpp, funcdecl.h, hash.h, packets.cpp,
	packets.h, speech.cpp, targeting.cpp, uox3.cpp:
	Added openPack( cSocket *, CItem * ) to simplify some calls (and
	reduce lookups)
	Added CPItemsInContainer packet to do the bulk of the work that
	openPack does
	Split openPack to send CPDrawContainer and CPItemsInContainer
	Fixed a bug with PostLoadProcessing that would stop spawn serials
	and owner serials from properly being set
	Syntax cleanups

2001-11-21 10:45  bpass

	* globals.cpp, hash.cpp, hash.h, items.cpp, movement.cpp, uox3.cpp,
	uox3.h:
	Moved hash classes into template classes in hash.h
	Hash.cpp is no longer needed.

2001-11-20 22:15  darkangelab

	* cServerData.cpp:
	Writes out the ScriptSectionHeader setting

2001-11-20 20:31  darkangelab

	* packets.cpp:
	Replaced sscanf in CPIClientVersion::Handle with a stringstream
	based version

2001-11-20 14:17  bpass

	* packets.cpp:
	*Oops* Compile fix

2001-11-20 11:10  bpass

	* UOX3_Official.dsp, UOX3_Official.dsw:
	Small cleanups for the win32 project files

2001-11-20 11:07  bpass

	* network.cpp, network.h, packets.cpp, packets.h, uox3.cpp:
	Linux run fixes: ifdefd out Internal mutex stuff in network, only
	used if compiled with __LOGIN_THREAD__ this stuff was causing
	deadlock inside linux... preventing almost everything except login
	(ie: Char creation)
	Added string checking to CPIClientVersion

2001-11-18 20:20  darkangelab

	* boats.cpp, cAccount.cpp, cClick.cpp, cServerData.cpp,
	cServerData.h, cServerDefinitions.cpp, cSocket.cpp,
	cSpawnRegion.cpp, cSpawnRegion.h, classes.h, cmdtable.cpp,
	cmdtable.h, combat.cpp, debug.cpp, effect.cpp, fileio.cpp,
	funcdecl.h, house.cpp, im.cpp, items.cpp, magic.cpp, magic.h,
	movement.cpp, necro.cpp, npcs.cpp, SEFunctions.cpp, SEFunctions.h,
	regions.cpp, skills.cpp, sound.cpp, speech.cpp, targeting.cpp,
	targeting.h, trigger.cpp, uox3.cpp:
	Changed one line comments from /* */ to // in the instances it's
	used
	Syntax cleanups
	Fixed bug where SpawnRandomMonster would fail
	Added tag to ini file to choose between, essentially, DFN and SCP
	headers (whether it puts ITEM or NPC at front of numbers),
	defaulting to scripts
	Updated code to be much more DFN friendly
	JS func SpawnNPC now takes a string not an int in the 4 param
	version

2001-11-18 18:42  bpass

	* effect.cpp:
	Few NULL checks for crash fixes

2001-11-18 18:19  bpass

	* sound.cpp:
	Crash fix: added a few NULL checks to soundeffect()

2001-11-18 17:38  bpass

	* magic.cpp:
	Fix for NPCs killing themselves when casting area spells in combat.

2001-11-16 08:13  bpass

	* ssection.cpp:
	Crash fix

2001-11-15 21:04  darkangelab

	* books.cpp, cmdtable.cpp, combat.cpp, commands.cpp, effect.cpp,
	fileio.cpp, funcdecl.h, globals.cpp, gumps.cpp, house.cpp,
	items.cpp, magic.cpp, msgboard.cpp, necro.cpp, network.cpp,
	pcmanage.cpp, scriptc.cpp, skills.cpp, speech.cpp, targeting.cpp,
	uox3.cpp, uox3.h, vendor.cpp:
	Removed some unncessary global functions and variables
	Updated DFN code so it properly reads in section headers
	General clean up / tidy ups

2001-11-15 19:30  darkangelab

	* cServerData.cpp:
	V2.0 INI lookup doesn't force data to uppercase, fixes linux path
	stuff

2001-11-15 18:49  darkangelab

	* cAccount.cpp, cAccount.h, fileio.cpp, funcdecl.h, uox3.cpp:
	Commited compilation fixes, so it compiles clean
	Moved FileExists to a global func so it can be used by more than
	accounts

2001-11-15 18:40  darkangelab

	* cBaseobject.cpp, cChar.cpp, combat.cpp, network.cpp, queue.cpp,
	sound.cpp, uox3.cpp, uox3.h:
	Syntax cleanups
	Moved the spline stuff to sound.cpp, only commented out playing,
	however commented the linux stuff detailing steps required for
	Linux as provided by NNKK.  Seems trivial
	General other cleanups

2001-11-15 17:47  bpass

	* cServerData.cpp, cServerData.h, cServerDefinitions.cpp,
	combat.cpp, network.cpp, uox3.cpp, worldmain.cpp:
	New INI format & fixes...
	Fixes for combat.

2001-11-15 16:52  darkangelab

	* cmdtable.cpp:
	'tile and 'tilew now support a single field ID (like 0x0EED instead
	of 0x0E 0xED) as well as 2 field IDs

2001-11-15 12:11  mrfixit

	* itemhandler.cpp:
	Fixed a signed/unsigned issue

2001-11-14 14:34  mrfixit

	* PageVector.h, queue.cpp:
	Fixed some warnings

2001-11-13 18:26  darkangelab

	* uox3.cpp:
	Meditation fix from Pa'ka

2001-11-13 17:38  darkangelab

	* pointer.cpp:
	Removal of pointer.cpp

2001-11-13 17:37  darkangelab

	* Makefile.am, Makefile.in:
	Removal of pointer.cpp from the makefile

2001-11-13 17:33  darkangelab

	* UOX3_Official.dsp, UOX3_Official.dsw, cBaseobject.cpp, cChar.cpp,
	cItem.cpp, cMultiObj.cpp, fileio.cpp, pointer.cpp, uox3.h:
	UOX3 not UOX
	Removed the sound code Zippy put in entirely, as well as attic'ing
	pointer.cpp
	Removed the conditionals inside cbo, citem and cchar saving,
	reverting it back to it's full write
	Added ostringstream output for multi objects

2001-11-13 16:58  bpass

	* cChar.cpp, combat.cpp, uox3.cpp:
	Crash fixes from "Crash me" irc test shard.

2001-11-13 14:11  bpass

	* cBaseobject.cpp, cChar.cpp, cItem.cpp, uox3.h:
	Re-added some of the osttringstream stuff to increase save speed
	even more.

2001-11-13 09:44  mrfixit

	* ssection.cpp, ssection.h:
	- Fixed some warnings.

2001-11-13 09:43  bpass

	* cBaseobject.cpp, cChar.cpp, cItem.cpp, pointer.cpp, uox3.cpp,
	uox3.h:
	I'm not even going to say anything.

2001-11-13 09:22  seank

	* ChangeLog:
	Updated changelog...  for no reason whatsoever.

2001-11-12 23:11  darkangelab

	* Dictionary.cpp, boats.cpp, books.cpp, cAccount.cpp,
	cBaseobject.cpp, cChar.cpp, cClick.cpp, cItem.cpp, cItem.h,
	cServerDefinitions.cpp, cWeather.cpp, calcfuncs.cpp,
	charhandle.cpp, cmdtable.cpp, combat.cpp, dist.cpp, fileio.cpp,
	globals.cpp, gumps.cpp, itemhandler.cpp, items.cpp,
	lineofsight.cpp, magic.cpp, mapstuff.cpp, movement.cpp,
	msgboard.cpp, SEFunctions.cpp, network.cpp, newbie.cpp, npcs.cpp,
	pointer.cpp, regions.cpp, skills.cpp, skills.h, sound.cpp,
	speech.cpp, targeting.cpp, trigger.cpp, uox3.cpp, uox3.h,
	commands.cpp:
	Updated repair code thanks to Bel-CMC
	Cleaned up the code so that if, for, and while are of the same
	syntax format
	ie
	for( a = 0; a < b; a++ )
	if( blah >= blah2 )
	do
	{
	} while( x < y );

2001-11-12 19:29  darkangelab

	* cBaseobject.cpp, cChar.cpp, cItem.cpp, uox3.h:
	UOX3 not UOX
	Restored full writing out of data for each object, as it is an
	explicit design decision critical for future implementations
	Significantly reduced file IO when saving out items of any type,
	reducing to at most 6 transactions per object, compared to the
	dozens previously required

2001-11-12 17:13  bpass

	* combat.cpp, movement.cpp, regions.cpp, uox3.cpp:
	Few small walking changes trying to fix people needing to 'resend
	all the time.

2001-11-12 15:48  bpass

	* cBaseobject.cpp, cChar.cpp, cItem.cpp, hash.cpp, uox3.h:
	Removed default tags from Saves/Loads.	Huge speed and save size
	benifits.

2001-11-11 19:26  darkangelab

	* effect.cpp:
	Not all temp effects trigger an equipment check

2001-11-11 19:16  darkangelab

	* effect.cpp:
	Don't change the value of s based on effect

2001-11-10 23:12  bpass

	* pointer.cpp:
	We are worried about the SOUND being portable? Come on. Jesus.

2001-11-09 20:03  darkangelab

	* SEFunctions.cpp, pointer.cpp:
	Fixed a SetDecayable JS bug
	Updated SE_GetRaceCount documentation and implementation
	Removed sound playback from pointer.cpp
	As long as this is purely a win32 implementation, IT WILL NOT STAY
	IN
	For it to go in, a portable mechanism must be found

2001-11-09 13:16  mrfixit

	* SEFunctions.cpp, SEFunctions.h, cScript.cpp:

	Added GetRaceCount (By DarkStorm) to the scriptengine.

2001-11-09 08:42  bpass

	* pointer.cpp:
	I'm just going to keep doing this.

2001-11-08 17:43  darkangelab

	* cClick.cpp, targeting.cpp:
	Specialized repair tools were set to case 49 in MultiTarget(),
	which was reserved for MakeTownAlly
	Changed repair tools to case 24 and called Skills->Repair()

2001-11-08 17:10  darkangelab

	* pointer.cpp:
	Decision stands: As long as code is not portable and there is no
	alternative for other OS', it is not to be included

2001-11-08 15:34  bpass

	* pointer.cpp, uox3.cpp:
	Leave the sound ON.

2001-11-06 20:56  darkangelab

	* skills.cpp:
	Smithing only works on the valid ingot IDs
	Smith action on non-ingots attempts repair of the item

2001-11-06 19:12  darkangelab

	* targeting.cpp:
	Don't force | 0x8000 on character dyeing

2001-11-06 18:42  darkangelab

	* uox3.cpp:
	Default JS engine size set to 1MB on Win, 16 on Linux (as 1MB is
	insufficient for defaults scripts on Linux)

2001-11-06 18:39  darkangelab

	* items.cpp, pcmanage.cpp, uox3.cpp:
	Removed some unreferenced variables
	Cleaned up createChar() to hopefully reduce some of the code bulk
	Added in default size of 0x100000 for the JS engine
	JS engine will read the file engine.dat and grab the first line of
	text.  It turns that text into a number, and uses that for the
	engine size.  Minimum size of 0x100000 required and enforced.

2001-11-06 14:56  mrfixit

	* cScript.cpp:
	Fixed 4 warnigs

2001-11-06 12:18  shadowlord13

	* SEFunctions.cpp, SEFunctions.h, cScript.cpp:
	Added four new JS functions:
	void SetDecayable( int item, bool isDecayable)
	bool IsDecayable( int item )
	void SetDecayTime( int item, int decayTime)
	int GetDecayTime( int item)

2001-11-05 23:42  darkangelab

	* uox3.cpp:
	Changed a PushConn to PopConn in RefreshItem(), hopefully fixing a
	hanging bug in Linux

2001-11-05 23:13  darkangelab

	* cBaseobject.cpp, SEFunctions.cpp, cBaseObject.h, cClick.cpp,
	cItem.cpp, cmdtable.cpp, newbie.cpp, uox3.cpp:
	Code cleanups / tidy ups
	Forced consistency of style
	Changed an int to SI32 in base object

2001-11-05 17:25  darkangelab

	* commands.cpp, funcdecl.h, globals.cpp, uox3.h:
	locationcount ranges from 0->4000, thus an UI16 is required
	loadCombat prototype moved to funcdecls.h
	Fix for bad dyeing of characters (Krrios)

2001-11-05 16:50  mrfixit

	* globals.cpp, uox3.h:
	Added comments and changed int variables into UI32, SI32 etc.

2001-11-04 19:02  darkangelab

	* SEFunctions.cpp, ai.cpp, network.cpp, network.h, pointer.cpp,
	targeting.cpp, uox3.cpp, uox3.h:
	0.95.07.00 release
	Fixed application name and release version
	Updated timezone to reflect that of person distributing, including
	adding proper address for the project's source rather than primary
	website
	Commented out distinctly nonportable code
	Removed connCliList from cNetworkStuff as it is no longer used
	Monsters will not attack true animals
	Cleaned up some code in targeting.cpp

2001-11-04 18:09  seank

	* ChangeLog:
	updated changlog.. weee

2001-11-04 15:17  shadowlord13

	* tags.h:
	Added endline to the end of the file.

2001-11-04 15:15  shadowlord13

	* SEFunctions.h:
	Fixed to compile for linux.

2001-11-04 14:33  shadowlord13

	* SEFunctions.h, cBaseObject.h, cBaseobject.cpp:
	Code for tags on characters and items. JS functions:
	SetTag(objectID, objectType, tagname, tagval);
	GetTag(objectID, objectType, tagname);
	GetNumTags(objectID, objectType);

2001-11-04 14:19  shadowlord13

	* SEFunctions.cpp:
	Code for tags on characters and items. JS functions:
	SetTag(objectID, objectType, tagname, tagval);
	GetTag(objectID, objectType, tagname);
	GetNumTags(objectID, objectType);

2001-11-04 12:29  shadowlord13

	* network.cpp:
	 When someone clicks 'plot course' on a map, the server prints a
	message to that effect, but that's all it does.

2001-11-04 12:29  shadowlord13

	* cScript.cpp:
	Added StringToNum and NumToString to the list of functions usable
	in JS scripts.

2001-11-04 10:38  bpass

	* cAccount.cpp, uox3.h:
	Small auto accounts fix

2001-11-03 21:53  bpass

	* cServerDefinitions.cpp, cSocket.cpp:
	Small crash Fixes

2001-11-03 13:00  shadowlord13

	* uox3.cpp:
	Changed four comparisons, which were comparing a char to NULL (NULL
	is for pointers!) to comparing the char to '\0'.

2001-11-03 12:59  shadowlord13

	* mapstuff.cpp:
	 Commented out an unneccessary assert. It was checking to make sure
	a unsigned integer was >=0.

2001-11-03 12:58  shadowlord13

	* effect.cpp:
	Fixed an erroneous comment "lord binary, body-values >0x3e crash
	the client." He meant 0x3e1.

2001-11-03 12:52  shadowlord13

	* network.cpp:
	Fixed crash on logout.

2001-11-01 20:58  bpass

	* fileio.cpp, pointer.cpp:
	Different Sound :o)

2001-11-01 20:25  shadowlord13

	* uox3.h:
	Compiles under MingW also now.

2001-11-01 20:15  shadowlord13

	* uox3.cpp:
	Compiles under MingW also now.

2001-11-01 19:38  shadowlord13

	* tags.h:
	Tags!

2001-11-01 16:04  bpass

	* fileio.cpp, pointer.cpp:
	*sigh* Fixes for splines.

2001-11-01 15:50  bpass

	* combat.cpp, fileio.cpp, pointer.cpp, uox3.cpp:
	Small Combat fixes

2001-11-01 07:36  bpass

	* pointer.cpp:
	Opps

2001-10-31 19:48  bpass

	* pointer.cpp:
	Small Fix

2001-10-31 19:39  bpass

	* fileio.cpp, pointer.cpp:
	Misc.

2001-10-30 19:10  bpass

	* uox3.cpp:
	Console Thread Cleanups

2001-10-29 18:51  bpass

	* cAccount.cpp, cAccount.h, cBaseobject.cpp, cItem.cpp, uox3.cpp:
	*chants* Death to all crash bugs! Aieeeeeee!!

2001-10-29 14:56  bpass

	* cConsole.cpp, cConsole.h:
	Small Linux Fix

2001-10-29 14:16  bpass

	* cAccount.cpp, cBaseobject.cpp, cConsole.cpp, cItem.cpp,
	cThreadQueue.cpp, house.cpp, network.cpp, npcs.cpp, uox3.cpp:
	Fix for vendors' stuff not being displayed.

2001-10-29 10:41  bpass

	* cConsole.cpp, cConsole.h:
	Mr. Fixit console cleanups

2001-10-29 10:20  bpass

	* SEFunctions.cpp:
	Tweak for File i/o

2001-10-29 09:50  bpass

	* cBaseobject.cpp, cItem.cpp, combat.cpp, speech.cpp:
	Fix for criminal flagging

2001-10-28 21:06  bpass

	* SEFunctions.cpp, uox3.cpp:
	Quick linux fix for new SE Functions

2001-10-28 18:25  bpass

	* SEFunctions.cpp, SEFunctions.h, cScript.cpp:
	FileOpen, FileClose, EnfOfFile, Read, ReadUntil, Write,
	StringToNum, NumToString JSE functions for File I/O in uox
	jscripts.  FileOpen does not allow files containing "..""\", or
	"/".

2001-10-28 17:09  darkangelab

	* ai.cpp, boats.cpp, cChar.cpp, cItem.cpp, calcfuncs.cpp,
	cmdtable.cpp, combat.cpp, commands.cpp, effect.cpp, html.cpp,
	items.cpp, movement.cpp, network.cpp, network.h, npcs.cpp,
	skills.cpp, sound.cpp, speech.cpp, targeting.cpp, uox3.cpp,
	vendor.cpp, xgm.cpp:
	Updated network code to preserve iterators when a socket loop is
	used

2001-10-28 16:09  bpass

	* SEFunctions.cpp, boats.cpp, cmdtable.cpp, commands.cpp,
	msgboard.cpp, network.cpp, npcs.cpp, skills.cpp, trigger.cpp,
	uox3.cpp:
	Console output cleanups.

2001-10-28 13:51  bpass

	* uox3.cpp:
	Still trying to fix the grabItem/worldsave crash,

2001-10-28 13:03  bpass

	* uox3.cpp:
	Huge crash fix for grabItem

2001-10-28 12:03  bpass

	* cItem.cpp, cServerDefinitions.cpp, network.cpp, regions.cpp,
	uox3.cpp, worldmain.cpp:
	Small fix or two

2001-10-25 22:15  seank

	* ChangeLog, townregion.cpp, uox3.dox:
	Added uox3.dox and other minor sync tweaks

2001-10-25 21:40  bpass

	* cBaseobject.cpp, cChar.cpp, cItem.cpp, cItem.h, cServerData.cpp,
	cServerDefinitions.cpp, cSpawnRegion.cpp, calcfuncs.cpp,
	cmdtable.cpp, combat.cpp, commands.cpp, fileio.cpp, html.cpp,
	items.cpp, magic.cpp, network.cpp, network.h, npcs.cpp, power.h,
	regions.cpp, speech.cpp, uox3.cpp, worldmain.cpp:
	Lots of MAJOR crash fixes.  From the test server.  A few extra
	console output cleanups.

2001-10-25 13:26  bpass

	* Dictionary.cpp, Dictionary.h, cClick.cpp, cConsole.cpp,
	combat.cpp, speech.cpp:
	Misc

2001-10-24 18:10  bpass

	* uox3.h:
	Build 0.95.06

2001-10-24 17:28  bpass

	* cAccount.cpp, cGuild.cpp, commands.cpp, fileio.cpp, magic.cpp,
	mapstuff.cpp, network.cpp, regions.cpp, skills.cpp, speech.cpp,
	uox3.cpp, uox3.h, worldmain.cpp:
	Lots of crash fixes, a few bug fixes, General console output clean
	up (it's pretty now!)

2001-10-24 13:49  bpass

	* uox3.cpp:
	Testing something

2001-10-23 17:24  bpass

	* cSocket.cpp, cSocket.h, packets.h, uox3.cpp:
	More fixes! yay!

2001-10-23 16:09  bpass

	* cChar.cpp, cItem.cpp, cScript.cpp, cmdtable.cpp, npcs.cpp,
	trigger.cpp, trigger.h, uox3.cpp:
	More Crash fixes (a few biggies) and a fix for horse mounts

2001-10-23 09:19  bpass

	* cScript.cpp, npcs.cpp, targeting.cpp, trigger.cpp:
	Crash fix for stupid error.

2001-10-22 20:31  bpass

	* cScript.cpp:
	Little fix to onSpeech: make text lower case so comparisons can be
	made.

2001-10-17 13:55  bpass

	* cItem.cpp, cmdtable.cpp:
	A few fixes.... Is abaddon dead?

2001-10-08 17:41  darkangelab

	* skills.cpp, worldmain.cpp:
	Made sure that resources.bin is saved/loaded each world save
	Updated TreeTarget code so that it should always generate logs when
	targeted (and logs exist)

2001-10-07 16:38  darkangelab

	* cAccount.cpp:
	Fixed an account reload bug that reset all characters, reloading
	accounts now preserves existing characters in the list

2001-10-02 21:17  darkangelab

	* cSocket.cpp:
	If the build is a debug build (not release), then it turns socket
	logging on by default (off in release)

2001-10-02 01:51  darkangelab

	* cChar.cpp, cChar.h, combat.cpp, pcmanage.cpp, skills.cpp,
	sound.cpp, uox3.cpp, uoxstruct.h:
	Slight tidy up in PC creation
	Added some more useful functions to CChar to clean up some code
	Redid creat_st to be more OO, with constructor and access
	mechanisms
	Added in known animals based on UOTD information
	Fixed setcharflag so that it only makes animals highlight blue in
	an animals guarded region

2001-09-27 22:04  darkangelab

	* SEFunctions.cpp, SEFunctions.h, cScript.cpp:
	Added a GetWorldNumber function for use in scripts

2001-09-27 21:27  darkangelab

	* boats.cpp, cChar.cpp, cClick.cpp, cRaces.cpp, cmdtable.cpp,
	commands.cpp, funcdecl.h, packets.cpp, pcmanage.cpp,
	townregion.cpp, typedefs.h, uox3.cpp, uox3.h, xgm.cpp:
	Fixed some warnings and did some cleanups
	Validated map transference based on client type
	Added in recognition of third dawn client
	Updated some typedef's to properly reflect their correct sizes

2001-09-27 19:13  darkangelab

	* gumps.cpp:
	Extended entry fields for gumps by 2 that require numbers, so that
	hex values can be validly entered

2001-09-27 19:11  darkangelab

	* cItem.cpp, cItem.h, cSpawnRegion.cpp, calcfuncs.cpp, classes.h,
	effect.cpp, gumps.cpp, house.cpp, items.cpp, npcs.cpp, skills.cpp,
	targeting.cpp, uox3.cpp:
	Updated item spawn code so that it is properly put into the right
	world
	Updated carpentry checks so that all planks and logs will fire the
	menu
	Updated the makemenu handling so that if a bad item is created,
	then it turns off the skills being used

2001-09-27 00:45  darkangelab

	* funcdecl.h, items.cpp, npcs.cpp, uox3.cpp:
	Miscellaneous code cleanup / warning removal / dead function
	removal

2001-09-27 00:33  darkangelab

	* SEFunctions.cpp, cScript.cpp, cSpawnRegion.cpp, classes.h,
	globals.cpp, items.cpp, magic.cpp, necro.cpp, npcs.cpp,
	targeting.cpp, uox3.cpp, uox3.h, uoxstruct.h:
	Cleaned up code
	Added code to properly spawn NPCs in the correct worlds
	Added world transfer support to teleport.scp

2001-09-26 19:13  darkangelab

	* ai.cpp, archive.cpp, boats.cpp, cBaseObject.h, cBaseobject.cpp,
	cChar.cpp, cChar.h, cClick.cpp, cGuild.cpp, cItem.cpp, cRaces.cpp,
	cScript.cpp, cServerData.cpp, cServerDefinitions.cpp, cSocket.cpp,
	cSpawnRegion.cpp, cSpawnRegion.h, calcfuncs.cpp, classes.h,
	cmdtable.cpp, combat.cpp, dist.cpp, door.cpp, enums.h, fileio.cpp,
	fileio.h, funcdecl.h, gumps.cpp, house.cpp, items.cpp,
	SEFunctions.cpp, jail.cpp, lineofsight.cpp, magic.cpp,
	mapstuff.cpp, mapstuff.h, movement.cpp, movement.h, msgboard.cpp,
	network.cpp, npcs.cpp, packets.cpp, packets.h, pcmanage.cpp,
	queue.cpp, regions.cpp, regions.h, skills.cpp, sound.cpp,
	speech.cpp, targeting.cpp, townregion.cpp, townregion.h,
	trigger.cpp, typedefs.h, uox3.cpp, uoxstruct.h, vendor.cpp,
	xgm.cpp:
	Cleaned up a lot of code
	Fixed a calcRegionFromXY bug
	Fixed a bug where CACHE_MULS of 1 would never actually cache
	Added UOTD map support
	Added item type 89 (map change gate), with MoreXYZ being target
	location, and MORE being the world number
	NOTE: Currently, NO items or NPCs will spawn in any world apart
	from 0.  Thus, once you're there, you can't get back short of
	modifying the world file.  This WILL be fixed within the day

2001-09-25 21:05  darkangelab

	* cChar.cpp, mapstuff.cpp, mapstuff.h, msgboard.cpp, network.cpp,
	regions.h:
	Code cleanups / tidy ups
	Slight reorganization in lieu of preparation of Ilshenar support
	Added multi area caching, speeding up routines which rely on the
	size of the multi area

2001-09-25 19:34  darkangelab

	* SEFunctions.cpp, cBaseObject.h, cBaseobject.cpp, cChar.cpp,
	cGuild.cpp, cGuild.h, cItem.cpp, cMagic.h, cMultiObj.cpp,
	cMultiObj.h, cRaces.cpp, cServerData.cpp, cServerData.h,
	cSocket.cpp, cSocket.h, cWeather.cpp, charhandle.cpp, cmdtable.cpp,
	combat.cpp, combat.h, dist.cpp, door.cpp, effect.cpp, fileio.cpp,
	funcdecl.h, globals.cpp, gumps.cpp, handlers.h, hash.cpp,
	house.cpp, html.cpp, itemhandler.cpp, magic.cpp, movement.cpp,
	movement.h, network.cpp, skills.cpp, skills.h, ssection.cpp,
	ssection.h, townregion.cpp, townregion.h, typedefs.h, uox3.cpp,
	uoxstruct.h, worldmain.cpp, worldmain.h:
	Replaced the vast majority of short with either SI16 or UI16, make
	it much more CPU independent
	Fixed a bug where deleting a multi (via deeding or 'showhs) would
	cause a crash if anyone came near it or the world was saved
	Cleaned up a number of warnings

2001-09-25 18:09  darkangelab

	* cAccount.cpp, cServerDefinitions.cpp, cmdtable.cpp, commands.cpp,
	globals.cpp, gumps.cpp, network.cpp, uox3.cpp, uox3.h,
	worldmain.cpp, worldmain.h:
	Removed some superfluous global objects
	Removed some dead / unused code
	Cleaned up a fair number of warnings
	Added code so that players timed out during a world save won't get
	kicked instantly

2001-09-24 23:29  darkangelab

	* SEFunctions.cpp, books.cpp, books.h, cAccount.cpp, cItem.cpp,
	effect.cpp, globals.cpp, skills.cpp, uox3.cpp, uox3.h, uoxstruct.h,
	worldmain.cpp:
	Fixed a MoreB and More corruption bug when setting just a part of
	it
	Cleaned up some signed/unsigned warnings
	Writes out accounts.adm on save now, instead of accounts2.adm
	Fixed integer instead of float issues
	Removed a global that could be better served as a static local
	skillNumber in a struct was reduced from UI16 to UI08

2001-09-24 22:49  darkangelab

	* cAccount.cpp, cAccount.h, cGuild.cpp:
	Fixed an auto account creation bug that was causing new characters
	to be put in the wrong account
	Updated the account reading code to ensure no duplicate numbers on
	reading old / mixture of old and new
	NOTE: If you want your current account 0 to stay that way, then you
	MUST use SECTION ACCOUNT 0 instead of just SECTION ACCOUNT

2001-09-24 18:26  darkangelab

	* SEFunctions.cpp, cServerData.h, cSocket.cpp, cSocket.h,
	network.cpp, newbie.cpp:
	Cleaned up some warnings
	Fixed some variable size issues
	Added all UOTD animations (bow, salute, and so on)

2001-09-24 16:06  darkangelab

	* PageVector.h, SEFunctions.cpp, archive.cpp, boats.cpp,
	cBaseobject.cpp, cClick.cpp, cGuild.cpp, cItem.cpp, cItem.h,
	cMultiObj.cpp, cServerData.cpp, cServerData.h,
	cServerDefinitions.cpp, cSpawnRegion.cpp, cSpawnRegion.h,
	cmdtable.cpp, combat.cpp, commands.cpp, funcdecl.h, house.cpp,
	itemhandler.cpp, items.cpp, jail.cpp, network.cpp, queue.cpp,
	regions.cpp, ssection.cpp, townregion.cpp, trigger.cpp, uox3.cpp,
	uox3.h, uoxlinux.h, wholist.cpp, worldmain.cpp, xgm.cpp:
	Cleaned up a lot of code
	Reduced some signed/unsigned issues
	Forced signed/unsigned issues and a couple of other warnings to
	level 3
	Fixed up the archiving routines so that it properly archives world
	files correctly

2001-09-21 01:47  darkangelab

	* network.cpp, network.h, typedefs.h, uoxstruct.h:
	Removed anonymous unions of structs, as the flexibility provided
	was not being used
	Increased compiler compatability

2001-09-20 20:24  darkangelab

	* cChar.cpp, cItem.cpp, cItem.h, cRaces.cpp, cRaces.h,
	cServerData.h, typedefs.h:
	Increased source portability, removing some of the limitations in
	place preventing gcc 2.95.3 from compiling

2001-09-19 18:38  darkangelab

	* cChar.cpp, cmdtable.cpp, cmdtable.h, magic.cpp, packets.cpp,
	typedefs.h, uoxstruct.h:
	Removed the useless command 'house
	Added 2 more consts, INVALIDID and INVALIDCOLOUR
	Used INVALIDID and INVALIDCOLOUR where appropriate
	'poly and 'add now accept a single parameter

2001-09-18 22:30  darkangelab

	* SEFunctions.cpp, SEFunctions.h, cScript.cpp, uox3.h:
	Updated version to 0.95.04 Build 2
	Added GetBaseSkill function to the JS engine

2001-09-17 23:03  darkangelab

	* calcfuncs.cpp, cmdtable.cpp, commands.cpp, fileio.cpp,
	funcdecl.h, globals.cpp, hash.cpp, items.cpp, trigger.cpp,
	uox3.cpp, uox3.h:
	Removed the need for script1 and script2 on a global scope
	calcLastContainerFromSer is only ever called from items.scp, so
	it's only predeclared in that scope
	Moved and updated readscript( FILE * ) and read2( FILE * ) to
	trigger.cpp
	Fixed a crash bug due to hash table stuff
	Removed the need for cline

2001-09-17 21:53  toinzane

	* SEFunctions.cpp, ai.cpp, boats.cpp, books.cpp, cAccount.cpp,
	cBaseobject.cpp, cChar.cpp, cChar.h, cClick.cpp, cGuild.cpp,
	cItem.cpp, cItem.h, cScript.cpp, cScript.h, cServerData.cpp,
	cSocket.cpp, calcfuncs.cpp, charhandle.cpp, cmdtable.cpp,
	combat.cpp, door.cpp, effect.cpp, findfuncs.cpp, funcdecl.h,
	globals.cpp, gumps.cpp, hash.cpp, hash.h, house.cpp, html.cpp,
	itemhandler.cpp, items.cpp, lineofsight.cpp, magic.cpp,
	movement.cpp, msgboard.cpp, necro.cpp, network.cpp, npcs.cpp,
	packets.cpp, pcmanage.cpp, quantityfuncs.cpp, queue.cpp,
	regions.cpp, skills.cpp, sound.cpp, speech.cpp, targeting.cpp,
	townregion.cpp, townregion.h, typedefs.h, uox3.cpp, uox3.h,
	vendor.cpp, wholist.cpp, wholist.h, xgm.cpp:
	Converted items and chars to UI32's to allow many more (double) the
	amount of characters/items in a world.
	Changed -1 Item/Char checks to INVALIDSERIAL checks.
	Many ints converted to smaller containers to save wasted resources.
	Misc minor bugfixes/cleanups.

2001-09-17 20:07  darkangelab

	* cRaces.cpp, cRaces.h, cWeather.cpp, funcdecl.h, necro.cpp,
	skills.cpp, uox3.cpp:
	Minor clean ups and tidy ups
	Converted some funcs to take a single ID rather than the split IDs
	Converted weather damage for races to be signed (to support
	healing)

2001-09-17 19:43  bpass

	* network.h:
	Fixes

2001-09-17 19:33  bpass

	* network.cpp, network.h, uox3.cpp:
	Fixes

2001-09-17 19:27  bpass

	* cChar.cpp:
	FUCK

2001-09-17 18:43  rmcadams

	* cmdtable.cpp:
	fix on xgate addition

2001-09-17 18:37  bpass

	* cChar.cpp:
	Fixed Login Reconnect and offline death bugs

2001-09-17 18:35  rmcadams

	* cmdtable.cpp, cmdtable.h:
	Xgate addition

2001-09-16 21:33  darkangelab

	* cClick.cpp:
	Double clicking on a gate will no longer send you to 0 0 0

2001-09-16 21:17  darkangelab

	* magic.cpp:
	Updated gate code so that you don't land right on the output gate

2001-09-16 21:03  darkangelab

	* PageVector.h, SEFunctions.cpp, cChar.cpp, cConsole.cpp,
	cGuild.cpp, cItem.cpp, cRaces.cpp, cScript.cpp, cSocket.cpp,
	charhandle.cpp, classes.h, cmdtable.cpp, debug.cpp, effect.cpp,
	globals.cpp, im.cpp, items.cpp, jail.cpp, magic.cpp, queue.cpp,
	skills.cpp, speech.cpp, targeting.cpp, townregion.cpp, uox3.cpp,
	uox3.h, uoxlinux.h:
	Number of fixes / cleanups as available from Punt
	Fixed a bug with makeNum under windows not supporting a large range
	of data types, possibly resulting in things like empty spellbooks
	Removed some dead and superfluous code
	Removed the existing gate code, and replaced it with other code,
	reducing memory consumption further.

2001-09-16 17:55  toinzane

	* gumps.cpp:
	Added error-checking to entrygump() to prevent crashes on bad
	dictionary entries.

2001-09-16 17:41  toinzane

	* targeting.cpp:
	Removed a superfluous if (which would always be true) that caused
	warnings under some compilers.

2001-09-16 17:36  darkangelab

	* funcdecl.h, magic.cpp, mapstuff.cpp, uox3.h:
	Slight clean up / tidy ups
	Broke out the gate creation code into it's own function, SpawnGate
	Sync'd an extern and declare so that they're declared the same

2001-09-14 18:48  darkangelab

	* combat.cpp, gumps.cpp, uox3.cpp:
	Removed some dead combat code
	dumpgump.txt only generated in debug mode
	Updated auto stack handling to avoid a possible crash

2001-09-13 21:53  darkangelab

	* uox3.cpp:
	Caused autoStack and dropItemOnChar to return true if an item was
	deleted due to stacking
	Adjusted code so that if an item was deleted, it wasn't used in sfx
	functions or other functions related to dropping

2001-09-13 21:07  darkangelab

	* magic.cpp:
	Fixed a bug where if you received a message like "You are already
	casting a spell" it would alter the spell you were already casting

2001-09-13 21:01  darkangelab

	* uox3.cpp:
	Fixed a Win32 command bug where hex values weren't being read
	properly
	Updated makenumber() to call makeNum()
	makeNum() will now check for x or X instead of just x

2001-09-13 18:54  darkangelab

	* uox3.h:
	0.95.04.01

2001-09-13 18:24  seank

	* ChangeLog:
	updated changelog

2001-09-13 07:20  toinzane

	* combat.cpp:
	Made use of an #ifdef for debugging combat spam

2001-09-13 03:36  darkangelab

	* PageVector.h, boats.cpp, cAccount.cpp, cClick.cpp, cConsole.cpp,
	cConsole.h, cGuild.cpp, cMagic.h, cRaces.cpp, cSocket.cpp,
	cSocket.h, cSpawnRegion.cpp, classes.h, cmdtable.cpp, cmdtable.h,
	combat.cpp, commands.cpp, effect.cpp, funcdecl.h, gumps.cpp,
	house.cpp, items.cpp, magic.cpp, mapstuff.cpp, msgboard.cpp,
	necro.cpp, network.cpp, pcmanage.cpp, power.h, skills.cpp,
	speech.cpp, targeting.cpp, townregion.cpp, uox3.cpp, uoxstruct.h,
	vendor.cpp, wholist.cpp, worldmain.cpp:
	Started to improve STLPort compatability with VC6
	Fixed some signed/unsigned errors
	Forced some functions to take const char * instead of char *
	General clean up / tidy ups
	Greatly reduced number of cast's required by the source

2001-09-12 22:19  darkangelab

	* cItem.cpp, cItem.h, cmdtable.cpp, commands.cpp, effect.cpp,
	funcdecl.h, gump.h, gumps.cpp, magic.cpp, magic.h, targeting.cpp,
	uox3.cpp, uoxstruct.h:
	create.scp item creation now tracks which entry it was made from
	CItem now has some more const'd functions (weather related)
	Removed the unnecessary function hexnumber()
	'Skin now takes 1 parameter, not 2 (combined ID)
	'Dye now takes 1 parameter, not 2 (combined ID)
	'sfx now takes 1 or 2 parameters (combined ID, or separate)
	'gumpopen now takes 1 or 2 parameters (combined ID, or separate)
	'delid now takes 1 or 2 parameters (combined ID, or separate)
	cGump::Open() takes 3 params, not 4 (combined IDs)
	DiamondSpell(), FloodSpell(), SquareSpell() and FieldSpell()
	updated to take a combined ID, not separate
	Smelting heavily rewritten, so that it returns half the resources
	required to make it

2001-09-10 20:50  toinzane

	* boats.cpp, cChar.cpp, cSpawnRegion.cpp:
	Documented cSpawnRegion.cpp
	Fixed an error where an Unsigned Char was possibly set with
	negative values in boats.cpp
	Fixed petguarding set to -1 in CChar constructor.

2001-09-10 20:48  seank

	* ChangeLog, queue.cpp:
	sort needs algorithm

2001-09-10 20:35  darkangelab

	* PageVector.h, cmdtable.cpp, cmdtable.h, commands.cpp,
	network.cpp, network.h, queue.cpp, uox3.cpp:
	Changed the gmpage_st to a HelpRequest class
	Updated and latered HelpRequest to lay groundwork for reorganized
	GM queues
	Cleaned up some code
	Added PeakConnectionCount member to cNetworkStuff
	Hid some unnecessary public functions in cNetworkStuff
	Removed the 'wanim command completely

2001-09-10 20:30  darkangelab

	* regions.cpp:
	Fixed a crash bug that occurred when nearing the edge of a map

2001-09-10 19:53  darkangelab

	* books.cpp, xgm.cpp, xgm.h:
	Added placeholder for show queue request xGM packet
	Updated the ping packet so that it will return the time of the
	server
	Simplified the Cns and GM logged in code
	Cleaned up some code

2001-09-09 19:30  darkangelab

	* cServerData.cpp, cServerData.h, funcdecl.h, globals.cpp,
	house.cpp, uox3.cpp, uox3.h:
	Removed hstr2num as it's no longer used
	Converted last use of hstr2num to makeNum
	Fixed the auto save bug
	Simplified the uox3test.ini output, as well as reading it's input

2001-09-09 18:38  darkangelab

	* cRaces.cpp:
	Reorganized the layout of the code in race transformation
	Fixed a bug where it would try and colourize a beard object that
	didn't exist

2001-09-09 18:32  darkangelab

	* cRaces.cpp:
	REQUIREBEARD is off by default

2001-09-07 09:10  toinzane

	* cClick.cpp, cSpawnRegion.cpp, cmdtable.cpp, cmdtable.h,
	funcdecl.h, globals.cpp, pcmanage.cpp, skills.cpp, skills.h,
	targeting.cpp, typedefs.h, uox3.h, weight.cpp:
	Minor cleanups / fixes.
	Removed some superfluous globals and #defines

2001-09-06 18:31  darkangelab

	* trigger.cpp:
	Fixed envoke.scp parsing under windows
	NOTE This requires that you update your scpTrig.scp file to include
	explicit 0x for denoting hex values

2001-09-06 18:14  darkangelab

	* cThreadQueue.h, uox3.cpp:
	Fixed the console broadcast corruption bug

2001-09-06 17:49  darkangelab

	* uox3.cpp:
	Add GUIINFORMATION to menus.scp valid tags, which is a gump based
	display of current VERSION and INFORMATION tags
	VERSION tag in menus.scp now properly displays the version

2001-09-05 21:33  toinzane

	* boats.cpp, cChar.cpp, cItem.cpp, cmdtable.cpp, items.cpp,
	npcs.cpp, targeting.cpp, uox3.cpp:
	More work on mapregion stuff
	Improved how CItem and CChar destructors clean up after themselves.
	Misc minor cleanups / fixes

2001-09-05 20:59  darkangelab

	* cmdtable.cpp, commands.cpp, gumps.cpp, house.cpp, items.cpp,
	magic.cpp, npcs.cpp, targeting.cpp, uox3.cpp:
	Converted some calls to SetX and SetY to use SetLocation
	Cleaned up some code

2001-09-04 18:11  darkangelab

	* cServerData.cpp:
	Fixed a linux path mapping bug

2001-09-03 18:29  toinzane

	* cClick.cpp, cGuild.cpp, cItem.cpp, cRaces.cpp, commands.cpp,
	gumps.cpp, items.cpp, magic.cpp, npcs.cpp, skills.cpp,
	townregion.cpp, uox3.cpp:
	makeNum() now handles octal, hex, and decimal (thanks seank).
	Fixed a bug with guildstone names (and setting a name to any
	object)
	Misc minor cleanups/fixes

2001-09-03 18:13  darkangelab

	* globals.cpp, items.cpp, npcs.cpp, uox3.cpp, uox3.h:
	Removed some unnecessary globals
	Removed some crash bugs caused by faulty code ('remove on items
	should work correctly, amongst other things)

2001-09-03 16:55  darkangelab

	* cBaseobject.cpp, skills.cpp:
	Believe the rename crash bug has been fixed (doesn't crash at all
	for me)
	Fixed the mining bug where no ore would come up

2001-09-02 17:56  darkangelab

	* cScript.cpp:
	Added GetLightLevel to the function table so that it can be called

2001-09-02 15:17  darkangelab

	* SEFunctions.cpp, cBaseobject.cpp, cItem.cpp, skills.cpp:
	Added harkon's fixes for the SE functions GetPackOwner, FindMulti
	and SpawnItem
	Updated CItem::SetLocation so that it updates the multi value
	(should fix the guildstone placement bug)
	Slight tidy up in cbaseobject.cpp to initialize a variable to NULL

2001-08-29 18:31  darkangelab

	* cScript.cpp:
	harkon fixed a script function lookup problem

2001-08-28 19:31  toinzane

	* books.cpp, cAccount.cpp, cBaseobject.cpp, cChar.cpp, cGuild.cpp,
	cItem.cpp, cMultiObj.cpp, cRaces.cpp, cServerData.cpp,
	cServerDefinitions.cpp, cSpawnRegion.cpp, cWeather.cpp,
	commands.cpp, funcdecl.h, gumps.cpp, house.cpp, html.cpp,
	items.cpp, jail.cpp, magic.cpp, msgboard.cpp, necro.cpp,
	network.cpp, newbie.cpp, npcs.cpp, skills.cpp, targeting.cpp,
	townregion.cpp, trigger.cpp, uox3.cpp:
	Changed many atoi() calls to makeNum() calls to allow support of
	strings

2001-08-28 17:05  toinzane

	* books.cpp, books.h, cClick.cpp, cServerData.cpp, cServerData.h,
	cSpawnRegion.cpp, itemhandler.cpp, network.cpp, uox3.cpp:
	Fixed some issues with books.
	Possible crash fixes with SpawnRegions

2001-08-23 22:46  seank

	* ChangeLog, uox3.h:
	minor linux fix for ioctl

2001-08-23 22:07  darkangelab

	* SEFunctions.cpp, cAccount.cpp, cAccount.h, cBaseObject.h,
	cBaseobject.cpp, cChar.cpp, cChar.h, cItem.cpp, cItem.h,
	cMultiObj.cpp, cServerData.cpp, cServerData.h,
	cServerDefinitions.cpp, cSocket.cpp, cSocket.h, cWeather.cpp,
	cmdtable.cpp, fileio.cpp, funcdecl.h, hash.cpp, items.cpp,
	mapstuff.cpp, network.cpp, network.h, npcs.cpp, speech.cpp,
	teffect.h, trigger.cpp, typedefs.h, uox3.cpp, uox3.h:
	Overall clean up and tidy ups
	Removed the need for typedef'ing UINT, INT, UCHAR, CHAR, and TCHAR,
	making use of their UI32 and such equivalents
	Removed some of the need for #ifdef'ing (removing about 20
	references to it)

2001-08-23 22:06  seank

	* Makefile.am, Makefile.in:
	added cSpawnRegion.cpp to the makefile

2001-08-23 19:56  darkangelab

	* packets.cpp, packets.h:
	Due to Beniam's information, been able to implement an input packet
	class to handle packet 0xC8

2001-08-23 18:33  darkangelab

	* itemhandler.cpp, xgm.cpp:
	Updated xGM who packet, so that it properly reflects those who are
	logging out / offline
	Item handler now throws an exception (for debugging purposes) if a
	valid items[] number is used, but the object is NULL

2001-08-22 21:15  darkangelab

	* cItem.cpp, charhandle.cpp, handlers.h, itemhandler.cpp,
	items.cpp, uox3.cpp:
	CItem destructor does meaningful work now (and simplifies
	DeleItem())
	Item and Char handlers now clean themselves up programmatically,
	rather than automatically
	Bit of code cleanliness

2001-08-22 20:21  darkangelab

	* cChar.cpp, cItem.cpp, cMultiObj.cpp, charhandle.cpp,
	cmdtable.cpp, html.cpp, itemhandler.cpp, items.cpp, npcs.cpp,
	sound.cpp, targeting.cpp, uox3.cpp:
	Clean ups / tidy ups to various sections of code
	Fixed the summon daemon death crash that was occurring
	Changed deathstuff to not use invalid pointers after character
	deletion

2001-08-22 19:15  toinzane

	* UOX3_Official.dsp:
	Added cSpawnRegion.cpp and cSpawnRegion.h to the project file.

2001-08-22 19:12  toinzane

	* cSpawnRegion.cpp, cSpawnRegion.h:
	Implemented cSpawnRegion

2001-08-22 19:04  toinzane

	* SEFunctions.cpp, UOX3_Official.dsp, cChar.cpp, classes.h,
	cmdtable.cpp, commands.cpp, commands.h, funcdecl.h, globals.cpp,
	items.cpp, necro.cpp, npcs.cpp, regions.cpp, targeting.cpp,
	townregion.cpp, uox3.cpp, uox3.h, uoxstruct.h:
	Many fixes / cleanups with spawnregions.
	Broke spawnregions into their own class cSpawnRegion.
	Minor fixes / cleanups.

2001-08-21 20:10  darkangelab

	* npcs.cpp:
	Updated DeleteChar() to reduce need to call calcCharFromSer, fixing
	a potential delete bug

2001-08-21 19:38  darkangelab

	* globals.cpp, items.cpp, uox3.h:
	Removed an unnecessary global variable
	Tidied up DeleItem() a little

2001-08-21 19:32  darkangelab

	* cGuild.cpp, cGuild.h, items.cpp:
	gList is now a map< GuildID, CGuild * > instead of vector< CGuild *
	>
	This allows for nonsequential guild numbers, and solves a guild
	removal bug
	Fixed a bug where characters were never actually removed from their
	guild
	Fixed up DeleItem so that items.Delete() is called with a proper
	var (as well as ispawnsp.Remove())

2001-08-21 17:24  toinzane

	* cGuild.cpp:
	Fixed some bad loops in CGuild (Should fix several crash bugs with
	guildstones)

2001-08-21 15:07  toinzane

	* cAccount.cpp, network.cpp:
	Fixed auto-account creation bug (Thanks Fixit)

2001-08-21 06:44  toinzane

	* cGuild.cpp, gumps.cpp:
	Guildstones are now properly removed when last member resigns.
	Fixed resign code so players who aren't in a guild can't resign
	(thus crashing the server).
	Fixed some possible endless loops.
	Resized new tweak menus a bit.

2001-08-21 02:34  darkangelab

	* funcdecl.h, trigger.cpp, typedefs.h, xgm.cpp:
	Removed some dead and unused code
	Updated some documentation in xgm.cpp

2001-08-20 19:18  darkangelab

	* cAccount.cpp, network.cpp, pcmanage.cpp, typedefs.h, uox3.cpp,
	xgm.cpp, xgm.h:
	Added in Access Level Change Request and Response for xGM (courtesy
	of JoeMC)
	Added who's offline support
	ACTREC's inworld is now a SERIAL instead of a char index, allowing
	for better speed and flexibility
	General code clean up / tidy ups
	Must be online or an NPC to sustain hunger damage or change of
	hunger status

2001-08-20 14:22  toinzane

	* gumps.cpp:
	Documented gumps.cpp

2001-08-20 13:52  toinzane

	* gumps.cpp:
	Removed an un-needed debug message.

2001-08-20 13:09  toinzane

	* cGuild.cpp, cItem.cpp, cItem.h, cScript.cpp, cmdtable.cpp,
	commands.cpp, funcdecl.h, gump.h, gumps.cpp, items.cpp, queue.cpp,
	skills.cpp, targeting.cpp, townregion.cpp, wholist.cpp:
	Removed ItemHand() stuff entirely, (This will cause your worldfile
	to report invalid tags, this is normal, just save and reload the
	world file).
	Completely re-wrote the tweak menu. Divided it into two seperate
	menus (Items and Characters) Looks much nicer, has far more
	functionality, and is much easier to modify now.
	Misc minor cleanups

2001-08-19 21:15  darkangelab

	* uox3.h:
	Version 0.95.04

2001-08-19 18:56  darkangelab

	* cServerData.cpp, cServerData.h, globals.cpp, network.cpp, uox3.h:

	Updated so that UOX_PORT is no longer required
	GetServerPort and SetServerPort modify an internal listen port
	Listen port now binds to GetServerPort of cServerData
	Reads server.scp before uox3.ini now, to ensure proper PORTness

2001-08-19 17:49  darkangelab

	* xgm.cpp:
	Fixed a client version receive crash bug

2001-08-19 17:30  darkangelab

	* xgm.cpp:
	Updated GMLoggedIn and CnsLoggedIn to actually properly return the
	GMs / Counselors logged in rather than the total number of them

2001-08-17 17:33  toinzane

	* cBaseobject.cpp, cGuild.cpp, packets.cpp:
	Weblaunch bug fixed.
	Fixed guild name crash bug (caused by long guild names).
	Changed Guildmaster Title length to max 15 characters. (was only 3
	characters)

2001-08-17 16:23  toinzane

	* boats.cpp, cServerData.cpp, cServerData.h, movement.cpp,
	skills.cpp, uox3.cpp:
	Cleaned up checkauto() and broke it down into more functions to
	improve speed / readability.
	Fixed boats dissapearing bug.
	Got rid of BEGGINGTEXT stuff in favor of dictionary entries.
	Misc minor cleanups / fixes.

2001-08-16 22:51  toinzane

	* targeting.cpp:
	Fixed a minor (stupid) bug with my latest source.

2001-08-16 21:27  toinzane

	* targeting.cpp, targeting.h:
	Removed some unneeded code.

2001-08-16 21:18  toinzane

	* cServerDefinitions.cpp, npcs.cpp, targeting.cpp, targeting.h,
	uox3.cpp:
	Minor cleanups in targeting.
	Added support for CARVE.scp using the groundwork Abaddon put in
	earlier. (note this requrires you add a new /carve/ dir in
	/dfndata/ and put the carve.scp from the scripts CVS in it.)
	Misc minor cleanups.

2001-08-16 18:46  darkangelab

	* xgm.cpp:
	Server version response actually sends the real version and not 0

2001-08-16 18:15  darkangelab

	* xgm.cpp:
	Fixed a crash bug when trying to get a serverstat and the object
	was being destroyed

2001-08-16 14:10  toinzane

	* combat.cpp, combat.h, funcdecl.h, skills.cpp, uox3.cpp:
	Fixed up guards and guard spawning;
	Will no longer attack the person who called guards.
	Now ensures there's no other guard (who isn't busy) in the area
	before spawning a new guard.
	Guards will no longer dissapear while in the midst of battle.
	Misc minor cleanups.

2001-08-15 18:44  toinzane

	* cAccount.cpp, uox3.cpp:
	Minor fix in cAccounts.cpp.
	More error-checking added to checkRegion()

2001-08-15 14:03  seank

	* xgm.cpp:
	Updated xgm perl stuff a bit..

2001-08-15 13:08  toinzane

	* cAccount.cpp, cAccount.h, cChar.cpp, funcdecl.h, movement.cpp,
	pcmanage.cpp, uox3.cpp, wholist.cpp, xgm.cpp:
	Fixed the 'footsteps' bug.
	Fixed a bug when accountflush was set > 0
	Minor cleanups in how accounts are looped through.
	Minor bugfix to startChar().
	Cleaned up checkRegion().

2001-08-14 22:51  darkangelab

	* cSocket.cpp, xgm.cpp, xgm.h:
	Fixed non XGM client login bug
	Generic clean ups / tidy ups

2001-08-14 22:15  darkangelab

	* network.cpp, network.h, pcmanage.cpp, uox3.cpp:
	setLastOn takes a cSocket * instead of a UOXSOCKET
	Cleaned up some startChar() code to work correctly
	Corrected a checkregion() bug that did an invalid pack check

2001-08-14 21:39  toinzane

	* cSocket.cpp, network.h, skills.cpp:
	Linux compile fixes (Thanks seank / Kot )
	GM's can now gain skill.

2001-08-14 21:06  darkangelab

	* SEFunctions.cpp, SEFunctions.h, UOX3_Official.dsp, cScript.cpp:
	Added Get/Set More XYZ
	Moved jail.cpp and jail.h into subsystem folders

2001-08-14 08:55  toinzane

	* cItem.cpp, combat.cpp, items.cpp, typedefs.h, uox3.cpp,
	vendor.cpp:
	Added MAX_STACK to determine how large stackables can be set.
	Moved AutoStacking into its own function.
	Broke dropItem() into two functions, dropItem() and
	dropItemOnChar().
	Fixed a combat bug that could cause NPC's to never swing at their
	target.
	Misc minor cleanups.

2001-08-13 19:01  darkangelab

	* cItem.cpp:
	Updated SetCont so that items won't disappear oddly (and they will
	still be saved)

2001-08-13 18:53  toinzane

	* cChar.cpp, items.cpp, targeting.cpp, uox3.cpp:
	Fixed some issues with item Layers.
	Depreciated usage of ITEMHAND in favor of LAYER.
	Cleaned up wearItem() a bit.
	Misc minor cleanups.

2001-08-13 17:48  darkangelab

	* Dictionary.cpp, cSocket.cpp, effect.cpp, enums.h, magic.cpp,
	network.h, speech.cpp, speech.h, uox3.cpp:
	Cleaned up some dead code / unreachable code / useless code
	Added distinct language support, collapsing all english flavours
	into a single file, all german into a single file, and so on
	Now require only roughly half a dozen dictionary files

	==================
	Copy dictionary.zro from the scripts/release archive to scripts/ in
	the installed directory.  Duplicate it and rename the duplicates to
	have extensions of UNK and ENG

2001-08-13 15:26  toinzane

	* dist.cpp, uox3.cpp:
	Minor bugfix in checkItemRange()
	Cleaned up grabItem().

2001-08-12 19:40  toinzane

	* boats.cpp, classes.h, npcs.cpp, pcmanage.cpp:
	Added some NULL checks for added crash protection.
	Gave Zippy credit for boats.cpp functions.
	Documented AddNpcCreation().

2001-08-11 09:19  toinzane

	* ai.cpp, classes.h, combat.cpp, funcdecl.h, lineofsight.cpp,
	magic.cpp, movement.cpp, movement.h, skills.cpp, targeting.cpp:
	NPC's no longer loose their targets as easily.
	Change line_of_sight to LineOfSight() and fixed it up a bit.
	Misc minor cleanups.

2001-08-10 14:48  toinzane

	* cChar.cpp, combat.cpp, effect.cpp, movement.cpp, movement.h:
	Fixed a bug causing bandages not to be used up and spit out an
	invalid item refrence.
	Added a check so a player cannot use any fighting skill while
	running or walking, if they are walking, they will begin fighting
	as soon as they stop, if they are running, they must wait a short
	amount of time (scriptable based on stamina_regen).
	Attackers now turn to face their opponent in combat if they are not
	already.
	Misc minor cleanups.

2001-08-10 09:36  toinzane

	* combat.cpp, items.cpp, magic.cpp, movement.cpp, necro.cpp,
	npcs.cpp, pcmanage.cpp, sound.cpp, targeting.cpp, uox3.cpp:
	Added a check so archers cannot fire arrows while running.
	Added a distance check so archers must be 2 or more tiles from
	their targets.
	Fixed a crash bug when using a 'make command on an offline
	character
	Several minor bugfixes.
	Moved around some code in combat.cpp to speed up processing a bit.
	Moved a few funcs out of uox3.cpp to files better suited for them.
	Misc minor cleanups.

2001-08-09 20:49  darkangelab

	* network.cpp, xgm.cpp:
	Fixed some cPIXGMLogin bugs
	Automatically flushes the xGM buffers now

2001-08-09 08:06  toinzane

	* SEFunctions.cpp, cChar.cpp, cChar.h, cClick.cpp, cScript.cpp,
	effect.cpp, funcdecl.h, gumps.cpp, house.cpp, mapstuff.cpp,
	mapstuff.h, pcmanage.cpp, sound.cpp, targeting.cpp:
	More object conversions done.
	Fixed a bug in checktempeffects() that would cause any tempeffect
	without a character as the dest to fail.

2001-08-08 20:16  darkangelab

	* cClick.cpp, items.cpp, speech.cpp:
	Proper use of GetOwner() and GetOwnerObj() (fixing few crashes)
	Tidied up doubleClick a little more

2001-08-08 15:28  toinzane

	* cClick.cpp:
	Fixed a bug with doubleclick not opening players paperdolls

2001-08-08 14:23  toinzane

	* ai.cpp, books.cpp, books.h, cClick.cpp, cGuild.cpp, cmdtable.cpp,
	commands.cpp, commands.h, funcdecl.h, gump.h, gumps.cpp, html.cpp,
	jail.cpp, necro.cpp, network.cpp, speech.cpp, targeting.cpp,
	uox3.cpp, vendor.cpp:
	Many more object conversions.

2001-08-08 09:26  toinzane

	* SEFunctions.cpp, cClick.cpp, cItem.cpp, cMagic.h, calcfuncs.cpp,
	combat.cpp, commands.cpp, commands.h, effect.cpp, findfuncs.cpp,
	funcdecl.h, gumps.cpp, house.cpp, items.cpp, magic.cpp,
	movement.cpp, necro.cpp, network.cpp, skills.cpp, targeting.cpp,
	uox3.cpp, vendor.cpp:
	Many more object conversions, further depreciated &items[] and
	calcItemFromSer() usage.

2001-08-08 08:15  toinzane

	* cItem.cpp, classes.h, npcs.cpp, speech.cpp, targeting.cpp:
	Cleaned up pet command code.
	Added new func stopPetGuarding() to simplify some code.
	Fixed a bug causing a crash on death (was trying to set a long to a
	CChar * )
	Misc minor cleanups.

2001-08-07 23:23  darkangelab

	* cItem.cpp, funcdecl.h, items.cpp, magic.cpp, quantityfuncs.cpp,
	skills.cpp, targeting.cpp, uox3.cpp:
	Cleaned up some more code
	Removed some redundant code
	Reduced the need of &items[] style code

2001-08-07 22:33  darkangelab

	* cClick.cpp, dist.cpp, targeting.cpp, uox3.cpp:
	Used GetOwnerObj() where possible
	Cleaned up doubleClick() a little more
	General code tidy ups

2001-08-07 22:16  darkangelab

	* SEFunctions.cpp, speech.cpp, targeting.cpp, targeting.h:
	BuyShop updated to take a CChar *
	Generic code cleanups

2001-08-07 22:01  darkangelab

	* cMagic.h, magic.cpp, skills.cpp:
	CheckStamina(), CheckMana() and CheckHealth() now use CChar *
	instead of CHARACTER
	DirectDamage was removed
	CheckParry for CHARACTER was removed
	Log() for magic was updated to use CChar * instead of CHARACTER
	Other minor code clean up / tidy ups

2001-08-07 21:42  darkangelab

	* cMagic.h, magic.cpp:
	Removed PFireballTarget as it was never used
	Removed an unnecessary version of CheckResist

2001-08-07 21:35  darkangelab

	* targeting.cpp:
	Converted MakeStatusTarget() to make use of CChar * instead of
	CHARACTER

2001-08-07 20:22  darkangelab

	* cChar.cpp, cMagic.h, cWeather.cpp, cWeather.hpp, combat.cpp,
	commands.cpp, commands.h, effect.cpp, funcdecl.h, magic.cpp,
	npcs.cpp, pcmanage.cpp, targeting.cpp, townregion.cpp,
	townregion.h, uox3.cpp:
	Removed some need for calcCharFromSer
	Converted some funcs to use CChar * instead of CHARACTER
	Cleaned up some code to make it more readable
	Reduced dependence on &chars[] style code

2001-08-07 19:27  darkangelab

	* SEFunctions.cpp, cmdtable.cpp, combat.cpp, commands.cpp,
	effect.cpp, speech.cpp, targeting.cpp, townregion.cpp,
	townregion.h, trade.cpp, uox3.cpp, vendor.cpp:
	Fixed a duping bug
	Removed more uses of calcCharFromSer
	Optimized some code

2001-08-07 18:38  toinzane

	* cClick.cpp, cmdtable.cpp, commands.cpp, gumps.cpp, magic.cpp,
	movement.cpp, msgboard.cpp, network.cpp, skills.cpp, targeting.cpp,
	uox3.cpp:
	Changed many sysmessage() messages to dict entries (make sure you
	update your dictionary.zro)

2001-08-07 18:12  darkangelab

	* gumps.cpp, packets.cpp, skills.cpp, uox3.cpp:
	Updated CPTrackingArrow to reset properly on one constructor
	Updated tracking code so that the menus work correctly again
	Minor clean ups

2001-08-07 17:40  toinzane

	* cGuild.cpp, cmdtable.cpp, commands.cpp, house.cpp, html.cpp,
	im.cpp, msgboard.cpp, network.cpp, speech.cpp, targeting.cpp,
	uox3.cpp, wholist.cpp:
	Added crash protection to unsafe CurrcharObj() calls.

2001-08-07 17:17  darkangelab

	* effect.cpp, uox3.cpp:
	Allmight's night sight fixes

2001-08-07 17:13  darkangelab

	* SEFunctions.cpp, cRaces.cpp, cRaces.h, cmdtable.cpp, effect.cpp,
	funcdecl.h, skills.cpp, uox3.cpp:
	Converted cRaces::gate to use a CChar * instead of a CHARACTER, and
	bool instead of an int
	Miscellaneous other cleanups
	Removed the CHARACTER based version of statwindow()

2001-08-07 15:47  toinzane

	* uox3.cpp:
	Linux compile fixes.

2001-08-07 15:19  toinzane

	* targeting.h:
	Fixed yet another linux compile issue.

2001-08-07 13:47  toinzane

	* combat.cpp:
	Fixed a Linux compile problem.

2001-08-07 12:50  toinzane

	* SEFunctions.cpp, ai.cpp, cGuild.cpp, cMagic.h, cWeather.cpp,
	cmdtable.cpp, commands.cpp, gumps.cpp, house.cpp, im.cpp,
	items.cpp, magic.cpp, msgboard.cpp, necro.cpp, network.cpp,
	skills.cpp, townregion.cpp, uox3.cpp, wholist.cpp:
	Depreciated Currchar() usage almost entirely.
	Misc minor cleanups.

2001-08-07 11:23  toinzane

	* SEFunctions.cpp, ai.cpp, cChar.cpp, cClick.cpp, cMagic.h,
	cWeather.cpp, calcfuncs.cpp, classes.h, combat.cpp, door.cpp,
	funcdecl.h, gumps.cpp, html.cpp, magic.cpp, movement.cpp,
	network.cpp, newbie.cpp, pcmanage.cpp, skills.cpp, speech.cpp,
	targeting.cpp, uox3.cpp, vendor.cpp, wholist.cpp:
	Many object conversions done.
	Misc minor cleanups.

2001-08-07 10:31  toinzane

	* classes.h, itemhandler.cpp, items.cpp, uox3.cpp:
	Minor cleanups in items.cpp
	Removed a superfluous function.
	Fixed an issue with pet guarding.

2001-08-07 09:43  toinzane

	* SEFunctions.cpp, cClick.cpp, classes.h, combat.cpp, magic.cpp,
	npcs.cpp:
	Changed AddRandomNPC() to CreateRandomNpc().
	Removed some superfluous code.
	Minor cleanups.

2001-08-06 23:43  toinzane

	* cClick.cpp, classes.h, combat.cpp, funcdecl.h, magic.cpp,
	npcs.cpp, targeting.cpp, targeting.h, uox3.cpp:
	Broke NpcCreation() in npcs.cpp into two functions (
	CreateScriptNpc() and ApplyNpcSection ).
	Fixed up AddRandomNpc() to work with new NpcCreation() format.
	Converted npcs.cpp to object-based.
	Misc minor cleanups.

2001-08-06 21:23  toinzane

	* mapstuff.cpp, npcs.cpp:
	Fixed up AddRandomNPC().
	Changed BuldFilePath() in mapstuff.cpp to use MAX_PATH.

2001-08-06 20:31  darkangelab

	* classes.h, items.cpp:
	CreateRandomItem is cleaned up / more efficient
	CreateRandomScriptItem now returns a CItem * instead of an ITEM
	CreateRandomScriptItem should no longer crash
	Both CreateRandomItem and CreateRandomScriptItem no longer have
	hard coded limits

2001-08-06 18:40  darkangelab

	* cScript.cpp, magic.cpp, uox3.cpp:
	Tidy up / clean up of some script code
	The JS context scripts execute within are now 8k in size, rather
	than 4k

2001-08-06 17:39  darkangelab

	* SEFunctions.cpp, boats.cpp, cClick.cpp, cGuild.cpp, cGuild.h,
	funcdecl.h, gumps.cpp, skills.cpp, speech.cpp, targeting.cpp,
	townregion.cpp, townregion.h, uox3.cpp:
	Added dictionary friendly versions of cTownRegion::TellMembers,
	CGuild::TellMembers, npcEmote and npcEmoteAll
	Converted more functions to use dictionary funcs instead
	Tidied up speech in boats.cpp, making it more readable (but
	potentially sacrificing a bit of speed)
	General code clean up / tidy up

2001-08-06 16:00  toinzane

	* classes.h, cmdtable.cpp, combat.cpp, magic.cpp, msgboard.cpp,
	network.cpp, npcs.cpp, skills.cpp, speech.cpp, targeting.cpp,
	targeting.h:
	Cleaned up some dictionary calls.
	Added pet FRIEND command, can now add people to pets friend list
	(currently capped at 20, may adjust later).
	Changed checkPetFriend() to a bool.
	Adjusted petGuardAttack() so pets will not attack friends.
	Misc minor cleanups.

2001-08-06 13:14  toinzane

	* SEFunctions.cpp, cClick.cpp, classes.h, cmdtable.cpp, combat.cpp,
	combat.h, commands.cpp, enums.h, funcdecl.h, items.cpp, magic.cpp,
	movement.cpp, msgboard.cpp, msgboard.h, necro.cpp, npcs.cpp,
	regions.cpp, skills.cpp, speech.cpp, uox3.cpp, uox3.h:
	Converted msgboard.cpp functions to make use of cSocket and CChar.
	Converted some npcs.cpp functions to make use of CChar and CItem.
	Slowed down damage rate on Weapons/Armor in combat.
	Misc minor cleanups.

2001-08-06 08:16  toinzane

	* SEFunctions.cpp, ai.cpp, boats.cpp, cClick.cpp, combat.cpp,
	combat.h, door.cpp, effect.cpp, funcdecl.h, magic.cpp,
	msgboard.cpp, necro.cpp, skills.cpp, speech.cpp, targeting.cpp,
	uox3.cpp, vendor.cpp:
	More cleanups / fixes in combat.cpp
	Added Dictionary-Safe overloads of npcTalk() and npcTalkAll().

2001-08-05 21:01  darkangelab

	* combat.cpp:
	Slight clean up / tidy up
	Adjusted 2 sysmessage calls

2001-08-05 19:49  toinzane

	* cServerData.cpp, combat.cpp, combat.h, magic.cpp, uox3.cpp,
	weight.cpp:
	MAJOR Overhaul to Combat (When the system is completed I'll write
	up a Doc on it).
	Minor fixes.
	Fixed a Recall / Weight Check bug.

2001-08-05 19:34  darkangelab

	* uox3.h:
	Updated build number

2001-08-05 19:30  darkangelab

	* cChar.cpp, uox3.cpp:
	Fixed regen problems with NPCs/PCs
	Meditation overhaul by Spud allowing for better behaviour / greater
	complexity

2001-08-04 19:21  darkangelab

	* SEFunctions.cpp, cClick.cpp, cMagic.h, cWeather.cpp,
	cmdtable.cpp, combat.cpp, funcdecl.h, jail.cpp, magic.cpp,
	movement.cpp, npcs.cpp, skills.cpp, sound.cpp, speech.cpp,
	targeting.cpp, uox3.cpp, wholist.cpp:
	Generic code clean ups / tidy ups
	Converted more functions to use CChar * and CItem *
	Reduced calls to calcCharFromSer
	Used calcCharObjFromSer more in targeting.cpp

2001-08-04 12:49  toinzane

	* SEFunctions.cpp, cClick.cpp, combat.cpp, effect.cpp, gumps.cpp,
	skills.cpp, skills.h, uox3.cpp:
	Fixed a small issue with NPCs in combat.
	Converted skills.cpp functions to object-based.
	Misc minor cleanups.

2001-08-03 23:09  darkangelab

	* combat.cpp, skills.cpp, trade.cpp:
	Cleaned up some usage of sysmessage

2001-08-03 21:53  toinzane

	* SEFunctions.cpp, cMagic.h, funcdecl.h, house.cpp, magic.cpp,
	movement.cpp, movement.h, network.cpp, uox3.cpp:
	Converted movement.cpp functions to object-based.
	Further depreciated Currchar().
	Misc minor cleanups.

2001-08-03 19:48  toinzane

	* combat.cpp, movement.cpp:
	NPC Combat sounds now play.
	Major lag fix for NPC's in combat.

2001-08-03 17:43  toinzane

	* cClick.cpp, cWeather.cpp, combat.cpp, effect.cpp, magic.cpp,
	movement.cpp, npcs.cpp, uox3.cpp:
	Fixed NPC spawning.
	Fixed a crash for NPCs spellcasting during combat.
	Fixed NPC archers producing an invalid socket error.
	Several nasty crash bugs fixed.
	Removed many -1 character refrence warnings.

2001-08-03 13:30  toinzane

	* cChar.cpp, cGuild.cpp, combat.cpp, commands.cpp, effect.cpp,
	funcdecl.h, gumps.cpp, items.cpp, magic.cpp, msgboard.cpp,
	necro.cpp, network.cpp, skills.cpp, skills.h, targeting.cpp,
	uox3.cpp, vendor.cpp:
	Many object conversions done, far less usage of calcItemFromSer().
	Cleaned up msgboard.cpp.
	Misc minor cleanups.

2001-08-02 18:39  darkangelab

	* enums.h, speech.cpp, speech.h:
	Added all the Unicode language codes I could find.  Please note
	that as much as we track them now, we still don't put them in when
	sending speech
	Also, not all of those language codes will be translatable.

	TO DO
	======
	All english and other languages have commonality.  Alter dictionary
	so that all english is from one file, all german from another, and
	so on

2001-08-02 17:37  darkangelab

	* Dictionary.cpp, cServerDefinitions.cpp, cSocket.cpp,
	cmdtable.cpp, commands.cpp, fileio.cpp, im.cpp, jail.cpp,
	magic.cpp, mapstuff.cpp, regions.cpp, skills.cpp, speech.cpp,
	trigger.cpp, uox3.cpp:
	Source code clean up / tidy up
	All filenames that build a path now use MAX_PATH, and should help
	resolve some crashes

2001-08-02 16:46  darkangelab

	* ai.cpp, boats.cpp, cChar.cpp, cClick.cpp, classes.h, house.cpp,
	items.cpp, magic.cpp, pcmanage.cpp, uox3.cpp:
	Removed some redundant code sequences
	Changed '\xaa' type code to 0xaa type code (fixed one boat issue
	previously)
	Generic clean up / tidy up

2001-08-02 16:08  toinzane

	* combat.cpp, uox3.cpp:
	Fixed some -1 Character refrence warnings

2001-08-02 15:22  toinzane

	* SEFunctions.cpp, cItem.cpp, cMultiObj.cpp, calcfuncs.cpp,
	funcdecl.h, items.cpp, network.cpp, npcs.cpp, pcmanage.cpp,
	regions.cpp, speech.cpp, targeting.cpp, uox3.cpp, vendor.cpp:
	Fixed a VERY nasty bug caused by one of my earlier commits.
	More object conversions done.

2001-08-02 12:15  toinzane

	* classes.h, cmdtable.cpp, funcdecl.h, network.cpp, npcs.cpp,
	pcmanage.cpp, trade.cpp, uox3.cpp:
	Fixed a nasty crash bug caused by adding NPC's
	More object conversions

2001-08-02 08:37  toinzane

	* SEFunctions.cpp, boats.cpp, cClick.cpp, cItem.cpp, cWeather.cpp,
	classes.h, cmdtable.cpp, combat.cpp, commands.cpp, effect.cpp,
	funcdecl.h, gumps.cpp, house.cpp, html.cpp, items.cpp, magic.cpp,
	movement.cpp, necro.cpp, network.cpp, npcs.cpp, pcmanage.cpp,
	quantityfuncs.cpp, regions.cpp, skills.cpp, skills.h, speech.cpp,
	targeting.cpp, targeting.h, townregion.cpp, trade.cpp, uox3.cpp,
	vendor.cpp, wholist.cpp:
	More object conversions.
	Removed superfluous functions.
	Further depreciated Currchar().
	Minor code cleanups.

2001-08-01 19:06  darkangelab

	* classes.h, uox3.h, xgm.cpp, xgm.h:
	Updated xgm.h to no longer define cRemote
	xgm.h now contains the class definitions for incoming / outgoing
	xgm packets
	Implemented incoming xGM packets 0x02, 0x08 and 0x09

2001-08-01 18:07  darkangelab

	* boats.cpp, cBaseobject.cpp, cChar.cpp, cChar.h, npcs.cpp,
	targeting.cpp:
	Fixed bug #446633 (boat exiting - mount copied)
	Slight tidy up / clean ups
	Fixed an invalid reference bug with IncX and IncY
	Fixed a potential boat turning / movement bug

2001-08-01 16:59  toinzane

	* combat.cpp, movement.cpp:
	Fixed a bug allowing people to do melee combat from a distance.
	Added error checking to PathFind() to kill bad direction errors.

2001-08-01 15:43  toinzane

	* SEFunctions.cpp, ai.cpp, cClick.cpp, cRaces.cpp, cWeather.cpp,
	cmdtable.cpp, combat.cpp, commands.cpp, dist.cpp, door.cpp,
	effect.cpp, funcdecl.h, gumps.cpp, magic.cpp, movement.cpp,
	skills.cpp, sound.cpp, speech.cpp, targeting.cpp, uox3.cpp:
	Many more cleanups and object conversions.
	Removed some superfluous functions.

2001-08-01 11:46  toinzane

	* SEFunctions.cpp, cClick.cpp, door.cpp, effect.cpp, funcdecl.h,
	movement.cpp, skills.cpp, sound.cpp, uox3.cpp:
	More object conversions

2001-08-01 11:07  toinzane

	* cClick.cpp, door.cpp, globals.cpp:
	Fixed a bug that would cause some items to spit out a slew of -1
	refrences when doubleclicked.
	Fixed doors so they open properly, and a possible invalid socket
	error.

2001-07-30 20:25  darkangelab

	* cAccount.cpp, cWeather.cpp, cWeather.hpp, xgm.cpp:
	Updated cWeather.hpp to use R32 and UI08 instead of float and
	unsigned char
	Added Count() to cWeatherAb
	Documented a number of functions in cWeather.cpp
	Added XGM output packet 0x12 / input packet 0x0F implementations

2001-07-30 18:49  toinzane

	* SEFunctions.cpp, boats.cpp, cClick.cpp, cGuild.cpp, cRaces.cpp,
	classes.h, cmdtable.cpp, combat.cpp, commands.cpp, effect.cpp,
	funcdecl.h, house.cpp, items.cpp, magic.cpp, movement.cpp,
	necro.cpp, newbie.cpp, npcs.cpp, pcmanage.cpp, skills.cpp,
	targeting.cpp, trade.cpp, uox3.cpp:
	Converted SpawnItem() and SpawnItemToPack() to object-based
	Minor code cleanups

2001-07-29 17:57  darkangelab

	* uox3.h:
	Updated version information

2001-07-26 02:38  darkangelab

	* uox3.cpp:
	Initialized a variable to prevent errors

2001-07-26 01:01  darkangelab

	* commands.cpp, funcdecl.h, quantityfuncs.cpp, targeting.cpp:
	Code tidy up, redundancy removal
	Fixed a slight duping bug

2001-07-25 22:29  toinzane

	* SEFunctions.cpp, ai.cpp, cChar.cpp, combat.cpp, funcdecl.h,
	magic.cpp, npcs.cpp, pcmanage.cpp, skills.cpp, skills.h,
	targeting.cpp, uox3.cpp:
	More object conversions.
	Moved npcAttackTarget() and npcSimpleAttackTarget() to combat.cpp.
	Further depreciated Currchar() usage.

2001-07-25 15:34  toinzane

	* combat.cpp, combat.h, lineofsight.cpp, npcs.cpp, skills.cpp,
	uox3.cpp:
	Consolidated weapon ID code in combat.cpp
	Fixed a crash bug in combat.
	Fixed some combat animation bugs.
	Minor code cleanups and bugfixes.

2001-07-25 10:36  toinzane

	* SEFunctions.cpp, ai.cpp, cClick.cpp, cMagic.h, combat.cpp,
	commands.cpp, effect.cpp, funcdecl.h, magic.cpp, magic.h,
	movement.cpp, npcs.cpp, skills.cpp, targeting.cpp, targeting.h,
	uox3.cpp:
	Converted all functions in magic.cpp to object-based.
	Fixed a possibly nasty bug with adding NPC's.
	Minor code cleanups.

2001-07-25 08:15  toinzane

	* effect.cpp, funcdecl.h, house.cpp, lineofsight.cpp, magic.cpp,
	movement.cpp, movement.h, network.cpp, skills.cpp, sound.cpp,
	speech.cpp, targeting.cpp, trade.cpp, uox3.cpp, vendor.cpp:
	Removed some superfluous functions.
	Changed many UOXSOCKET calls to cSocket calls.
	Minor code cleanups.

2001-07-24 23:16  toinzane

	* SEFunctions.cpp, boats.cpp, boats.h, funcdecl.h, house.cpp,
	speech.cpp, uox3.cpp:
	Removed some superfluous functions.
	Minor code cleanups.

2001-07-24 22:15  toinzane

	* SEFunctions.cpp, boats.cpp, boats.h, cClick.cpp, cItem.cpp,
	funcdecl.h, house.cpp, items.cpp, magic.cpp, movement.cpp,
	network.cpp, speech.cpp, targeting.cpp, uox3.cpp:
	Converted boats.cpp functions to object-based.
	Moved findMulti, inMulti, and sendInRange() to uox3.cpp.
	Documented all functions in boats.cpp.
	Changed cBoats:: Turn, Move, and Build to TurnBoat, MoveBoat, and
	CreateBoat respectively.
	Minor code cleanups.

2001-07-24 20:44  darkangelab

	* jail.cpp, jail.h:
	Jail system now reads in it's saved data

2001-07-24 20:17  darkangelab

	* jail.cpp:
	Added customized jail locations

2001-07-24 19:59  darkangelab

	* boats.cpp, cmdtable.cpp, cmdtable.h, funcdecl.h, npcs.cpp,
	pcmanage.cpp, speech.cpp, speech.h, targeting.cpp, targeting.h:
	Updated itemtalk() and itemmessage() to add in delay support
	Corrected the crash where an invalid dictionary reference would
	crash the server
	Added the 'deletechar command to delete a PC
	Updated cCharStuff::DeleteChar() to fix the account reference for a
	PC

2001-07-24 19:07  darkangelab

	* SEFunctions.cpp:
	Fixed SE_CommandDetails()
	Implemented SE_GetLightLevel() properly
	Did source cleanup / tidy ups
	Added many debugging messages
	Fixed SE_CalcRank()

2001-07-24 09:59  toinzane

	* SEFunctions.cpp, ai.cpp, boats.cpp, cClick.cpp, combat.cpp,
	dist.cpp, effect.cpp, funcdecl.h, items.cpp, magic.cpp,
	movement.cpp, msgboard.cpp, necro.cpp, pcmanage.cpp, skills.cpp,
	speech.cpp, targeting.cpp, uox3.cpp, vendor.cpp:
	Removed some superfluous functions
	More object conversions
	Renamed backpack() to openPack()
	Minor code cleanups

2001-07-23 21:25  darkangelab

	* SEFunctions.cpp, ai.cpp, boats.cpp, cBaseobject.cpp, cChar.cpp,
	cClick.cpp, cGuild.cpp, cGuild.h, cItem.cpp, cMultiObj.cpp,
	cSocket.cpp, commands.cpp, effect.cpp, house.cpp, itemhandler.cpp,
	items.cpp, magic.cpp, movement.cpp, msgboard.cpp, necro.cpp,
	network.cpp, npcs.cpp, skills.cpp, speech.cpp, speech.h,
	targeting.cpp, townregion.cpp, uox3.cpp, vendor.cpp:
	Changed many references to 0xFFFFFFFF to INVALIDSERIAL

2001-07-23 21:01  darkangelab

	* items.cpp:
	Fixed a bad SpawnItemToPack bug

2001-07-23 20:48  darkangelab

	* SEFunctions.cpp, cScript.cpp, npcs.cpp:
	Updated SE_SpawnNPC function to require less variables
	Small tidy up

2001-07-23 14:58  toinzane

	* SEFunctions.cpp, ai.cpp, boats.cpp, cChar.cpp, cClick.cpp,
	cItem.cpp, cmdtable.cpp, combat.cpp, dist.cpp, door.cpp,
	effect.cpp, funcdecl.h, items.cpp, magic.cpp, movement.cpp,
	necro.cpp, npcs.cpp, skills.cpp, sound.cpp, speech.cpp,
	targeting.cpp, uox3.cpp:
	Overhauled dist.cpp, and removed many superfluous functions.
	More object conversions done.
	Minor code cleanups.

2001-07-23 08:21  toinzane

	* cChar.cpp, cItem.cpp, dist.cpp, items.cpp, magic.cpp,
	movement.cpp, pcmanage.cpp, skills.cpp, speech.cpp, targeting.cpp,
	trade.cpp, vendor.cpp, weight.cpp, weight.h:
	Overhauled weight, is now entirely object-based, also removed some
	useless functions.
	Further depreciated Currchar() use.
	Minor code cleanups.

2001-07-22 23:44  darkangelab

	* boats.cpp, cClick.cpp, cItem.cpp, cRaces.cpp, commands.cpp,
	funcdecl.h, house.cpp, items.cpp, magic.cpp, movement.cpp,
	npcs.cpp, pcmanage.cpp, pointer.cpp, skills.cpp, targeting.cpp,
	trade.cpp, uox3.cpp, vendor.cpp:
	Ripped out the guts of pointer.cpp
	Changed all calls to setserial() to what setserial() actaully does,
	thus making setserial() and unsetserial() redundant
	pointer.cpp is now deprecated

2001-07-22 22:59  toinzane

	* cClick.cpp, calcfuncs.cpp, commands.cpp, door.cpp, funcdecl.h,
	gumps.cpp, house.cpp, items.cpp, magic.cpp, network.cpp, npcs.cpp,
	pcmanage.cpp, quantityfuncs.cpp, skills.cpp, speech.cpp,
	targeting.cpp, trade.cpp, trigger.cpp, uox3.cpp, vendor.cpp,
	weight.cpp:
	Changed getPack() from an ITEM to a CItem
	Removed superfluous packitem()
	Cleaned up more Currchar()'s in favor of CurrcharObj()
	Fixed up cgold2()
	Minor code cleanups

2001-07-22 22:11  darkangelab

	* SEFunctions.cpp, boats.cpp, cChar.cpp, cChar.h, cClick.cpp,
	cRaces.cpp, cWeather.cpp, cWeather.hpp, cmdtable.cpp, combat.cpp,
	commands.cpp, effect.cpp, funcdecl.h, gumps.cpp, house.cpp,
	jail.cpp, magic.cpp, movement.cpp, network.cpp, npcs.cpp,
	pcmanage.cpp, skills.cpp, speech.cpp, targeting.cpp, uox3.cpp,
	wholist.cpp:
	Updated CChar so that the functions Teleport(), Update(),
	ExposeToView() and HideFromView() no longer need the index into the
	chars[] array
	Updated weather to take CChar * and cSocket * instead of CHARACTER
	and UOXSOCKET
	General code clean ups

2001-07-22 19:41  darkangelab

	* cWeather.cpp, lineofsight.cpp, uox3.h:
	Converted float to R32
	Added explicit cast to BuildTimeValue to remove warnings

2001-07-22 19:22  darkangelab

	* cChar.cpp:
	Sped up FirstItemObj() and NextItemObj()

2001-07-22 19:20  darkangelab

	* SEFunctions.cpp, books.cpp, cChar.cpp, cClick.cpp, cItem.cpp,
	cWeather.cpp, cmdtable.cpp, combat.cpp, commands.cpp, effect.cpp,
	funcdecl.h, globals.cpp, gumps.cpp, items.cpp, magic.cpp,
	movement.cpp, msgboard.cpp, network.cpp, npcs.cpp, skills.cpp,
	speech.cpp, targeting.cpp, townregion.cpp, uox3.cpp, uox3.h:
	Slight source tidy up / clean ups
	Removed some dead global variables
	Implemented and converted almost all uses of CLOCKS_PER_SEC to use
	the function BuildTimeValue
	Lowered dependence on script1 and script2 from a global perspective
	Fixed a potential bug in choice()
	Slightly sped up some town region loading code

2001-07-22 18:24  toinzane

	* SEFunctions.cpp, ai.cpp, boats.cpp, books.cpp, books.h,
	cBaseobject.cpp, cChar.cpp, cChar.h, cClick.cpp, cGuild.cpp,
	cItem.cpp, cMagic.h, calcfuncs.cpp, charhandle.cpp, classes.h,
	combat.cpp, combat.h, commands.cpp, dist.cpp, door.cpp, effect.cpp,
	funcdecl.h, gumps.cpp, handlers.h, house.cpp, itemhandler.cpp,
	items.cpp, magic.cpp, movement.cpp, necro.cpp, network.cpp,
	network.h, npcs.cpp, pcmanage.cpp, pointer.cpp, quantityfuncs.cpp,
	skills.cpp, skills.h, sound.cpp, speech.cpp, targeting.cpp,
	trade.cpp, uox3.cpp, vendor.cpp, weight.cpp, weight.h:
	MANY Cleanups
	Converted many functions to being object-based
	Added in preliminary support for pet friends
	Rewrote much of combat.cpp
	Changed packitem() to getPack()
	Greatly reduced Currchar() usage ( in favor of CurrcharObj() )
	Some minor possible bugfixes

2001-07-22 17:21  darkangelab

	* worldconverter/: cChar.cpp, cChar.h, cItem.cpp, globals.cpp,
	uox3.cpp, uox3.h:
	Added multiple item on layer support, to alleviate the issue with
	CONT and LAYER being around the wrong way
	Added some basic error logging
	Slight tidy ups

2001-07-22 14:30  seank

	* trigger.cpp, uox3.cpp:
	more sscanf replacements (linux only)

2001-07-22 13:29  seank

	* ChangeLog, boats.cpp, cBaseobject.cpp, cChar.cpp, cMultiObj.cpp,
	cRaces.cpp, cWeather.cpp, cWeather.hpp, cmdtable.cpp, combat.cpp,
	dist.cpp, effect.cpp, globals.cpp, itemhandler.cpp:
	removed a ton of warnings

2001-07-22 11:23  seank

	* cChar.cpp:
	Removed the ifdefs, now sstream stuff is for windows too..
	Someone verify that this method works under windows

2001-07-22 10:43  seank

	* cChar.cpp:
	More linux fixes (sstream instead of scanf)

2001-07-19 19:26  darkangelab

	* cClick.cpp, effect.cpp, funcdecl.h, necro.cpp, quantityfuncs.cpp,
	skills.cpp, uox3.cpp:
	Added DecItemAmount() which replaces a lot of repeated item code
	and adds a slight optimization

2001-07-19 18:29  darkangelab

	* network.cpp:
	Fixed a slight bug where xGM would never receive any packets

2001-07-19 18:21  darkangelab

	* combat.cpp:
	Tweaked a SERIAL check to compare against INVALIDSERIAL, and not -1

2001-07-19 18:08  darkangelab

	* cChar.cpp, magic.cpp, movement.cpp, uox3.cpp:
	Optimized Teleport() in CChar a lot, removes a lot of hash table
	lookups
	Generic code clean up / slight optimizations

2001-07-19 17:59  darkangelab

	* cChar.cpp, cChar.h, cScript.cpp, movement.cpp:
	Added OutOfRange and InRange support for characters
	Added SendToSocket( cSocket *, bool, CChar * ) to CChar
	Fixed a nasty cScript bug that would prevent events from being
	flagged as available

2001-07-19 17:26  toinzane

	* cChar.cpp, cChar.h, cClick.cpp, cItem.cpp, cItem.h, classes.h,
	cmdtable.cpp, combat.cpp, commands.cpp, commands.h, funcdecl.h,
	items.cpp, network.cpp, newbie.cpp, npcs.cpp, pcmanage.cpp,
	pointer.cpp, speech.cpp, targeting.cpp, uox3.cpp:
	Enhanced Pet Guarding (still needs work)
	Added in object support to many functions
	Many cleanups
	Documented commands.cpp

2001-07-18 22:37  darkangelab

	* enums.h, network.cpp, xgm.cpp:
	Added xGM option to ClientTypes for cSocket
	Added simple class and implementation of xGM input/output packets 0
	On accept, cSocket is set to xGM for the xgm connected sockets

	TODO
	=====
	Real authentication on xGM

2001-07-18 21:39  darkangelab

	* cChar.cpp, globals.cpp, items.cpp, magic.cpp, necro.cpp,
	pcmanage.cpp, skills.cpp, uox3.cpp, uox3.h, xgm.cpp:
	Slight code tidy ups / tweaks
	Changed hard coded 2 to a global var for GM command level
	Changed hard coded 1 to a global var for CNS command level
	Added 2 more empty packet handlers in WhichXGMPacket

2001-07-18 20:12  seank

	* cChar.cpp:
	see the start of the strtok/sscanf replacement here (stringstream)

2001-07-18 19:00  seank

	* cChar.cpp:
	temporary linux fix... strtok and sscanf misbehaving in BaseSkills
	loader

2001-07-18 15:27  seank

	* cServerData.cpp, cServerDefinitions.cpp, calcfuncs.cpp:
	Fixed the linux directory functions

2001-07-18 14:15  toinzane

	* classes.h, items.cpp:
	Cleaned up and documented items.cpp

2001-07-18 12:29  toinzane

	* calcfuncs.cpp, cmdtable.cpp, door.cpp, funcdecl.h,
	lineofsight.cpp, magic.cpp, magic.h, mapstuff.cpp, mapstuff.h,
	movement.cpp, network.cpp, npcs.cpp, regions.cpp, regions.h,
	skills.cpp, speech.cpp, targeting.cpp, uox3.cpp:
	MSVC Warning level 4 fixes.

2001-07-18 11:06  toinzane

	* cClick.cpp:
	Linux compile fix
	Added in a check I missed for pet guarding.

2001-07-18 10:52  toinzane

	* cClick.cpp, combat.cpp:
	Pets will now guard your corpse if they were guarding you when you
	died.
	Fixed pet guarding in PlayerAttack().

2001-07-18 10:29  toinzane

	* calcfuncs.cpp, funcdecl.h, quantityfuncs.cpp, uox3.cpp:
	More minor code cleanups.
	Added an object-based RefreshItem()

2001-07-18 09:56  toinzane

	* cClick.cpp, funcdecl.h, movement.cpp, movement.h,
	quantityfuncs.cpp:
	Added in object-based getSubItemAmt(), DeleItemAmt(), and
	DeleSubItemAmt() functions.
	Cleaned up quantityfuncs.cpp and converted int's to SI32's (to
	avoid cross-platform container size issues).
	Minor code cleanups.
	Fixed some signed / unsigned mismatches.

2001-07-18 08:45  toinzane

	* cClick.cpp:
	Fixed a minor issue with an isCorpse check.

2001-07-18 07:21  toinzane

	* cClick.cpp, funcdecl.h:
	Added in color highlighting for corpses, corpses of murderers will
	be red, innocents blue, racial/guild enemies orange, ect.

2001-07-18 02:29  darkangelab

	* cSocket.cpp, cSocket.h, network.cpp, xgm.cpp:
	Laying down basic framework for xGM support

2001-07-17 23:57  darkangelab

	* magic.cpp, movement.cpp:
	Adjusted field spells so that caster only turns criminal if the
	people in the field are innocent

2001-07-17 23:30  darkangelab

	* cClick.cpp:
	Updated corpse flagging code so that guild enemies/allies and
	racial enemies/allies will not flag criminal if looting

2001-07-17 22:21  toinzane

	* SEFunctions.cpp, funcdecl.h, items.cpp, quantityfuncs.cpp,
	skills.cpp, skills.h:
	Renamed GetIngotAmt(), GetSubIngotAmt(), DeleIngot(), and
	DeleSubIngot(), to getItemAmt(), getSubItemAmt(), DeleIngotAmt(),
	and DeleSubIngotAmt() respectively, And moved them to
	quantityfuncs.cpp

2001-07-17 21:57  darkangelab

	* townregion.cpp, uox3.cpp:
	Slight tweaks/tidy ups to cTownRegion::InitFromScript and
	loadregions()

2001-07-17 21:42  darkangelab

	* skills.cpp, townregion.h, uox3.cpp:
	Changed regionNum in CTownRegion to a UI08
	Added periodic sound playback support in for making items
	Added checks to ensure that you really CAN make an item (and not
	skill busy)
	Slight optimizations to checkauto() and checkPC()

2001-07-17 20:37  darkangelab

	* cConsole.cpp, cSocket.cpp, commands.cpp, magic.cpp, speech.cpp,
	targeting.cpp:
	Updated logging code so that all log files are written into the
	logs subdirectory

2001-07-17 20:19  darkangelab

	* packets.cpp, pcmanage.cpp:
	startchar() now sends the correct hours/minutes/seconds
	CPTime now sets minutes/seconds properly

2001-07-17 20:09  darkangelab

	* network.cpp:
	Removed DNS-list style wholist due to plans for similar system
	under xGM

2001-07-17 19:46  darkangelab

	* cClick.cpp:
	GMs don't go criminal for looking at corpses

2001-07-17 18:51  darkangelab

	* skills.cpp, skills.h:
	Removed redundant GetIngotAmt function
	Added GetIngotAmt function to deal with CChar *
	Added gold exploitation due to begging removal

2001-07-17 18:41  darkangelab

	* skills.cpp:
	Added line of sight check and range check to forensics target

2001-07-17 17:47  toinzane

	* SEFunctions.cpp, boats.cpp, cClick.cpp, calcfuncs.cpp, classes.h,
	cmdtable.cpp, combat.cpp, door.cpp, effect.cpp, funcdecl.h,
	items.cpp, npcs.cpp, sound.cpp, trade.cpp, uox3.cpp:
	Now only items inside multis will display [Locked Down] if movable
	is set to 3.
	Fixed some minor possible issues.
	Miscellaneous minor code cleanups.

2001-07-17 17:26  seank

	* cServerData.cpp, cSkillClass.h, cmdtable.cpp, enums.h, html.cpp,
	im.h, jail.h, npcs.cpp, packets.h, pointer.cpp, queue.cpp,
	scriptc.cpp, teffect.cpp, townregion.cpp, xgm.cpp:
	linux compile fixes and some runtime issues fixed

2001-07-17 17:26  gimmles

	* network.cpp:
	I fixed another visual error, for the console.
	so it prints the correct IP address

2001-07-17 09:37  toinzane

	* uox3.cpp:
	Oops, programming whilst tired is a bad thing :P

2001-07-17 09:31  toinzane

	* books.cpp, cRaces.cpp, commands.cpp, door.cpp, funcdecl.h,
	magic.cpp, npcs.cpp, pcmanage.cpp, pointer.cpp, targeting.cpp,
	trade.cpp, uox3.cpp:
	Fixed a int/bool mismatch with fielddir()
	Changed setserial() to a bool
	Misc minor code cleanups

2001-07-17 01:30  darkangelab

	* speech.cpp:
	Changed a -1 to INVALIDSERIAL to fix signedness

2001-07-16 22:41  darkangelab

	* door.cpp:
	Doors are no longer blocked by offline characters

2001-07-16 22:33  darkangelab

	* cRaces.h, cScript.h, cServerData.h, cSocket.h, cdice.h, fileio.h,
	handlers.h, hash.h, regions.h, scriptc.h, skills.h, speech.h,
	threadsafeobject.h, townregion.h, wholist.h:
	Updated some destructors so that they were flagged virtual (and
	thus, if derived from, would destroy in the proper order)

2001-07-16 22:09  seank

	* cAccount.cpp:
	sizeof converted to strlen

2001-07-16 22:08  darkangelab

	* uox3.cpp:
	Using an explosion potion that damages an innocent turns the user
	criminal

2001-07-16 21:41  darkangelab

	* skills.cpp:
	Inscribing will no longer gain you skill if you don't have enough
	reagants or mana

2001-07-16 21:30  darkangelab

	* cAccount.cpp, cClick.cpp, cSocket.cpp, cmdtable.cpp, html.cpp,
	mapstuff.cpp, network.cpp, regions.cpp, uox3.cpp:
	Changed \\ to / to help with Linux compatability
	Updated cSocket constructors so that bytesReceived and bytesSent
	are init'd to 0
	Looting an innocent corpse that is not your own will result in
	criminality
	Seemingly fixed the xGM packet crash

2001-07-16 20:13  darkangelab

	* SEFunctions.cpp:
	More debugging message updates for the SE functions

2001-07-16 19:45  darkangelab

	* SEFunctions.cpp:
	Updated more SE functions to drop out debugging information
	Slight improvements to some existing debugging writes
	Slight code tidy ups

2001-07-16 18:47  darkangelab

	* network.cpp:
	Tweaks and clean ups to the code
	Removed global use of conn for both CheckConn() and CheckXGMConn()

2001-07-16 18:25  darkangelab

	* cAccount.cpp, cAccount.h, worldmain.cpp, worldmain.h:
	Code cleanup / tidy ups
	Removed redundant save routine in worldmain for accounts
	Updated accounts save routine to write out correctly (although
	still to accounts2.adm)

2001-07-16 18:04  darkangelab

	* worldconverter/: cChar.cpp, uox3.cpp:
	Updates to support new jailing system

2001-07-13 18:52  darkangelab

	* targeting.cpp:
	Slight tweaks to 'make, calling Teleport on body change not Update

2001-07-13 16:53  darkangelab

	* jail.cpp:
	Minor bug fix so that the cell with minimum # of jailees is
	actually used

2001-07-13 15:45  gimmles

	* network.cpp:
	changed the output format of the ignored packet of the GetMSG() ,
	GetLoginMSG(), and GetxGMMsg().
	Gimli

2001-07-13 15:23  seank

	* Makefile.am, Makefile.in, jail.cpp:
	added jail to the makefile

2001-07-13 02:32  darkangelab

	* combat.cpp:
	Fixed slight overflow bug (UI08 cannot be < 0)

2001-07-12 23:59  toinzane

	* boats.cpp, boats.h, combat.cpp, dist.cpp, funcdecl.h,
	movement.cpp, movement.h, uox3.cpp:
	Minor code cleanups, cleaning up MSVC Level 4 Warnings

2001-07-12 23:02  darkangelab

	* UOX3_Official.dsp, cChar.cpp, cChar.h, classes.h, funcdecl.h,
	globals.cpp, jail.cpp, jail.h, magic.cpp, targeting.cpp,
	townregion.cpp, uox3.cpp, uox3.h, uoxstruct.h, worldmain.cpp:
	Rewrote jail system, removing jail_st and writing a wrapper system
	Added jail.h and jail.cpp
	Removed OldXYZ from CChar
	Added jail saving

	TODO
	=====
	Add jail loading
	Add jail scriptable locations
	Write util to convert existing Reserved=0 to Reserved=-1 for
	existing chars (so they're not "stuck" in jail)

2001-07-12 20:25  toinzane

	* combat.cpp:
	Duh, I really need some sleep :P

2001-07-12 20:21  toinzane

	* combat.cpp, combat.h, skills.cpp:
	Minor code cleanups in skills.cpp and combat.cpp

2001-07-12 20:21  darkangelab

	* SEFunctions.cpp:
	Updated SE Gump functions to solve some bugs and print out correct
	debugging information

2001-07-12 20:03  darkangelab

	* SEFunctions.cpp:
	Updated some SE funcs to properly reflect their parameter
	requirements

2001-07-12 18:55  darkangelab

	* funcdecl.h, network.cpp, pcmanage.cpp, uox3.cpp:
	Committed fix for character deletion packet issues (thanks to Gimli
	for diagnosing and suggesting fix)
	Added more tweak's to the UO3D mounts thanks to Weazel

2001-07-11 22:14  darkangelab

	* effect.cpp, skills.cpp:
	Added skill use turning on/off when creating items (as a start for
	blocking multiple skill creation exploits)

2001-07-11 21:42  toinzane

	* combat.cpp, skills.cpp, targeting.cpp:
	Cleaned up CalcDef() a bit
	Added weapon damage to CalcAtt()
	Fixed a minor bug with Meditation
	Minor cleanup in targeting.cpp

2001-07-11 21:14  darkangelab

	* cChar.cpp, uox3.cpp:
	Updated MountCreature / IsValidMount to reflect UO3D creatures that
	are now available
	Note that the NPCs and mounted creatures don't match up quite right
	yet
	===============
	Courtesy of Weazel

2001-07-11 19:27  darkangelab

	* globals.cpp, typedefs.h, uox3.h:
	Removed some superfluous #defines and variables

2001-07-11 19:10  darkangelab

	* effect.cpp:
	Added delayed sound effect support (on a character)

2001-07-11 18:53  darkangelab

	* SEFunctions.cpp, effect.cpp, funcdecl.h, skills.cpp, skills.h,
	teffect.h:
	Adjusted cSkills::MakeItem() to take a 4th parameter (item #)
	Completed delay support for success so that it uses scriptable
	delays (on per item basis)
	Deleted superfluous functions

2001-07-11 18:07  toinzane

	* targeting.cpp:
	Minor bugfix: 'unhide will now strip PermHidden attribute from
	normal players (who were given it by 'hide)

2001-07-11 15:18  toinzane

	* pcmanage.cpp:
	Fixed bugs causing players hidden wth 'hide to be unhidden at
	logon.

2001-07-11 13:32  toinzane

	* commands.cpp, commands.h, magic.cpp, npcs.cpp, skills.cpp,
	targeting.cpp, targeting.h:
	Minor cleanups in commands.cpp, magic.cpp, npcs.cpp, skills.cpp,
	and targeting.cpp,
	Trimmed down excessive use of SERIAL container where it wasn't
	necesarry.

2001-07-11 11:44  toinzane

	* ai.cpp, cMagic.h, classes.h, magic.cpp, skills.h:
	Cleaned up magic.cpp
	Minor cleanups in misc areas of the source.

2001-07-11 10:09  toinzane

	* boats.cpp, boats.h, cItem.cpp, calcfuncs.cpp, dist.cpp,
	effect.cpp, funcdecl.h, house.cpp, magic.cpp, necro.cpp,
	network.cpp, skills.cpp, sound.cpp, speech.cpp, targeting.cpp,
	trade.cpp, uox3.cpp:
	Minor code cleanups all over the source.
	Moved a few functions out of uox3.cpp to more appropriate files.

2001-07-10 22:51  darkangelab

	* speech.cpp:
	Converted speech language string to uppercase for comparison
	purposes (so kor and KOR would be the same)

2001-07-10 21:58  darkangelab

	* cChar.cpp, cClick.cpp, classes.h, effect.cpp, house.cpp,
	items.cpp, magic.cpp, skills.cpp, targeting.cpp, uox3.cpp,
	uoxstruct.h:
	Updated createEntry to hold a member delay
	Changed createEntry.addItem to a string
	Added string based SpawnItemToPack and CreateScriptItem (in
	preperation for DFN system)
	Changed CreateScriptItem's final parameter to bool, and adjusted
	all calls to it
	Added constructor initialization of skillUsed[] for CChar
	Added some prelim support for avoiding alchemy grinding exploits
	Corrected singleclick to only show creator for items made with very
	high skill

2001-07-10 21:52  seank

	* magic.cpp:
	pow call was ambiguous, typecast to int

2001-07-10 21:14  seank

	* SEFunctions.h, magic.cpp, skills.h, targeting.h:
	temporary gcc 3.0 fixes (stupid gcc3 and it's typedef funcdecl
	problems)

2001-07-10 20:05  seank

	* lineofsight.cpp:
	missed one, another sqrt improprietry

2001-07-10 20:03  seank

	* lineofsight.cpp:
	sqrt doesn't take ints.. only floating points

2001-07-10 20:03  darkangelab

	* fileio.cpp, gumps.cpp, html.cpp, items.cpp, mapclasses.h,
	mapstuff.cpp, npcs.cpp, skills.cpp, ssection.cpp, ssection.h,
	uox3.h:
	Tidied up ScriptSection, allowing for better definition support
	(still not active)
	Added crash avoidance to HTML server display
	Generic code tidy ups
	Repositioned create.scp menu buttons on gump properly
	Extended max skill range to maxrange * 1.5 for making items

2001-07-10 15:36  seank

	* ChangeLog, network.cpp:
	FIONBIO is located in sys/ioctl.h, fixed

2001-07-09 22:28  darkangelab

	* network.cpp, uox3.cpp:
	Slight tidy up
	Corpse generated is now put in a multi (if created inside one)
	Added nonblocking listening socket
	Tinkered with select and accept calls to work cleaner
	*known issue*
	login/disconnect before shard list, with proper username/pass,
	seems to stop it from going further

2001-07-09 21:07  darkangelab

	* uox3.cpp:
	Updated monstergate() and advancementobjects(), just doing generic
	clean ups

2001-07-09 20:19  seank

	* ChangeLog, Makefile.am, Makefile.in:
	Updated the makefile

2001-07-09 19:31  darkangelab

	* cClick.cpp, cItem.cpp, cItem.h, commands.cpp, house.cpp,
	items.cpp, magic.cpp, newbie.cpp, npcs.cpp, skills.cpp,
	targeting.cpp, uox3.cpp:
	Added Set / is Newbie(), Decayable() and Dispellable() to CItem
	Adjusted all calls to GetPriv() that does bit comparisons to use
	the new functions

2001-07-09 19:13  darkangelab

	* uox3.cpp:
	Moved the poison wear off code from checkPC and checkNPC to
	genericCheck, resulting in common (cleaner) behaviour of poison

2001-07-09 19:06  darkangelab

	* findfuncs.cpp:
	Added findfuncs.cpp

2001-07-09 18:58  darkangelab

	* classes.h, combat.cpp, SEFunctions.cpp, UOX3_Official.dsp,
	cRaces.cpp, commands.cpp, effect.cpp, funcdecl.h, magic.cpp,
	network.cpp, npcs.cpp, pcmanage.cpp, quantityfuncs.cpp, skills.cpp,
	targeting.cpp, uox3.cpp, vendor.cpp:
	Deleted redundant search functions from cCharStuff
	Moved FindItemOfType, FindItemOnLayer and FindItem, along with
	helper funcs, into findfuncs.cpp
	General code clean ups
	Better error checking on some search funcs

2001-07-09 18:29  darkangelab

	* SEFunctions.cpp, SEFunctions.h, cScript.cpp, cScript.h, uox3.cpp:

	Added onEnterRegion and onLeaveRegion events for characters
	Added GetClientVersion and GetClientType SE functions
	Added onEnterRegion and onLeaveRegion support to TriggerEvent
	Put in handles so that onEnterRegion and onLeaveRegion will fire

2001-07-09 18:06  toinzane

	* npcs.cpp:
	Oopsie, fixed a couple minor errors :P

2001-07-09 18:02  toinzane

	* SEFunctions.cpp, classes.h, items.cpp, necro.cpp, npcs.cpp,
	targeting.cpp, uox3.cpp:
	More cleanups in npcs.cpp
	Broke AddRespawnNPC() into two functions, AddNPC() is called with a
	socket, SpawnNPC() is called with an item, removed the need for
	calling it with a type
	Cleaned up items.cpp

2001-07-09 15:37  toinzane

	* classes.h, funcdecl.h, npcs.cpp, uox3.cpp:
	Many cleanups and fixes done to npcs.cpp
	Renamed getstatskillvalue() to getStringValue()

2001-07-09 12:04  toinzane

	* calcfuncs.cpp, cmdtable.cpp, funcdecl.h, items.cpp, npcs.cpp,
	skills.cpp, speech.cpp, uox3.cpp, vendor.cpp:
	Cleaned up and documented vendor.cpp
	Fixed a problem in npcs.cpp where vendor shop packs were mis-labled
	Cleaned up getname() and changed it to getTileName()

2001-07-08 22:11  seank

	* ChangeLog, cvs2cl.pl:
	added changelog utility

2001-07-08 21:55  darkangelab

	* network.cpp:
	Seemingly fixed the invalid IP connection display

2001-07-08 21:49  darkangelab

	* movement.cpp:
	Added xyblock[] overflow checking (avoids crashing in really
	overloaded squares)

2001-07-08 21:45  darkangelab

	* mapclasses.h, mapstuff.cpp, mapstuff.h, movement.cpp, movement.h,
	packets.cpp, skills.cpp, uoxstruct.h:
	Changed unitile_st to CTileUni and moved it to mapclasses.h
	Abstracted away flags for unitile_st so it's member function based
	(and more meaningful)
	Slight tweaks and tidy ups

2001-07-08 21:34  seank

	* ChangeLog:
	cvs2pl changelog test

2001-07-08 20:57  seank

	* Makefile.am, Makefile.in, cServerData.h, skills.cpp:
	gcc 2.95 fixes

2001-07-08 20:14  darkangelab

	* UOX3_Official.dsp, cClick.cpp, items.cpp, pcmanage.cpp,
	skills.cpp, targeting.cpp, uox3.cpp:
	Added pcmanage.cpp, to contain character management functions
	Removed the setting of HiDamage and LoDamage to 5 of a lot of
	items, preventing them being engraved
	General code tidy ups

2001-07-08 19:11  toinzane

	* cClick.cpp, uox3.cpp:
	Fixed a possible UOE/UOP exploit that would allow users to steal
	items from outside houses by tricking the client into thinking the
	house wasn't there.
	Added a temporary hack to make offline players unkillable until
	Deathstuff() can be fixed up.

2001-07-08 18:57  darkangelab

	* SEFunctions.cpp, SEFunctions.h, cItem.cpp, cItem.h, cRaces.cpp,
	cRaces.h, cScript.cpp, network.cpp, packets.cpp, packets.h,
	speech.cpp, speech.h, targeting.cpp, typedefs.h, uox3.cpp:
	Changed COLOR to COLOUR
	Changed COLOUR to a UI16 from a UI32
	Used COLOUR more usefully
	Added GetTileIDAtMapCoord SE function
	Changed amount to an SI32 from UI32
	Extending stacking to 65535 from 60000
	Uncommented code that will fix player vendor purchasing exploit

2001-07-08 13:29  toinzane

	* movement.cpp:
	Added more error checking to trim down on Walking console spam.

2001-07-08 11:13  toinzane

	* packets.cpp:
	Skill Window Stuff, accidentally left debug stuff in with my last
	commit. :P

2001-07-08 11:08  toinzane

	* packets.cpp:
	Fixed the SkillWindow bug

2001-07-07 23:24  toinzane

	* PageVector.h, SEFunctions.cpp, boats.cpp, books.cpp, books.h,
	cChar.cpp, cGuild.cpp, cGuild.h, cMagic.h, cMultiObj.cpp,
	cMultiObj.h, cRaces.cpp, cRaces.h, cServerData.cpp, cServerData.h,
	cSocket.cpp, cSocket.h, cWeather.cpp, calcfuncs.cpp,
	charhandle.cpp, cmdtable.cpp, combat.cpp, combat.h, effect.cpp,
	funcdecl.h, globals.cpp, gumps.cpp, handlers.h, html.cpp, im.cpp,
	im.h, lineofsight.cpp, magic.cpp, mapclasses.h, movement.cpp,
	movement.h, network.cpp, network.h, npcs.cpp, packets.cpp,
	queue.cpp, skills.cpp, speech.cpp, speech.h, targeting.cpp,
	townregion.cpp, townregion.h, typedefs.h, uox3.cpp, uox3.h,
	uoxstruct.h, weight.cpp, weight.h:
	Minor code cleanups
	Many MSVC Warning Level 4 Fixes
	Several unrefrenced variables removed.
	Converted all floats to R32, and all doubles to R64
	Overhauled and cleaned up im.cpp and im.h

2001-07-07 11:25  toinzane

	* combat.cpp, combat.h, movement.cpp, skills.cpp, skills.h,
	uox3.cpp:
	Minor changes and cleanups in combat.cpp
	Moved GetShield() and GetCombatSkill() from skills.cpp to
	combat.cpp
	Minor code cleanups in uox3.cpp

2001-07-07 09:24  toinzane

	* uox3.cpp:
	More fixes to dropping items on players.
	Improved autostacking code.
	Fixed some minor weight issues.

2001-07-06 23:11  toinzane

	* cItem.cpp, cItem.h, skills.cpp, uox3.cpp:
	Fixed bug causing items to vanish when dragged onto another player
	or yourself (note you need to refresh your pack after dragging an
	item onto yourself)
	Fixed a minor Linux compile issue (thanks seank)
	Fixed the bane of UOX.. The item-dupe bug (Item would automatically
	dupe itself when moved), this was caused by items being set to an
	amount larger than their container would hold, when that happened,
	it would wrap the amount and continue to spawn the item when moved
	until it reached that amount, SetAmount() now has a limit of 60k,
	note UOX will fix any invalidated items at worldsave

2001-07-06 19:14  toinzane

	* skills.cpp, uox3.cpp:
	More minor updates to weight checks on stealing
	Fixed bug allowing players to drop items into other characters
	packs, now only GMs and Counsellors may put an item in another
	characters pack.

2001-07-06 17:32  toinzane

	* skills.cpp:
	Stealing is now based on the thiefs armor as well as skill, higher
	the AR, more skill it takes to steal (as with weight), at >40 AR,
	you will not be able to steal at all.

2001-07-06 15:57  toinzane

	* skills.cpp, skills.h:
	More minor fixes in skills.cpp
	Fixed up RandomSteal() and StealingTarget()
	Added a new function: calcStealDiff(), will determine based on an
	items type and weight, and players skill if he is able to steal it,
	will then returns the minimum skill needed to steal that item based
	on its weight.

2001-07-06 13:32  toinzane

	* SEFunctions.cpp, classes.h, combat.cpp, combat.h, items.cpp,
	newbie.cpp, skills.cpp, uox3.cpp:
	Minor code cleanups
	Rewrote StealingTarget() (Still needs some work, but looks/works
	much better now)
	Fixed a bug with CalcDef() that could cause infinite loops as well
	as causing damage to armor when it shouldn't (Should GREATLY reduce
	armor damage rate)
	Fixed some issues that could potentially lead to serious bugs

2001-07-06 09:08  toinzane

	* cClick.cpp, cRaces.cpp:
	Cleaned up cClick.cpp and documented its functions
	Incorporated some changes from Abaddon to slim down singleclick()
	and fix some problems.
	Fixed some problems for GM's seeing items as # instead of the
	proper name.
	Fixed a small issue in cRaces.cpp regarding skill counting.

2001-07-06 01:42  darkangelab

	* cSocket.cpp, cSocket.h, enums.h, network.cpp, packets.cpp,
	packets.h:
	Added ClientTypes enumeration (regular, t2a, uo3d, unknown)
	Added ClientTypes support to socket (defaulting to regular)
	Added ClientVersion tracking (stores as 32 bit integer)
	Added CPIClientVersion packet that copes with the client version
	packet (assuming a format of x.x.xa)

2001-07-06 00:29  darkangelab

	* cAccount.cpp, globals.cpp, uox3.cpp, uox3.h, worldmain.cpp:
	Reduced the use of scpfile back to a small number of functions
	General small tidyups
	Eliminated global wscfile variable (superfluous)
	Updated build number

2001-07-05 23:09  darkangelab

	* cChar.cpp, npcs.cpp, scriptc.cpp, skills.cpp, uox3.cpp:
	Generic tidy ups
	Fixed a few updateSkillLevel loops iterating too far
	Added an updateSkillLevel loop to PostLoadProcessing of CChar,
	fixing the 0 effective skill bug (but NOT fixing skill window)

2001-07-05 21:35  darkangelab

	* enums.h, speech.cpp, speech.h:
	Added ENA language code (English, Australian)
	Unicode speech now sets the language correctly (ensure you have a
	dictionary of the right language!)

2001-07-05 20:46  toinzane

	* SEFunctions.cpp, ai.cpp, cClick.cpp, calcfuncs.cpp, combat.cpp,
	funcdecl.h, magic.cpp, npcs.cpp, skills.cpp, targeting.cpp,
	uox3.cpp:
	Code cleanups in npcs.cpp
	Moved some more calc functions from uox3.cpp to calcfuncs.cpp
	Documented all functions in calcfuncs.cpp
	Changed backpack2() to openCorpse()
	Cleaned up backpack() and openCorpse()

2001-07-05 20:36  darkangelab

	* Dictionary.cpp, ssection.cpp:
	Minor dictionary tweaks
	Added function headers for ScriptSection
	Tidied up ScriptSection constructors

2001-07-05 19:54  darkangelab

	* worldconverter/uox3.cpp:
	Fixed old world save to increment item/char counter
	Minor cleanups

2001-07-05 19:15  darkangelab

	* worldconverter/: cBaseobject.cpp, cChar.cpp, cItem.cpp,
	globals.cpp, regions.cpp, uox3.cpp, uox3.h:
	Remvoed garbage collection / item testing
	Updated SetCont to deal with nonexistent character/item containers
	Wrote a pretend save for old style multis -> new

	Test worldfile of 963 items / 3 characters works
	Note that the world size WILL increase, as old worldfiles write
	minimalist information, new world files write everything

2001-07-05 18:17  seank

	* configure, configure.in:
	linux debugging turned off for speed

2001-07-05 17:56  darkangelab

	* cGuild.cpp, effect.cpp, funcdecl.h, gumps.cpp, movement.cpp,
	packets.cpp, packets.h, skills.cpp, uox3.cpp:
	Other option, heaven forbid, is use ISO scoping, and use more
	variable names (can eleminate need for count outside loop)
	Updated gump code to deal better with SERIAL, rather than multibyte
	parts
	Updated gumpentry() to use dictionary entries
	Corrected more sysmessage() calls to use dictionary stuff
	Used const char *on gump text entry packet, rather than char *

2001-07-05 17:20  seank

	* uox3.cpp:
	linux fixes.  Ok people, you have to stop using iso-incompatible
	scoping.  for (int i; .. ) { }	i is only scoped for inside the for
	loop,
	not outside it.

2001-07-05 16:47  toinzane

	* SEFunctions.cpp, boats.cpp, cClick.cpp, calcfuncs.cpp, classes.h,
	combat.cpp, effect.cpp, funcdecl.h, gumps.cpp, house.cpp,
	items.cpp, movement.cpp, necro.cpp, newbie.cpp, npcs.cpp,
	skills.cpp, targeting.cpp, uox3.cpp:
	Fully documented uox3.cpp functions
	Moved calcRegionFromXY() from uox3.cpp to calcfuncs.cpp
	Moved npcsimpleattacktarget(), npcattacktarget(),
	npcToggleCombat(), npcToggleCombat(), npcact(), and npcaction()
	from uox3.cpp to npcs.cpp
	Renamed mounthorse() to MountCreature() and unmounthorse() to
	DismountCreature()
	Misc minor code cleanups

2001-07-05 08:53  toinzane

	* funcdecl.h, mapstuff.cpp, skills.cpp, uox3.cpp:
	Some minor code cleanups.
	Beginning of function documentation in uox3.cpp

2001-07-05 03:09  darkangelab

	* SEFunctions.cpp, boats.cpp, books.cpp, cChar.cpp, cClick.cpp,
	cGuild.cpp, cRaces.cpp, cScript.cpp, cWeather.cpp, calcfuncs.cpp,
	cmdtable.cpp, cmdtable.h, combat.cpp, commands.cpp, dist.cpp,
	effect.cpp, funcdecl.h, gumps.cpp, house.cpp, html.cpp, items.cpp,
	lineofsight.cpp, movement.cpp, msgboard.cpp, npcs.cpp, magic.cpp,
	skills.cpp, sound.cpp, speech.cpp, targeting.cpp, targeting.h,
	townregion.cpp, trade.cpp, uox3.cpp, vendor.cpp, weight.cpp,
	wholist.cpp:
	Encapsulated Network->GetSockPtr() in calcSocketObjFromSock
	Encapsulated Network->FindNetworkPtr() in calcSocketFromSockObj()
	Changed many sysmessages() to be more dictionary friendly
	Wrote 2 more target() functions that are dictionary friendly, and
	converted all target() calls to these 2
	Small miscellaneous tidy ups

2001-07-05 00:56  darkangelab

	* msgboard.cpp, necro.cpp, network.cpp, skills.cpp:
	Slight fix for magic
	Changed lots of sysmessage() to dictionary friendly ones

2001-07-04 23:16  seank

	* threadsafeobject.cpp:
	Windows compile fix

2001-07-04 23:13  seank

	* uox3.cpp:
	Windows compile fix

2001-07-04 23:01  seank

	* Makefile.in:
	Linux compile fixes

2001-07-04 22:56  seank

	* AUTHORS, COPYING, ChangeLog, INSTALL, NEWS, PageVector.h, README,
	SEFunctions.h, boats.cpp, books.cpp, cAccount.cpp, cBaseObject.h,
	cChar.h, cClick.cpp, cConsole.cpp, cConsole.h, cGuild.cpp,
	cGuild.h, cItem.h, cMagic.h, cMultiObj.h, cScript.h, cServerData.h,
	cServerDefinitions.h, cSocket.cpp, cSocket.h, cThreadQueue.cpp,
	cThreadQueue.h, calcfuncs.cpp, cdice.h, classes.h, combat.h,
	commands.h, configure, configure.in, enums.h, fileio.cpp,
	funcdecl.h, gump.h, handlers.h, hash.h, install-sh, magic.cpp,
	magic.h, mapclasses.h, mapstuff.cpp, mapstuff.h, missing,
	mkinstalldirs, movement.h, network.cpp, network.h, packets.h,
	regions.h, skills.h, speech.h, ssection.h, targeting.cpp,
	targeting.h, teffect.h, threadsafeobject.cpp, threadsafeobject.h,
	townregion.h, trigger.h, typedefs.h, uox3.cpp, uox3.h, uoxlinux.h,
	weight.h, wholist.h, worldmain.cpp, Makefile.am:
	Linux compile fixes

2001-07-04 21:37  darkangelab

	* SEFunctions.cpp, cMagic.h, magic.cpp, skills.cpp, targeting.cpp,
	uoxstruct.h:
	Fixed magery casting bug which had reagent errors
	Removed extraneous DeleReagents function from magic
	Fixed a potential spell blocking bug
	Added a default constructor to reag_st to initialize all values

2001-07-04 21:23  toinzane

	* cServerData.cpp, cServerData.h, skills.cpp:
	Made engrave toggleable with ENGRAVEENABLED in server.scp

2001-07-04 20:35  darkangelab

	* cRaces.cpp, cWeather.cpp, house.cpp, packets.cpp:
	Fixed a crash issue doing an 'add which involved invalid skill
	values calling a race function
	Fixed multiplacement view packet so houses/boats ghost properly
	More code tidy ups
	Updated weather periodic update to take into account light changes
	on a minutely basis

2001-07-04 19:59  toinzane

	* weight.cpp:
	More error-checking added to weight, now will not fall below 0 or
	above 32,000.
	Minor cleanups in weight.cpp, along with better function
	documentation.

2001-07-04 19:34  darkangelab

	* fileio.cpp, fileio.h, magic.cpp, movement.cpp, uox3.cpp:
	Fixed a nonupdating stamina issue with overloaded walking
	More sysmessage() changes
	Changed ioBuff to UI08 * from char *
	Fixed crash bug when entering an area with nonexistent midi

2001-07-04 18:21  darkangelab

	* cItem.cpp, cMagic.h, classes.h, effect.cpp, fileio.cpp,
	funcdecl.h, gumps.cpp, house.cpp, items.cpp, lineofsight.cpp,
	magic.cpp, npcs.cpp, regions.cpp, sound.cpp, targeting.cpp,
	uox3.cpp:
	Much greater usage of dictionary safe sysmessage
	Removed InitChar function, as it was already empty
	Tidied up magic.cpp
	Reduced parameter count for cMagic::SummonMonster
	Fixed PoisonDamage bug

2001-07-04 17:02  darkangelab

	* door.cpp, effect.cpp, skills.cpp:
	Fixed a tempeffect2 bug which didn't store source correctly
	Fixed dooruse to use either active char or invalid char, rather
	than character 0
	Fixed checktempeffects to calculate proper character for door
	closing
	Fixed door not closing bug

2001-07-04 16:45  darkangelab

	* cChar.cpp, cChar.h, skills.cpp, speech.cpp:
	Removal of the Get/Set BankBox functions in CChar
	Removed all references to Get/Set BankBox functions, fixing
	non-reopening bank box
	Tidied up some of the CChar member code

2001-07-04 16:32  uid43025

	* network.cpp:
	More meaningful message displayed when a client disconnects

2001-07-04 16:31  uid43025

	* mapstuff.cpp:
	Fixed a minor invalid return

2001-07-04 08:33  uid55407

	* dist.cpp, funcdecl.h, gumps.cpp, house.cpp, html.cpp, im.cpp,
	mapstuff.cpp, mapstuff.h, msgboard.cpp, msgboard.h, necro.cpp,
	scriptc.cpp:
	Few minor code cleanups throughout the source with a couple
	possible bugfixes

2001-07-04 00:11  uid55407

	* calcfuncs.cpp, funcdecl.h, uox3.cpp:
	Minor cleanups in uox3.cpp
	Moved calcLastContainerFromSer to calcfuncs.cpp
	Testing Commit to CVS ability :P

2001-07-03 21:52  uid43025

	* cmdtable.cpp, commands.cpp, items.cpp, mapstuff.cpp, scriptc.cpp,
	targeting.cpp, uox3.cpp:
	Zane
	====
	Soundfx properly played for picking up items from ground
	'set kills added, 'setmurder removed (code commented)
	ItemSpawn() and ItemSpawnBackpack2() automatically add the items
	weight to the calling character (if any)
	Minor cleanups in targeting.cpp

	Abaddon
	=======
	Started work on definition section header support

2001-07-03 21:16  uid43025

	* SEFunctions.cpp, cClick.cpp, cSocket.cpp:
	Fixed an SE InRange issue where items were in a pack
	Fixed a doubleclick issue that would put an item out of range (if
	not on ground)
	Updated second cSocket constructor to have default language

2001-07-03 20:36  darkangelab

	* combat.cpp, commands.cpp, door.cpp, effect.cpp:
	Updated sysmessage calls to call the dictionary friendly sysmessage
	One or two minor code cleanups

2001-07-03 19:26  darkangelab

	* boats.cpp, cChar.cpp, cClick.cpp:
	Updated boats.cpp, cChar.cpp and cClick.cpp to replace sysmessage
	calls wtih dictionary friendly sysmessage calls

2001-07-03 18:59  darkangelab

	* cChar.cpp, door.cpp, funcdecl.h, lineofsight.cpp, movement.cpp,
	movement.h, sound.cpp, targeting.cpp, trade.cpp, uox3.cpp,
	vendor.cpp:
	GM's don't lose stamina when running
	Added commented line of sight proposed algorithm
	Added few more func decl headers

	(on behalf of Zane)
	Cleaned up movement.cpp functions
	Cleaned up uox3.cpp along with fixing several issues with weight
	fixed soundeffects() bug causing sound not to always play to
	calling socket

2001-07-03 17:04  darkangelab

	* calcfuncs.cpp:
	Late addition of calcfuncs.cpp

2001-07-03 03:31  darkangelab

	* SEFunctions.cpp, UOX3_Official.dsp, ai.cpp, boats.cpp,
	cClick.cpp, cGuild.cpp, cRaces.cpp, cWeather.cpp, cmdtable.cpp,
	combat.cpp, effect.cpp, enums.h, funcdecl.h, globals.cpp,
	magic.cpp, msgboard.cpp, necro.cpp, network.cpp, network.h,
	packets.cpp, packets.h, regions.h, skills.cpp, speech.cpp,
	targeting.cpp, uox3.cpp, uox3.h, vendor.cpp, wholist.cpp:
	Addition of the LoginDenyReason enumeration
	Added CPLoginDeny packet, allowing removal of some global arrays
	for packets
	Deprecation of cNetworkStuff::CharList and cNetworkStuff::Relay by
	implementing the CPISecondLogin and CPIServerSelect packets
	Declaration of dictionary based sysmessage
	Conversion of cmdtable.cpp, cRaces.cpp, wholist.cpp and
	cWeather.cpp to using new dictionary based sysmessage
	Changed all references to antispam to use booleans rather than char
	Adjusted speech functions to use a single UI16 for colour rather
	than 2 UI08s
	Deprecated 2 itemmessage() functions and converted other serial
	based references to char/item references

2001-07-03 03:25  darkangelab

	* door.cpp, lineofsight.cpp, quantityfuncs.cpp:
	Breaking out some functions from uox3.cpp and moving them into
	their own file

2001-07-03 00:18  darkangelab

	* combat.cpp, combat.h, funcdecl.h, magic.cpp, targeting.cpp,
	uox3.cpp:
	Addition of a cBaseObject based LOS call, turning a number of calls
	into that
	Broke out a few more functions in combat.cpp
	General code tidy up in combat.cpp

2001-07-02 20:24  darkangelab

	* UOX3_Official.dsp, cServerData.cpp, cServerDefinitions.cpp,
	magic.cpp, uox3.cpp:
	Fixed release crash bug when loading spells
	Adjusted Release part of the project to have the proper defines
	Updated multiple SCP file scanning to work better with directory
	navigation
	General code tidy ups

2001-07-01 22:42  darkangelab

	* uox3.cpp:
	Cannot damage invulnerable players with explosion potions
	Tidied up spawnregion code and added CALL support, fixing a slight
	map region bug

2001-07-01 22:34  darkangelab

	* UOX3_Official.dsp:
	Adjustments to the link part of the profiles to remove a bad
	reference to JavaScript/

2001-07-01 22:33  darkangelab

	* cClick.cpp, skills.cpp, targeting.cpp, uoxstruct.h:
	Tidy up of the make_st to work more cleanly with structure

2001-07-01 21:55  darkangelab

	* worldconverter/: UOX3WorldConverter.dsp, UOX3WorldConverter.dsw,
	cBaseObject.h, cBaseobject.cpp, cChar.cpp, cChar.h, cItem.cpp,
	cItem.h, cMultiObj.cpp, cMultiObj.h, charhandle.cpp, classes.h,
	enums.h, funcdecl.h, globals.cpp, handlers.h, hash.cpp, hash.h,
	itemhandler.cpp, power.h, regions.cpp, regions.h, resource.h,
	typedefs.h, uox3.cpp, uox3.h, uox3.ico, uox3.rc, uoxstruct.h:
	Creation of worldconverter project

2001-07-01 21:52  darkangelab

	* uoxlist.h:
	Removal of excess files

2001-07-01 21:44  darkangelab

	* worldconverter/readme.txt:
	Creation of worldconverter project

2001-07-01 21:26  darkangelab

	* UOX3_Official.dsp, UOX3_Official.dsw, uox3.cpp, uox3.h, uox3.ico,
	uox3.rc, uoxlist.h, uoxstruct.h, vendor.cpp, weight.cpp, weight.h,
	wholist.cpp, wholist.h, worldmain.cpp, worldmain.h, xgm.cpp, xgm.h,
	readme.txt:
	Initial commit of 0.95 source

2001-07-01 21:23  darkangelab

	* Dictionary.cpp, Dictionary.h, cSkillClass.h, cSocket.cpp,
	cSocket.h, cThreadQueue.cpp, cThreadQueue.h, cWeather.cpp,
	cWeather.hpp, debug.cpp, debug.h, dist.cpp, effect.cpp, enums.h,
	fileio.cpp, fileio.h, funcdecl.h, globals.cpp, gump.h, gumps.cpp,
	handlers.h, hash.cpp, hash.h, house.cpp, html.cpp, im.cpp, im.h,
	itemhandler.cpp, PageVector.h, items.cpp, magic.cpp, magic.h,
	mapclasses.h, mapstuff.cpp, mapstuff.h, movement.cpp, movement.h,
	msgboard.cpp, msgboard.h, necro.cpp, network.cpp, network.h,
	newbie.cpp, npcs.cpp, packets.cpp, packets.h, pointer.cpp, power.h,
	queue.cpp, SEFunctions.cpp, SEFunctions.h, regions.cpp, regions.h,
	resource.h, scriptc.cpp, scriptc.h, skills.cpp, skills.h,
	sound.cpp, speech.cpp, speech.h, ssection.cpp, ssection.h,
	targeting.cpp, targeting.h, teffect.cpp, teffect.h,
	threadsafeobject.cpp, threadsafeobject.h, townregion.cpp,
	townregion.h, trade.cpp, trigger.cpp, trigger.h, typedefs.h:
	Initial commit of 0.95 source

2001-07-01 21:19  darkangelab

	* archive.cpp, boats.cpp, boats.h, books.cpp, books.h,
	cAccount.cpp, cAccount.h, cBaseObject.h, cBaseobject.cpp,
	cChar.cpp, cChar.h, cClick.cpp, cConsole.cpp, cConsole.h,
	cDice.cpp, cGuild.cpp, cGuild.h, cdice.h, charhandle.cpp,
	cItem.cpp, cItem.h, cMagic.h, cMultiObj.cpp, cMultiObj.h,
	classes.h, cmdtable.cpp, cmdtable.h, combat.cpp, cRaces.cpp,
	cRaces.h, cScript.cpp, cScript.h, cServerData.cpp, cServerData.h,
	cServerDefinitions.cpp, cServerDefinitions.h, combat.h,
	commands.cpp, commands.h:
	Initial commit of 0.95 source

2001-07-01 21:15  darkangelab

	* ai.cpp:
	Initial commit of 0.95 source

2001-06-06 08:54  yeshe

	* readme.txt:
	creation

